Процедура СделатьЗаписьВСправочникСообщенияПриЗагрузкеФайловОтДистрибьютора(Параметры)
	//ИмяФайла
	//Дата 
	//ТипОшибки 
	//ИмяФайла
	//ОписаниеОшибки
	//НомерСтрокиВФайле
	
	НовЗапись = Справочники.СообщенияПриЗагрузкеФайловОтДистрибьютора.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НовЗапись,Параметры);
	НовЗапись.Записать();
КонецПроцедуры

Процедура ПолучитьФайлыИзПочты()
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	Профиль.АдресСервераIMAP = Константы.АдресСервераIMAP.Получить();
	Профиль.ПортIMAP = Константы.ПортIMAP.Получить();
	Профиль.ПользовательIMAP = Константы.ПользовательIMAP.Получить();
	Профиль.ПарольIMAP = Константы.ПарольIMAP.Получить();
	Профиль.ВремяОжидания = 50; 
	
	Почта = Новый ИнтернетПочта;
	
	Попытка
		Почта.Подключиться(Профиль,ПротоколИнтернетПочты.IMAP);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки()); 
		Параметры = Новый Структура;
		Параметры.Вставить("ТипОшибки", Перечисления.ТипыОшибок.НетПодключенияКПочте);
		Параметры.Вставить("Дата",ТекущаяДата());
		СделатьЗаписьВСправочникСообщенияПриЗагрузкеФайловОтДистрибьютора(Параметры);
		Возврат;
	КонецПопытки;
	
	ОтборПисем = Новый Структура;
	ОтборПисем.Вставить("Прочитанные", Ложь);
	
	Заголовки=Почта.ПолучитьЗаголовки(ОтборПисем);
	Если Заголовки.Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В почтовом ящике нет входящих сообщений!");
	Иначе 
		ПутьКФайлу = Константы.ПутьКФайлуЗагрузкиПродажДистрибьютору.Получить();
		// Загрузка сообщений в массив
		Сообщения = Почта.Выбрать(Ложь,Заголовки,Истина);	
		Для Каждого Сообщение Из Сообщения Цикл	
			Для каждого Вложение Из Сообщение.Вложения Цикл
				Вложение.Данные.Записать(ПутьКФайлу+"\"+Вложение.Name);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Загружает продажи дистрибьютору из файла, используется в фоновом задании.
Процедура ЗагрузитьПродажиВозвратыОстаткиДистрибьюторовИзРегламентногоЗадания() Экспорт  
	ПолучитьФайлыИзПочты();
	
	ТабЗагрузок = Новый ТаблицаЗначений;
	ТабЗагрузок.Колонки.Добавить("Дата");
	ТабЗагрузок.Колонки.Добавить("ВидФайла");
	ТабЗагрузок.Колонки.Добавить("ПолныйПутьКФайлу");
	ТабЗагрузок.Колонки.Добавить("Имя");
	
	ПутьКФайлу = Константы.ПутьКФайлуЗагрузкиПродажДистрибьютору.Получить();
	Файлы = НайтиФайлы(ПутьКФайлу,"*.xls*", Ложь);
	Для Каждого Файл Из Файлы Цикл 
		Попытка
			ПолныйПутьКФайлу = Файл.ПолноеИмя;
			
			//получим период из имени файла
			КодДистрибьютора = Лев(Файл.ИмяБезРасширения,стрнайти(Файл.ИмяБезРасширения,"_",НаправлениеПоиска.СНачала)-1);
			ВидФайла = Сред(Файл.ИмяБезРасширения,стрнайти(Файл.ИмяБезРасширения,"_",НаправлениеПоиска.СКонца)+1);
			Дата = Дата(Сред(Файл.ИмяБезРасширения,стрнайти(Файл.ИмяБезРасширения,"_",НаправлениеПоиска.СНачала)+1, СтрНайти(Файл.ИмяБезРасширения, "_", НаправлениеПоиска.СКонца)-СтрНайти(Файл.ИмяБезРасширения, "_", НаправлениеПоиска.СНачала)-1));
			
			
			Если ЗначениеЗаполнено(КодДистрибьютора) И ЗначениеЗаполнено(ВидФайла) И ЗначениеЗаполнено(Дата) Тогда 
				НовСтр = ТабЗагрузок.Добавить();
				НовСтр.Дата = Дата;
				НовСтр.ВидФайла = ?(НРег(ВидФайла) = "sell",1,?(НРег(ВидФайла) = "ret",2,3));
				НовСтр.ПолныйПутьКФайлу = ПолныйПутьКФайлу;
				НовСтр.Имя = Файл.Имя;
			Иначе 
				Параметры = Новый Структура;
				Параметры.Вставить("ТипОшибки", Перечисления.ТипыОшибок.НеВерноеНаименованиеФайла);
				Параметры.Вставить("Дата",ТекущаяДата());
				Параметры.Вставить("ИмяФайла",Файл.Имя);
				
				СделатьЗаписьВСправочникСообщенияПриЗагрузкеФайловОтДистрибьютора(Параметры);
				
				ПереместитьФайл(ПолныйПутьКФайлу, Константы.ПутьКФайлуЗагрузкиПродажДистрибьютору.Получить()+"\error\"+Файл.Имя);
			КонецЕсли;
			
			//Загружаем по дате и порядку продажи,возвраты,остатки
			//			Начало = Дата(Сред(Файл.ИмяБезРасширения, 5,4)+Сред(Файл.ИмяБезРасширения, 3,2)+Лев(Файл.ИмяБезРасширения,2));
			//			Окончание = Дата(Сред(Файл.ИмяБезРасширения, 13,4)+Сред(Файл.ИмяБезРасширения, 11,2)+Сред(Файл.ИмяБезРасширения,9,2));
			//			Если Окончание > Начало Тогда 
			//				Период = Новый СтандартныйПериод;
			//				Период.ДатаНачала = Начало;
			//				Период.ДатаОкончания = КонецДня(Окончание);
			//	//			УдалитьРеализацииПоДистрибьютору(Период);		
			//				стрнайти("","",НаправлениеПоиска.СНачала)
			////				ЗагрузитьИзФайлаТабличнуюЧастьНаСервере("",Истина,"",Файл.ПолноеИмя);
			//			КонецЕсли;	
		Исключение
			Параметры = Новый Структура;
			Параметры.Вставить("ТипОшибки", Перечисления.ТипыОшибок.НеВерноеНаименованиеФайла);
			Параметры.Вставить("Дата",ТекущаяДата());
			Параметры.Вставить("ИмяФайла",Файл.Имя);
			
			СделатьЗаписьВСправочникСообщенияПриЗагрузкеФайловОтДистрибьютора(Параметры);
			
			ПереместитьФайл(ПолныйПутьКФайлу, Константы.ПутьКФайлуЗагрузкиПродажДистрибьютору.Получить()+"\error\"+Файл.Имя);
		КонецПопытки;
	КонецЦикла;	
	
	ТабЗагрузок.Сортировать("Дата,ВидФайла");
	Для Каждого ТекСтрока Из ТабЗагрузок Цикл 
		ЗагрузитьИзФайлаТабличнуюЧастьНаСервере("", Истина, "", Истина, ?(ТекСтрока.ВидФайла=1,"Продажа", ?(ТекСтрока.ВидФайла=2,"Возврат","Остатки")),ТекСтрока.ПолныйПутьКФайлу,ТекСтрока.Имя)
	КонецЦикла;	
КонецПроцедуры

Процедура ЗагрузитьИзФайлаТабличнуюЧастьНаСервере(Адрес, СоздаватьОбъектыПриЗагрузке, Расширение, УдалитьДокументыЗаПериод, ТипФайла, ПутьКфайлу = "",УникальныйИдентификатор) Экспорт 
	Если ПутьКфайлу = "" Тогда 
		Данные = ПолучитьИзВременногоХранилища(Адрес); 
		Данные.Записать(КаталогВременныхФайлов()+УникальныйИдентификатор+"."+Расширение);
		ТЗ = ЗагрузитьМетодом_1C836(КаталогВременныхФайлов()+УникальныйИдентификатор+"."+Расширение);
		УдалитьФайлы(КаталогВременныхФайлов()+УникальныйИдентификатор+"."+Расширение);
	Иначе 
		ТЗ = ЗагрузитьМетодом_1C836(ПутьКфайлу);
		ПереместитьФайл(ПутьКфайлу, Константы.ПутьКФайлуЗагрузкиПродажДистрибьютору.Получить()+"\Processed\"+УникальныйИдентификатор);
	КонецЕсли;
	
	ДатаНачалаУдаления =  Дата('00010101');
	ДатаКонцаУдаления =  Дата('00010101');
	
	//Типизируем ТЗ
	ТЗДляЗагрузкиТЧ = Новый ТаблицаЗначений;
	
	Если ТипФайла = "Остатки" Тогда 
		ТЗДляЗагрузкиТЧ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТЗДляЗагрузкиТЧ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		ТЗДляЗагрузкиТЧ.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
		ТЗДляЗагрузкиТЧ.Колонки.Добавить("Вес", Новый ОписаниеТипов("Число"));
		ТЗДляЗагрузкиТЧ.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерений"));
		ТЗДляЗагрузкиТЧ.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
		
		Для Каждого стр Из ТЗ Цикл 
			ТекНоменклатура = "";
			ТекЕдИзмерения = "";
			
			Если стр.НомерСтроки < 2 Тогда  //в первой строке содержатся данные с наименованием колонок
				СтрокаСНаименованиемКолонок = стр;
			Иначе 
				КодДистрибьютора = СтрЗаменить(стр[2],Символы.НПП,"");
				Если КодДистрибьютора = "" Тогда 
					Прервать;
				КонецЕсли;
				
				Пока СтрДлина(КодДистрибьютора) < 6 Цикл 
					КодДистрибьютора = "0" + КодДистрибьютора;
				КонецЦикла;
				
				Дата = стр[3];	
				Если ТипЗнч(Дата) = Тип("Строка") Тогда 
					Если СтрДлина(Дата) = 8 Тогда 
						Дата = Лев(Дата,6)+"20"+Сред(Дата,7,2);
					КонецЕсли;
					
					Дата = Дата(Дата+ " 00:00:00");
				КонецЕсли;
				
				ДатаНачалаУдаления = ?(ДатаНачалаУдаления > Дата, Дата, ДатаНачалаУдаления);
				ДатаКонцаУдаления = ?(ДатаКонцаУдаления < Дата, Дата, ДатаКонцаУдаления);
				
				Номенклатура = Строка(стр[4]); 
				АртикулСыробогатов = СтрЗаменить(Строка(стр[5]),Символы.НПП,"");
				ЕдИзмерения = Строка(стр[6]);
				Если Нрег(ЕдИзмерения) = "шт" Тогда 
					ЕдИзмерения = "шт."
				КонецЕсли;
				
				Количество = ?(стр[7] = Неопределено,0, Число(СтрЗаменить(стр[7],"'","")));
				Сумма = ?(стр[8] = Неопределено,0, Число(СтрЗаменить(стр[8],"'","")));
				Вес = ?(стр[9] = Неопределено,0, Число(СтрЗаменить(стр[9],"'","")));
				
				ОписаниеОшибки = "";
				
				//найдем дистрибьютора
				ТекДистрибьютор = "";
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	Дистрибьюторы.Ссылка
				|ИЗ
				|	Справочник.Дистрибьюторы КАК Дистрибьюторы
				|ГДЕ
				|	Дистрибьюторы.Код = &КодДистрибьютора";
				Запрос.УстановитьПараметр("КодДистрибьютора", КодДистрибьютора);
				Результат = Запрос.Выполнить().Выбрать();
				Пока Результат.Следующий() Цикл 
					ТекДистрибьютор = Результат.Ссылка;
				КонецЦикла;
				
				Если Не ЗначениеЗаполнено(ТекДистрибьютор) Тогда 
					ОписаниеОшибки = "Не найден дистрибьютор с кодом '"+КодДистрибьютора+"'. Строка № "+строка(Стр.НомерСтроки)+" в файле";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
					
					Параметры = Новый Структура;
					Параметры.Вставить("ТипОшибки", Перечисления.ТипыОшибок.НеНайденДистрибьютор);
					Параметры.Вставить("Дата", ТекущаяДата());
					Параметры.Вставить("ИмяФайла", ПутьКфайлу);
					Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
					Параметры.Вставить("НомерСтрокиВФайле", Стр.НомерСтроки);
					
					СделатьЗаписьВСправочникСообщенияПриЗагрузкеФайловОтДистрибьютора(Параметры);
					Возврат;
				КонецЕсли;
				
				//найдем номенклатуру
				Запрос.Текст =  "ВЫБРАТЬ
				|	Номенклатура.Ссылка
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|ГДЕ
				|	Номенклатура.Код = &Артикул";
				Запрос.УстановитьПараметр("Артикул", АртикулСыробогатов);				
				Результат = Запрос.Выполнить().Выбрать();
				Пока Результат.Следующий() Цикл 
					ТекНоменклатура = Результат.Ссылка;
				КонецЦикла;
				
				Если Не ЗначениеЗаполнено(ТекНоменклатура) Тогда 
					ОписаниеОшибки = "Не найдена номенклатура '" + Номенклатура + "' с артикулом "+" ("+АртикулСыробогатов+"). Строка № "+строка(Стр.НомерСтроки)+" в файле";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
					
					Параметры = Новый Структура;
					Параметры.Вставить("ТипОшибки", Перечисления.ТипыОшибок.НеНайденаНоменклатура);
					Параметры.Вставить("Дата", ТекущаяДата());
					Параметры.Вставить("ИмяФайла", ПутьКфайлу);
					Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
					Параметры.Вставить("НомерСтрокиВФайле", Стр.НомерСтроки);
					Параметры.Вставить("Дистрибьютор", ТекДистрибьютор);
					СделатьЗаписьВСправочникСообщенияПриЗагрузкеФайловОтДистрибьютора(Параметры);
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекНоменклатура.ОсновнаяНоменклатура) Тогда 
					ТекНоменклатура = ТекНоменклатура.ОсновнаяНоменклатура;
				КонецЕсли;
				
				//найдем единицу измерения
				Запрос.Текст =  "ВЫБРАТЬ
				|	ЕдиницыИзмерений.Ссылка
				|ИЗ
				|	Справочник.ЕдиницыИзмерений КАК ЕдиницыИзмерений
				|ГДЕ
				|	ЕдиницыИзмерений.Наименование = &Наименование";
				Запрос.УстановитьПараметр("Наименование", ЕдИзмерения);				
				Результат = Запрос.Выполнить().Выбрать();
				Пока Результат.Следующий() Цикл 
					ТекЕдИзмерения = Результат.Ссылка;
				КонецЦикла;
				
				Если Не ЗначениеЗаполнено(ТекЕдИзмерения) Тогда 
					ОписаниеОшибки = "Не найдена единица измерения '"+ЕдИзмерения+"'. Строка № "+строка(Стр.НомерСтроки)+" в файле";;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
					
					Параметры = Новый Структура;
					Параметры.Вставить("ТипОшибки", Перечисления.ТипыОшибок.НеНайденаЕдиницаИзмерения);
					Параметры.Вставить("Дата", ТекущаяДата());
					Параметры.Вставить("ИмяФайла", ПутьКфайлу);
					Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
					Параметры.Вставить("НомерСтрокиВФайле", Стр.НомерСтроки);
					Параметры.Вставить("Дистрибьютор", ТекДистрибьютор);
					СделатьЗаписьВСправочникСообщенияПриЗагрузкеФайловОтДистрибьютора(Параметры);
					//Продолжить;
				ИначеЕсли ТекЕдИзмерения <> ТекНоменклатура.ЕдиницаИзмерения Тогда 
					ОписаниеОшибки = "Единица измерения в файле '"+ЕдИзмерения+"' не совпадает с единицей измерения номенклатуры. Строка № "+Строка(Стр.НомерСтроки)+" в файле";
					
					Параметры = Новый Структура;
					Параметры.Вставить("ТипОшибки", Перечисления.ТипыОшибок.Другое);
					Параметры.Вставить("Дата", ТекущаяДата());
					Параметры.Вставить("ИмяФайла", ПутьКфайлу);
					Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
					Параметры.Вставить("НомерСтрокиВФайле", Стр.НомерСтроки);
					Параметры.Вставить("Дистрибьютор", ТекДистрибьютор);
					СделатьЗаписьВСправочникСообщенияПриЗагрузкеФайловОтДистрибьютора(Параметры);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
				КонецЕсли;
				
				Стр = ТЗДляЗагрузкиТЧ.Добавить();
				Стр.Номенклатура = ТекНоменклатура;
				Стр.Количество = Количество;
				Стр.Сумма = Сумма;
				Стр.Вес = Вес;
				Стр.ЕдиницаИзмерения = ТекЕдИзмерения;
				Стр.Дата = Дата;
				
			КонецЕсли;
		КонецЦикла;
		
		Если УдалитьДокументыЗаПериод Тогда 
			УдалитьДокументыЗаПериод(ТекДистрибьютор, "Инвентаризация", , ДатаНачалаУдаления, ДатаКонцаУдаления);
		КонецЕсли;
		
		ТекДата = "";
		ТоварыДобавлены = Ложь;
		Для Каждого СтрокаТаблицы Из ТЗДляЗагрузкиТЧ Цикл 
			Если НЕ ЗначениеЗаполнено(ТекДата) Тогда 
				ТекДата = СтрокаТаблицы.Дата;
				ТекДок = Документы.Инвентаризация.СоздатьДокумент();
				ТекДок.Дата = КонецДня(ТекДата);
				ТекДок.Дистрибьютор = ТекДистрибьютор;
			КонецЕсли;	
			
			Если ТекДата <>  СтрокаТаблицы.Дата Тогда 
				Если НЕ ДатыЗапретаИзменения.ИзменениеЗапрещено(ТекДок) Тогда
					ТекДок.Записать(РежимЗаписиДокумента.Запись);
					Попытка
						ТекДок.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
					КонецПопытки;
				КонецЕсли;
				
				ТекДата = СтрокаТаблицы.Дата;
				
				ТекДок = Документы.Инвентаризация.СоздатьДокумент();
				ТекДок.Дата = КонецДня(ТекДата);
				ТекДок.Дистрибьютор = ТекДистрибьютор;
			КонецЕсли;
			НоваяСтрокаТовары = ТекДок.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары,СтрокаТаблицы);
			
			ТоварыДобавлены = Истина;
		КонецЦикла;
	Иначе 
		ТЗДляЗагрузкиТЧ.Колонки.Добавить("ТорговыйПредставитель", Новый ОписаниеТипов("СправочникСсылка.ТорговыеПредставители"));
		ТЗДляЗагрузкиТЧ.Колонки.Добавить("ФорматМагазина", Новый ОписаниеТипов("СправочникСсылка.ФорматыМагазинов"));
		ТЗДляЗагрузкиТЧ.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ТЗДляЗагрузкиТЧ.Колонки.Добавить("ТТ", Новый ОписаниеТипов("СправочникСсылка.ТТ"));
		ТЗДляЗагрузкиТЧ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТЗДляЗагрузкиТЧ.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
		ТЗДляЗагрузкиТЧ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		ТЗДляЗагрузкиТЧ.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
		ТЗДляЗагрузкиТЧ.Колонки.Добавить("Вес", Новый ОписаниеТипов("Число"));
		ТЗДляЗагрузкиТЧ.Колонки.Добавить("НомерНакладной", Новый ОписаниеТипов("Строка"));
		ТЗДляЗагрузкиТЧ.Колонки.Добавить("ДатаНакладной", Новый ОписаниеТипов("Дата"));
		ТЗДляЗагрузкиТЧ.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерений"));
		
		Для Каждого стр Из ТЗ Цикл 
			ТекНоменклатура = "";
			ТекЕдИзмерения = "";
			ТекКонтрагент = "";
			ТекТТ = "";
			
			Если стр.НомерСтроки < 4 Тогда  //в первой строке содержатся данные с наименованием колонок
				СтрокаСНаименованиемКолонок = стр;
			Иначе 
				КодДистрибьютора = СтрЗаменить(стр[2],Символы.НПП,"");
				Если КодДистрибьютора = "" Тогда 
					Прервать;
				КонецЕсли;
				
				Пока СтрДлина(КодДистрибьютора) < 6 Цикл 
					КодДистрибьютора = "0" + КодДистрибьютора;
				КонецЦикла;
				
				ТорговыйПредставитель = Строка(стр[3]);
				ТорговыйПредставительКод = КодДистрибьютора + СтрЗаменить(Строка(стр[4]),Символы.НПП,"");
				ФорматМагазина = ТРег(Строка(стр[5]));
				КаналСбыта = Трег(Строка(стр[6]));
				Сеть = ТРег(Строка(стр[7]));
				Контрагент = ТРег(Строка(стр[8]));
				КонтрагентИНН = СтрЗаменить(Строка(стр[9]),Символы.НПП,"");
				КонтрагентКПП = СтрЗаменить(Строка(стр[10]),Символы.НПП,"");
				КонтрагентРегион = Строка(стр[11]);
				КонтрагентОкруг  = Строка(стр[12]);
				КонтрагентРайон = Строка(стр[13]);
				КонтрагентГород = Строка(стр[14]);	
				КонтрагентНасПункт = Строка(стр[15]);
				КонтрагентУлица = Строка(стр[16]);
				КонтрагентДом = Строка(стр[17]);
				КонтрагентКорпус = Строка(стр[18]);
				КонтрагентКвартира = Строка(стр[19]);
				ТТ = СокрЛП(Трег(Строка(стр[20])));	
				ТТРегион = Строка(стр[21]);
				ТТОкруг = Строка(стр[22]);
				ТТРайон = Строка(стр[23]);	
				ТТГород = Строка(стр[24]);	
				ТТНасПункт = Строка(стр[25]);
				ТТУлица = Строка(стр[26]);
				ТТДом = Строка(стр[27]);	
				ТТКорпус = Строка(стр[28]);	
				ТТКвартира = Строка(стр[29]);
				Номенклатура = Строка(стр[30]); 
				АртикулСыробогатов = СтрЗаменить(Строка(стр[31]),Символы.НПП,"");
				НомерНакладной = СтрЗаменить(Строка(стр[32]),Символы.НПП,"");
				ДатаНакладной = стр[33];
				Если ТипЗнч(ДатаНакладной) = Тип("Строка") Тогда 
					Если СтрДлина(ДатаНакладной) = 0 Тогда 
						ОписаниеОшибки = "Не указана дата накладной. Строка № "+строка(Стр.НомерСтроки)+" в файле";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
						
						Параметры = Новый Структура;
						Параметры.Вставить("ТипОшибки", Перечисления.ТипыОшибок.Другое);
						Параметры.Вставить("Дата", ТекущаяДата());
						Параметры.Вставить("ИмяФайла", ПутьКфайлу);
						Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
						Параметры.Вставить("НомерСтрокиВФайле", Стр.НомерСтроки);
						Параметры.Вставить("Дистрибьютор", ТекДистрибьютор);
						СделатьЗаписьВСправочникСообщенияПриЗагрузкеФайловОтДистрибьютора(Параметры);
						
						Возврат;	
					КонецЕсли;
					
					Если СтрДлина(ДатаНакладной) = 8 Тогда 
						ДатаНакладной = Лев(ДатаНакладной,6)+"20"+Сред(ДатаНакладной,7,2);
					КонецЕсли;
					
					Попытка
						ДатаНакладной = Дата(ДатаНакладной+ " 00:00:00");
					Исключение
						
						ОписаниеОшибки = "Не удалось получить дату накладной. Строка № "+строка(Стр.НомерСтроки)+" в файле";
						
						Параметры = Новый Структура;
						Параметры.Вставить("ТипОшибки", Перечисления.ТипыОшибок.Другое);
						Параметры.Вставить("Дата", ТекущаяДата());
						Параметры.Вставить("ИмяФайла", ПутьКфайлу);
						Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
						Параметры.Вставить("НомерСтрокиВФайле", Стр.НомерСтроки);
						Параметры.Вставить("Дистрибьютор", ТекДистрибьютор);
						СделатьЗаписьВСправочникСообщенияПриЗагрузкеФайловОтДистрибьютора(Параметры);
						Возврат;
					КонецПопытки;
				КонецЕсли;
				Количество = ?(стр[34] = Неопределено,0, Число(СтрЗаменить(стр[34],"'","")));
				ЕдИзмерения = Нрег(Строка(стр[35]));
				Если ЕдИзмерения = "шт" Тогда 
					ЕдИзмерения = "шт."
				КонецЕсли;
				Вес = ?(стр[36] = Неопределено,0, Число(СтрЗаменить(стр[36],"'","")));
				Сумма = ?(стр[37] = Неопределено,0, Число(СтрЗаменить(стр[37],"'","")));
				
				ОписаниеОшибки = "";
				
				//найдем дистрибьютора
				ТекДистрибьютор = "";
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	Дистрибьюторы.Ссылка
				|ИЗ
				|	Справочник.Дистрибьюторы КАК Дистрибьюторы
				|ГДЕ
				|	Дистрибьюторы.Код = &КодДистрибьютора";
				Запрос.УстановитьПараметр("КодДистрибьютора", КодДистрибьютора);
				Результат = Запрос.Выполнить().Выбрать();
				Пока Результат.Следующий() Цикл 
					ТекДистрибьютор = Результат.Ссылка;
				КонецЦикла;
				
				Если Не ЗначениеЗаполнено(ТекДистрибьютор) Тогда 
					ОписаниеОшибки = "Не найден дистрибьютор с кодом '"+КодДистрибьютора+"'. Строка № "+строка(Стр.НомерСтроки)+" в файле";
					
					Параметры = Новый Структура;
					Параметры.Вставить("ТипОшибки", Перечисления.ТипыОшибок.НеНайденДистрибьютор);
					Параметры.Вставить("Дата", ТекущаяДата());
					Параметры.Вставить("ИмяФайла", ПутьКфайлу);
					Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
					Параметры.Вставить("НомерСтрокиВФайле", Стр.НомерСтроки);
					
					СделатьЗаписьВСправочникСообщенияПриЗагрузкеФайловОтДистрибьютора(Параметры);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
					Возврат;
				КонецЕсли;
				
				ТекСеть = Справочники.Сети.ПустаяСсылка();
				
				Если ЗначениеЗаполнено(Сеть) Тогда 
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					|	Сети.Ссылка
					|ИЗ
					|	Справочник.Сети КАК Сети
					|ГДЕ
					|	Сети.Наименование = &Сеть";
					Запрос.УстановитьПараметр("Сеть", Сеть);
					Результат = Запрос.Выполнить().Выбрать();
					Пока Результат.Следующий() Цикл 
						ТекСеть = Результат.Ссылка;
					КонецЦикла;
					Если Не ЗначениеЗаполнено(ТекСеть) Тогда 
						Если Не СоздаватьОбъектыПриЗагрузке Тогда 
							ОписаниеОшибки = "Не найдена Сеть '"+Сеть+"'. Строка № "+строка(Стр.НомерСтроки)+" в файле";
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
							
							Параметры = Новый Структура;
							Параметры.Вставить("ТипОшибки", Перечисления.ТипыОшибок.Другое);
							Параметры.Вставить("Дата", ТекущаяДата());
							Параметры.Вставить("ИмяФайла", ПутьКфайлу);
							Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
							Параметры.Вставить("НомерСтрокиВФайле", Стр.НомерСтроки);
							Параметры.Вставить("Дистрибьютор", ТекДистрибьютор);
							СделатьЗаписьВСправочникСообщенияПриЗагрузкеФайловОтДистрибьютора(Параметры);
							
							//	Продолжить;
						Иначе //создадим сеть
							ТекСеть = Справочники.Сети.СоздатьЭлемент();
							ТекСеть.Наименование = Сеть;
							ТекСеть.Записать();
							ТекСеть = ТекСеть.Ссылка;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ТекТорговыйПредставитель = "";
				Если ЗначениеЗаполнено(ТорговыйПредставительКод) Тогда 
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					|	ТорговыеПредставители.Ссылка,
					|	ТорговыеПредставители.Код
					|ИЗ
					|	Справочник.ТорговыеПредставители КАК ТорговыеПредставители
					|ГДЕ
					|	ТорговыеПредставители.Код = &Код
					|	И ТорговыеПредставители.Владелец = &Владелец";
					Запрос.УстановитьПараметр("Код", ТорговыйПредставительКод);
					Запрос.УстановитьПараметр("Владелец", ТекДистрибьютор);	
					
					Результат = Запрос.Выполнить().Выбрать();
					Пока Результат.Следующий() Цикл 
						ТекТорговыйПредставитель = Результат.Ссылка;
					КонецЦикла;
					Если Не ЗначениеЗаполнено(ТекТорговыйПредставитель) Тогда 
						Если Не СоздаватьОбъектыПриЗагрузке Тогда 
							ОписаниеОшибки = "Не найден ТП '"+ТорговыйПредставитель+"' (Код "+ТорговыйПредставительКод+"). Строка № "+строка(Стр.НомерСтроки)+" в файле";
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
							
							Параметры = Новый Структура;
							Параметры.Вставить("ТипОшибки", Перечисления.ТипыОшибок.Другое);
							Параметры.Вставить("Дата", ТекущаяДата());
							Параметры.Вставить("ИмяФайла", ПутьКфайлу);
							Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
							Параметры.Вставить("НомерСтрокиВФайле", Стр.НомерСтроки);
							Параметры.Вставить("Дистрибьютор", ТекДистрибьютор);
							СделатьЗаписьВСправочникСообщенияПриЗагрузкеФайловОтДистрибьютора(Параметры);
							
							//Продолжить;
						Иначе //создадим ТП
							ТекТорговыйПредставитель = Справочники.ТорговыеПредставители.СоздатьЭлемент();
							ТекТорговыйПредставитель.Наименование = ТорговыйПредставитель;
							ТекТорговыйПредставитель.Код = ТорговыйПредставительКод;
							ТекТорговыйПредставитель.Владелец = ТекДистрибьютор;
							ТекТорговыйПредставитель.Записать();
							ТекТорговыйПредставитель = ТекТорговыйПредставитель.Ссылка;
						КонецЕсли;
					Иначе 
						Если СоздаватьОбъектыПриЗагрузке И ТорговыйПредставитель <> ТекТорговыйПредставитель.Наименование Тогда 
							ТекТорговыйПредставитель = ТекТорговыйПредставитель.ПолучитьОбъект();
							ТекТорговыйПредставитель.Наименование = ТорговыйПредставитель;
							ТекТорговыйПредставитель.Записать();
							ТекТорговыйПредставитель = ТекТорговыйПредставитель.Ссылка;
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;
				
				ТекКонтрагент = "";
				
				Запрос.Текст =  "ВЫБРАТЬ
				|	Контрагенты.Ссылка
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ 1 = 1";
				
				ИщемПоИНН = Ложь;
				Если СтрДлина(КонтрагентИНН) = 10 Или СтрДлина(КонтрагентИНН) = 12 Тогда 
					ИщемПоИНН = Истина
				КонецЕсли;
				
				ИщемПоКПП = Ложь;
				Если СтрДлина(КонтрагентКПП) = 10 Или СтрДлина(КонтрагентКПП) = 12 Тогда 
					ИщемПоКПП = Истина
				КонецЕсли;
				
				Если ИщемПоИНН Тогда //найдем контрагента (по ИНН и КПП)
					Запрос.Текст = Запрос.Текст + "
					|	И Контрагенты.ИНН = &ИНН";
					Если ИщемПоКПП Тогда 
						Запрос.Текст = Запрос.Текст + "
						|	И Контрагенты.КПП = &КПП";
					КонецЕсли;
				Иначе   // ищем по наименованию
					Запрос.Текст = Запрос.Текст + "
					|	И Контрагенты.Наименование = &Наименование";
				КонецЕсли;
				
				Запрос.Текст = Запрос.Текст + "
				|	И Контрагенты.Владелец = &Владелец";
				
				Запрос.УстановитьПараметр("ИНН", КонтрагентИНН);				
				Запрос.УстановитьПараметр("КПП", КонтрагентКПП);	
				Запрос.УстановитьПараметр("Наименование", Контрагент);	
				Запрос.УстановитьПараметр("Владелец", ТекДистрибьютор);	
				Результат = Запрос.Выполнить().Выбрать();
				Пока Результат.Следующий() Цикл 
					ТекКонтрагент = Результат.Ссылка;
				КонецЦикла;
				
				Если Не ЗначениеЗаполнено(ТекКонтрагент) Тогда 
					Если Не СоздаватьОбъектыПриЗагрузке Тогда 
						ОписаниеОшибки = "Не найден Контрагент '" + Контрагент + "' с ИНН/КПП '"+КонтрагентИНН+?(ЗначениеЗаполнено(КонтрагентКПП),"/"+КонтрагентКПП,"")+"'. Строка № "+строка(Стр.НомерСтроки)+" в файле";;
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
						
						Параметры = Новый Структура;
						Параметры.Вставить("ТипОшибки", Перечисления.ТипыОшибок.Другое);
						Параметры.Вставить("Дата", ТекущаяДата());
						Параметры.Вставить("ИмяФайла", ПутьКфайлу);
						Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
						Параметры.Вставить("НомерСтрокиВФайле", Стр.НомерСтроки);
						Параметры.Вставить("Дистрибьютор", ТекДистрибьютор);
						СделатьЗаписьВСправочникСообщенияПриЗагрузкеФайловОтДистрибьютора(Параметры);
						
						//	Продолжить;
					Иначе //создадим контрагента
						
						Если НЕ ЗначениеЗаполнено(КаналСбыта) Тогда 
							ТекКаналСбыта = Справочники.КаналыСбыта.ПустаяСсылка();
						Иначе 
							ТекКаналСбыта = Справочники.КаналыСбыта.НайтиПоНаименованию(КаналСбыта);
							
							
							Если Не ЗначениеЗаполнено(ТекКаналСбыта) Тогда 
								ОписаниеОшибки = "Не (верно) указан канал сбыта '"+КаналСбыта+"'. Строка № "+строка(Стр.НомерСтроки)+" в файле";
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
								
								Параметры = Новый Структура;
								Параметры.Вставить("ТипОшибки", Перечисления.ТипыОшибок.Другое);
								Параметры.Вставить("Дата", ТекущаяДата());
								Параметры.Вставить("ИмяФайла", ПутьКфайлу);
								Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
								Параметры.Вставить("НомерСтрокиВФайле", Стр.НомерСтроки);
								
								СделатьЗаписьВСправочникСообщенияПриЗагрузкеФайловОтДистрибьютора(Параметры);
							КонецЕсли;
						КонецЕсли;
						Если СтрДлина(КонтрагентИНН) <> 12 И СтрДлина(КонтрагентИНН) <> 10 И СтрДлина(КонтрагентИНН) <> 0  Тогда 
							Параметры = Новый Структура;
							Параметры.Вставить("ТипОшибки", Перечисления.ТипыОшибок.Другое);
							Параметры.Вставить("Дата", ТекущаяДата());
							Параметры.Вставить("ИмяФайла", ПутьКфайлу);
							Параметры.Вставить("ОписаниеОшибки", "Не верная длина ИНН или КПП");
							Параметры.Вставить("НомерСтрокиВФайле", Стр.НомерСтроки);
							Параметры.Вставить("Дистрибьютор", ТекДистрибьютор);
							СделатьЗаписьВСправочникСообщенияПриЗагрузкеФайловОтДистрибьютора(Параметры);
							//Продолжить;						
						КонецЕсли;
						
						ТекКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
						ТекКонтрагент.Владелец = ТекДистрибьютор;
						ТекКонтрагент.Наименование = Контрагент;
						ТекКонтрагент.Сеть = ТекСеть;
						ТекКонтрагент.КаналСбыта = ТекКаналСбыта;
						ТекКонтрагент.ИНН = ?(ИщемПоИНН,КонтрагентИНН,"");
						ТекКонтрагент.КПП = ?(ИщемПоКПП,КонтрагентКПП,"");
						ТекКонтрагент.Записать();
						
						//добавить запись адресной информации
						
						Представление = КонтрагентРегион+","+КонтрагентОкруг+","+КонтрагентРайон+","+КонтрагентГород
						+","+КонтрагентНасПункт+","+КонтрагентУлица+","+КонтрагентДом+","+КонтрагентКорпус +","+КонтрагентКвартира;
						
						Пока Лев(Представление, 1) = "," Цикл Представление = Сред(Представление, 2); КонецЦикла;
						//Парсим строку и удаляем пустые значения.
						МногострочныйТекст = СтрЗаменить(Представление, ",", Символы.ПС);
						Представление = "";
						Для А = 1 По СтрЧислоСтрок(МногострочныйТекст) Цикл 
							Подстрока = СокрЛП(СтрПолучитьСтроку(МногострочныйТекст, А));
							Если ЗначениеЗаполнено(Подстрока) Тогда Представление = Представление + Подстрока + ", "; КонецЕсли;
						КонецЦикла; //Для А = 1 По
						//Обрезаем лишнее
						Представление = Лев(Представление, СтрДлина(Представление) - 2);
						ВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента; //для другого справочника подставить соответствующее значение
						
						ПредставлениеСтруктурой = Новый СписокЗначений;
						ПредставлениеСтруктурой.Добавить("РОССИЯ","Страна");
						ПредставлениеСтруктурой.Добавить(КонтрагентРегион,"РЕГИОН");
						ПредставлениеСтруктурой.Добавить(КонтрагентОкруг,"РАЙОН");
						ПредставлениеСтруктурой.Добавить(КонтрагентГород,"ГОРОД");
						ПредставлениеСтруктурой.Добавить(КонтрагентНасПункт,"НАСЕЛЕННЫЙПУНКТ");
						ПредставлениеСтруктурой.Добавить(КонтрагентУлица,"УЛИЦА");
						ПредставлениеСтруктурой.Добавить(КонтрагентДом,"ДОМ");
						ПредставлениеСтруктурой.Добавить(КонтрагентКорпус,"КОРПУС");
						ПредставлениеСтруктурой.Добавить(КонтрагентКвартира,"КВАРТИРА");
						ПредставлениеСтруктурой.Добавить(Представление,"ПРЕДСТАВЛЕНИЕ");
						
						УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ТекКонтрагент, 
						ПредставлениеСтруктурой,
						ВидКИ, Перечисления.ТипыКонтактнойИнформации.Адрес);
						
						ТекКонтрагент.Записать();
					КонецЕсли;
				Иначе
					ЕстьИзменения = Ложь;
					ТекКонтрагентОбъект = ТекКонтрагент.Ссылка.ПолучитьОбъект();				
					Если ТекКонтрагент.Сеть <> ТекСеть Тогда 
						ТекКонтрагентОбъект.Сеть = ТекСеть;
						ЕстьИзменения = Истина;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(КаналСбыта) Тогда 
						ТекКаналСбыта = Справочники.КаналыСбыта.ПустаяСсылка();
					Иначе 
						ТекКаналСбыта = Справочники.КаналыСбыта.НайтиПоНаименованию(КаналСбыта);
						Если Не ЗначениеЗаполнено(ТекКаналСбыта) Тогда 
							ОписаниеОшибки = "Не (верно) указан канал сбыта '"+КаналСбыта+"'. Строка № "+строка(Стр.НомерСтроки)+" в файле";
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
							
							Параметры = Новый Структура;
							Параметры.Вставить("ТипОшибки", Перечисления.ТипыОшибок.Другое);
							Параметры.Вставить("Дата", ТекущаяДата());
							Параметры.Вставить("ИмяФайла", ПутьКфайлу);
							Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
							Параметры.Вставить("НомерСтрокиВФайле", Стр.НомерСтроки);
							
							СделатьЗаписьВСправочникСообщенияПриЗагрузкеФайловОтДистрибьютора(Параметры);
							ТекКаналСбыта = Справочники.КаналыСбыта.ПустаяСсылка();
						КонецЕсли;
					КонецЕсли;
					
					Если ТекКонтрагент.КаналСбыта <> ТекКаналСбыта Тогда 
						ТекКонтрагентОбъект.КаналСбыта = ТекКаналСбыта;
						ЕстьИзменения = Истина;
					КонецЕсли;
					
					Если ЕстьИзменения Тогда 
						ТекКонтрагентОбъект.Записать();
					КонецЕсли;
				КонецЕсли;
				
				ТекТТ = "";
				

				
				//		Если ТТ <> "" Тогда 
				//найдем ТТ по наименованию + представление
				//получим представление адреса
				Представление = ТТРегион+","+ТТОкруг+","+ТТРайон+","+ТТГород
				+","+ТТНасПункт+","+ТТУлица+","+ТТДом+","+ТТКорпус +","+ТТКвартира;
				
				Пока Лев(Представление, 1) = "," Цикл Представление = Сред(Представление, 2); КонецЦикла;
				//Парсим строку и удаляем пустые значения.
				МногострочныйТекст = СтрЗаменить(Представление, ",", Символы.ПС);
				Представление = "";
				Для А = 1 По СтрЧислоСтрок(МногострочныйТекст) Цикл 
					Подстрока = СокрЛП(СтрПолучитьСтроку(МногострочныйТекст, А));
					Если ЗначениеЗаполнено(Подстрока) Тогда Представление = Представление + Подстрока + ", "; КонецЕсли;
				КонецЦикла; //Для А = 1 По
				//Обрезаем лишнее
				Представление = Лев(Представление, СтрДлина(Представление) - 2);
				
				Если Не ЗначениеЗаполнено(Представление) Тогда 
					ОписаниеОшибки = "Не указан адрес ТТ '" + ТТ + "). Строка № "+строка(Стр.НомерСтроки)+" в файле";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
					Параметры = Новый Структура;
					Параметры.Вставить("ТипОшибки", Перечисления.ТипыОшибок.Другое);
					Параметры.Вставить("Дата", ТекущаяДата());
					Параметры.Вставить("ИмяФайла", ПутьКфайлу);
					Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
					Параметры.Вставить("НомерСтрокиВФайле", Стр.НомерСтроки);
					Параметры.Вставить("Дистрибьютор", ТекДистрибьютор);
					СделатьЗаписьВСправочникСообщенияПриЗагрузкеФайловОтДистрибьютора(Параметры);
					Продолжить;
				КонецЕсли;
				
				Запрос.Текст =  "ВЫБРАТЬ
				|	ТТКонтактнаяИнформация.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ТТ.КонтактнаяИнформация КАК ТТКонтактнаяИнформация
				|ГДЕ
				|	ТТКонтактнаяИнформация.Ссылка.Наименование + ТТКонтактнаяИнформация.Представление = &НаименованиеИАдрес
				|	И ТТКонтактнаяИнформация.Ссылка.Владелец = &Владелец";
				
				Запрос.УстановитьПараметр("НаименованиеИАдрес", ТТ+Представление);				
				Запрос.УстановитьПараметр("Владелец", ТекКонтрагент.Ссылка);	
				Результат = Запрос.Выполнить().Выбрать();
				Пока Результат.Следующий() Цикл 
					ТекТТ = Результат.Ссылка;
				КонецЦикла;
				
				Если Не ЗначениеЗаполнено(ТекТТ) Тогда 
					Если Не СоздаватьОбъектыПриЗагрузке Тогда 
						ОписаниеОшибки = "Не найдена ТТ '"+ТТ+"'. Строка № "+строка(Стр.НомерСтроки)+" в файле";;
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
						
						Параметры = Новый Структура;
						Параметры.Вставить("ТипОшибки", Перечисления.ТипыОшибок.Другое);
						Параметры.Вставить("Дата", ТекущаяДата());
						Параметры.Вставить("ИмяФайла", ПутьКфайлу);
						Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
						Параметры.Вставить("НомерСтрокиВФайле", Стр.НомерСтроки);
						Параметры.Вставить("Дистрибьютор", ТекДистрибьютор);
						СделатьЗаписьВСправочникСообщенияПриЗагрузкеФайловОтДистрибьютора(Параметры);
						
						//Продолжить;
					Иначе //создадим ТТ
						ТекТТ = Справочники.ТТ.СоздатьЭлемент();
						ТекТТ.Владелец = ТекКонтрагент.Ссылка;
						ТекТТ.Наименование = ТТ;
						
						Если ЗначениеЗаполнено(ФорматМагазина) Тогда 
							ТекФорматМагазина = Справочники.ФорматыМагазинов.НайтиПоНаименованию(ФорматМагазина);
							Если ТекФорматМагазина <> Неопределено Тогда 
								ТекТТ.ФорматМагазина = ТекФорматМагазина;
							КонецЕсли;
						КонецЕсли;
						
						ТекТТ.Записать();

						ВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресТТ; //для другого справочника подставить соответствующее значение
						
						ПредставлениеСтруктурой = Новый СписокЗначений;
						ПредставлениеСтруктурой.Добавить("РОССИЯ","Страна");
						ПредставлениеСтруктурой.Добавить(ТТРегион,"РЕГИОН");
						ПредставлениеСтруктурой.Добавить(ТТОкруг,"РАЙОН");
						ПредставлениеСтруктурой.Добавить(ТТГород,"ГОРОД");
						ПредставлениеСтруктурой.Добавить(ТТНасПункт,"НАСЕЛЕННЫЙПУНКТ");
						ПредставлениеСтруктурой.Добавить(ТТУлица,"УЛИЦА");
						ПредставлениеСтруктурой.Добавить(ТТДом,"ДОМ");
						ПредставлениеСтруктурой.Добавить(ТТКорпус,"КОРПУС");
						ПредставлениеСтруктурой.Добавить(ТТКвартира,"КВАРТИРА");
						ПредставлениеСтруктурой.Добавить(Представление,"ПРЕДСТАВЛЕНИЕ");
						
						УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ТекТТ, 
						ПредставлениеСтруктурой,
						ВидКИ, Перечисления.ТипыКонтактнойИнформации.Адрес);
						
						ТекТТ.Записать();
					КонецЕсли;
				КонецЕсли;
				//Иначе 
				//	ТекТТ = Справочники.ТТ.ПустаяСсылка();
				//КонецЕсли;
								
				//найдем номенклатуру
				Запрос.Текст =  "ВЫБРАТЬ
				|	Номенклатура.Ссылка
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|ГДЕ
				|	Номенклатура.Код = &Артикул";
				Запрос.УстановитьПараметр("Артикул", АртикулСыробогатов);				
				Результат = Запрос.Выполнить().Выбрать();
				Пока Результат.Следующий() Цикл 
					ТекНоменклатура = Результат.Ссылка;
				КонецЦикла;
				
				Если Не ЗначениеЗаполнено(ТекНоменклатура) Тогда 
					ОписаниеОшибки = "Не найдена номенклатура '" + Номенклатура + "' с артикулом "+" ("+АртикулСыробогатов+"). Строка № "+строка(Стр.НомерСтроки)+" в файле";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
					Параметры = Новый Структура;
					Параметры.Вставить("ТипОшибки", Перечисления.ТипыОшибок.НеНайденаНоменклатура);
					Параметры.Вставить("Дата", ТекущаяДата());
					Параметры.Вставить("ИмяФайла", ПутьКфайлу);
					Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
					Параметры.Вставить("НомерСтрокиВФайле", Стр.НомерСтроки);
					Параметры.Вставить("Дистрибьютор", ТекДистрибьютор);
					СделатьЗаписьВСправочникСообщенияПриЗагрузкеФайловОтДистрибьютора(Параметры);
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекНоменклатура.ОсновнаяНоменклатура) Тогда 
					ТекНоменклатура = ТекНоменклатура.ОсновнаяНоменклатура;
				КонецЕсли;
				
				//найдем единицу измерения
				Запрос.Текст =  "ВЫБРАТЬ
				|	ЕдиницыИзмерений.Ссылка
				|ИЗ
				|	Справочник.ЕдиницыИзмерений КАК ЕдиницыИзмерений
				|ГДЕ
				|	ЕдиницыИзмерений.Наименование = &Наименование";
				Запрос.УстановитьПараметр("Наименование", ЕдИзмерения);				
				Результат = Запрос.Выполнить().Выбрать();
				Пока Результат.Следующий() Цикл 
					ТекЕдИзмерения = Результат.Ссылка;
				КонецЦикла;
				Если Не ЗначениеЗаполнено(ТекЕдИзмерения) Тогда 
					ОписаниеОшибки = "Не найдена единица измерения '"+ЕдИзмерения+"'. Строка № "+строка(Стр.НомерСтроки)+" в файле";;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
					
					Параметры = Новый Структура;
					Параметры.Вставить("ТипОшибки", Перечисления.ТипыОшибок.НеНайденаЕдиницаИзмерения);
					Параметры.Вставить("Дата", ТекущаяДата());
					Параметры.Вставить("ИмяФайла", ПутьКфайлу);
					Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
					Параметры.Вставить("НомерСтрокиВФайле", Стр.НомерСтроки);
					Параметры.Вставить("Дистрибьютор", ТекДистрибьютор);
					СделатьЗаписьВСправочникСообщенияПриЗагрузкеФайловОтДистрибьютора(Параметры);
					
					//Продолжить;
					
				ИначеЕсли ТекЕдИзмерения <> ТекНоменклатура.ЕдиницаИзмерения Тогда 
					ОписаниеОшибки = "Единица измерения в файле '"+ЕдИзмерения+"' не совпадает с единицей измерения номенклатуры. Строка № "+Строка(Стр.НомерСтроки)+" в файле";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
					
					Параметры = Новый Структура;
					Параметры.Вставить("ТипОшибки", Перечисления.ТипыОшибок.Другое);
					Параметры.Вставить("Дата", ТекущаяДата());
					Параметры.Вставить("ИмяФайла", ПутьКфайлу);
					Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
					Параметры.Вставить("НомерСтрокиВФайле", Стр.НомерСтроки);
					Параметры.Вставить("Дистрибьютор", ТекДистрибьютор);
					СделатьЗаписьВСправочникСообщенияПриЗагрузкеФайловОтДистрибьютора(Параметры);
				КонецЕсли;
				
				
				Стр = ТЗДляЗагрузкиТЧ.Добавить();
				Стр.ТорговыйПредставитель = ТекТорговыйПредставитель;
				Стр.Контрагент = ТекКонтрагент.Ссылка;
				Стр.ТТ = ТекТТ.Ссылка;
				Стр.Номенклатура = ТекНоменклатура;
				Стр.Цена = ?(Количество = 0, 0, (Сумма/Количество));
				Если ТипФайла = "Продажа" Тогда 
					Стр.Количество = Количество;
					Стр.Сумма = Сумма;
					Стр.Вес = Вес;
				ИначеЕсли ТипФайла = "Возврат" Тогда  
					Стр.Количество = -Количество;
					Стр.Сумма = -Сумма;
					Стр.Вес = -Вес;
				КонецЕсли;
				Стр.НомерНакладной = НомерНакладной;
				Стр.ДатаНакладной = ДатаНакладной;
				Стр.ЕдиницаИзмерения = ТекЕдИзмерения;
				
				ДатаНачалаУдаления = ?(ДатаНачалаУдаления > ДатаНакладной, ДатаНакладной, ДатаНачалаУдаления);
				ДатаКонцаУдаления = ?(ДатаКонцаУдаления < ДатаНакладной, ДатаНакладной, ДатаКонцаУдаления);
			КонецЕсли;
		КонецЦикла;
		
		ТЗДляЗагрузкиТЧ.Сортировать("ДатаНакладной");
		
		Если УдалитьДокументыЗаПериод Тогда 
			УдалитьДокументыЗаПериод(ТекДистрибьютор, "Реализация",  ?(ТипФайла = "Продажа", Перечисления.ТипыРеализаций.Продажа, Перечисления.ТипыРеализаций.Возврат), ДатаНачалаУдаления, ДатаКонцаУдаления);
		КонецЕсли;
		//
		ТекДата = "";
		ТоварыДобавлены = Ложь;
		Для Каждого СтрокаТаблицы Из ТЗДляЗагрузкиТЧ Цикл 
			Если НЕ ЗначениеЗаполнено(ТекДата) Тогда 
				ТекДата = СтрокаТаблицы.ДатаНакладной;
				ТекДок = Документы.Реализация.СоздатьДокумент();
				ТекДок.Дата = НачалоДня(ТекДата);
				ТекДок.Дистрибьютор = ТекДистрибьютор;
				ТекДок.ТипРеализации = ?(ТипФайла = "Продажа", Перечисления.ТипыРеализаций.Продажа, Перечисления.ТипыРеализаций.Возврат); 
			КонецЕсли;	
			
			Если ТекДата <>  СтрокаТаблицы.ДатаНакладной Тогда 
				Если НЕ ДатыЗапретаИзменения.ИзменениеЗапрещено(ТекДок) Тогда 
					ТекДок.Записать(РежимЗаписиДокумента.Запись);
					Попытка
						ТекДок.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
					КонецПопытки;
				КонецЕсли;
				
				ТекДата = СтрокаТаблицы.ДатаНакладной;
				
				ТекДок = Документы.Реализация.СоздатьДокумент();
				ТекДок.Дата = НачалоДня(ТекДата);
				ТекДок.Дистрибьютор = ТекДистрибьютор;
				ТекДок.ТипРеализации = ?(ТипФайла = "Продажа", Перечисления.ТипыРеализаций.Продажа, Перечисления.ТипыРеализаций.Возврат); 
			КонецЕсли;
			НоваяСтрокаТовары = ТекДок.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары,СтрокаТаблицы);
			
			ТоварыДобавлены = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ТоварыДобавлены Тогда
		Если НЕ ДатыЗапретаИзменения.ИзменениеЗапрещено(ТекДок) Тогда 
			ТекДок.Записать(РежимЗаписиДокумента.Запись);
			Попытка
				ТекДок.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
			КонецПопытки;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Загрузка завершена!");
	
КонецПроцедуры

Процедура УдалитьДокументыЗаПериод(ТекДистрибьютор, ТипДокумента, ТипФайла, ДатаНачалаУдаления, ДатаКонцаУдаления)
	Если ЗначениеЗаполнено(ТекДистрибьютор) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ
		|	РеализацияДистрибьютору.Ссылка
		|ИЗ
		|	Документ." + ТипДокумента + " КАК РеализацияДистрибьютору
		|ГДЕ
		|	РеализацияДистрибьютору.Дата МЕЖДУ &Дата1 И &Дата2";
		
		Если ЗначениеЗаполнено(ТипФайла) Тогда 
			Запрос.Текст = Запрос.Текст + " И РеализацияДистрибьютору.ТипРеализации = &ТипРеализации";
			Запрос.УстановитьПараметр("ТипРеализации", ТипФайла);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекДистрибьютор) Тогда 
			Запрос.Текст = Запрос.Текст + " И РеализацияДистрибьютору.Дистрибьютор = &Дистрибьютор";
			Запрос.УстановитьПараметр("Дистрибьютор", ТекДистрибьютор);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Дата1", ДатаНачалаУдаления);
		Запрос.УстановитьПараметр("Дата2", ДатаКонцаУдаления);
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			ТекОб = Результат.Ссылка.ПолучитьОбъект();
			Если НЕ ДатыЗапретаИзменения.ИзменениеЗапрещено(ТекОб) Тогда 
				ТекОб.Удалить();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


// Метод "1C836" для файлов EXCEL с расширениями: xlsx, xls, ods.
//
// Параметры:
//         ФайлEXCEL - Полное имя файла (путь к файлу с именем файла и расширением).
//        СтрокаЗаголовка (по умолчанию = 1) - Номер строки файла типа MXL, в которой расположены заголовки колонок.
//            Не используется. 
//      В обработке 1-я строка анализируется для сопоставления колонок файла с реквизитами объектов 1С.
//        НачСтрока (по-умолчанию = 0) - Номер начальной строки, начиная с которой считываются данные из файла.
//        КонСтрока (по-умолчанию = 0) - Номер конечной строки, которой заканчиваются считываемые данные из файла.
//            Если НачСтрока=0 и КонСтрока=0, то считывается вся таблица, находящаяся в файле.
//        КолвоСтрокФайла - Количество строк в файле. Возвращается в вызвавшую процедуру.
//
// Возвращаемые значения:
//         ТаблицаРезультат - Результат считывания данных из файла.
//
Функция ЗагрузитьМетодом_1C836(Знач ФайлEXCEL, Знач СтрокаЗаголовка = 1, НачСтрока = 0, КонСтрока = 0, КолвоСтрокФайла = 0)
	Перем ТабличныйДокумент, КонечнаяКолонка, ИмяКолонки, Область, ТекущаяОбласть, нСтрока, нКолонка, НоваяСтрокаТФ, ЗначениеЯчейки;
	Перем ТаблицаРезультат;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать(ФайлEXCEL, СпособЧтенияЗначенийТабличногоДокумента.Значение);    // СпособЧтенияЗначенийТабличногоДокумента - новый параметр платформы 8.3.6. Второе значение "Текст".
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
		
		Параметры = Новый Структура;
		Параметры.Вставить("ТипОшибки", Перечисления.ТипыОшибок.НеВерныйФорматФайла);
		Параметры.Вставить("Дата", ТекущаяДата());
		Параметры.Вставить("ИмяФайла", ФайлEXCEL);
		Параметры.Вставить("ОписаниеОшибки",ОписаниеОшибки());
		СделатьЗаписьВСправочникСообщенияПриЗагрузкеФайловОтДистрибьютора(Параметры);
		
		Возврат Новый ТаблицаЗначений;
	КонецПопытки;
	
	КолвоСтрокФайла = ТабличныйДокумент.ВысотаТаблицы;
	КонечнаяКолонка = ТабличныйДокумент.ПолучитьОбласть().ШиринаТаблицы;
	
	// Проверка заполненности листа.
	Если КолвоСтрокФайла = 0 Тогда
		// Завершение работы.
		// Закрытие Объектов.
		ТабличныйДокумент = Неопределено;
		
		Параметры = Новый Структура;
		Параметры.Вставить("ТипОшибки", Перечисления.ТипыОшибок.НеВерныйФорматФайла);
		Параметры.Вставить("Дата", ТекущаяДата());
		Параметры.Вставить("ИмяФайла", ФайлEXCEL);
		Параметры.Вставить("ОписаниеОшибки","Количество строк в файле нулевое");
		
		Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
	КонецЕсли;
	
	// Создание результирующей таблицы, в которую будут записываться считанные из файла данные.
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	// Формирование колонок результирующей таблицы.
	
	// "НомерСтроки" - для наглядности и удобства.
	// В зависимости от разрабатываемой обработки.
	// "Сопоставлено" - может быть другим.
	// Здесь же могут быть добавлены другие колонки, не формируемые из содержимого файла.
	ТаблицаРезультат.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"), "№", 4);
	ТаблицаРезультат.Колонки.Добавить("Сопоставлено", Новый ОписаниеТипов("Булево"), "Сопоставлено", 1);
	
	Для ит = 1 ПО КонечнаяКолонка Цикл
		нКолонка = СтрЗаменить(ит, Символы.НПП, "");
		ИмяКолонки = "N" + нКолонка;
		ТаблицаРезультат.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	// 1-я строка. Заголовки.
	НоваяСтрокаТФ = ТаблицаРезультат.Добавить();
	НоваяСтрокаТФ.НомерСтроки = 1;
	Для ит=1 ПО КонечнаяКолонка Цикл
		нКолонка = СтрЗаменить(ит, Символы.НПП, "");
		ИмяКолонки = "N" + нКолонка;
		НоваяСтрокаТФ[ИмяКолонки] = ТабличныйДокумент.ПолучитьОбласть("R1" + "C"+нКолонка).ТекущаяОбласть.Текст;
		
		// Используется при формировании таблицы на форме обработки.
		ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
		ДлинаСтроки    = СтрДлина(СокрЛП(НоваяСтрокаТФ[ИмяКолонки]));
		ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
	КонецЦикла;
	
	НачСтрока = ?(НачСтрока = 0, 2, НачСтрока);
	КонСтрока = ?(КонСтрока = 0, КолвоСтрокФайла, КонСтрока);
	
	Для нСтрока = НачСтрока ПО КонСтрока Цикл
		НоваяСтрокаТФ = ТаблицаРезультат.Добавить();
		НоваяСтрокаТФ[0] = нСтрока;
		Для ит=1 ПО КонечнаяКолонка Цикл
			нКолонка = СтрЗаменить(ит, Символы.НПП, "");
			Область = ТабличныйДокумент.ПолучитьОбласть("R"+СтрЗаменить(нСтрока, Символы.НПП, "") + "C"+нКолонка);
			ТекущаяОбласть = Область.ТекущаяОбласть;
			Попытка
				ЗначениеЯчейки = ТекущаяОбласть.Значение;        // Число, Дата.
			Исключение
				ЗначениеЯчейки = СокрЛП(ТекущаяОбласть.Текст);    // Строка, Булево. (Булево как строка "ИСТИНА"/"ЛОЖЬ")
				Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
					//ЗначениеЯчейки = ПреобразоватьПростоеЗначениеИзСтрокиВТипизованноеЗначение1С(ЗначениеЯчейки);
					Если ТипЗнч(ЗначениеЯчейки) = Тип("Строка") Тогда
						ЗначениеЯчейки = СокрЛП(ЗначениеЯчейки);
					КонецЕсли;
				Иначе
					ЗначениеЯчейки = Неопределено;
					Если Область.Рисунки.Количество() > 0 Тогда    // Изображение.
						ЗначениеЯчейки = ПолучитьЗначениеЯчейкиОбластиТабличногоДокументаСКартинками(Область, нСтрока, нКолонка, "УИД");
					КонецЕсли;
				КонецЕсли;
			КонецПопытки;
			
			ИмяКолонки = "N" + нКолонка;
			НоваяСтрокаТФ[ИмяКолонки] = ЗначениеЯчейки;
			
			// Используется при формировании таблицы на форме обработки.
			ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
			ДлинаСтроки    = СтрДлина(СокрЛП(НоваяСтрокаТФ[ИмяКолонки]));
			ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
		КонецЦикла;
	КонецЦикла;
	
	// Юзабилити. Удалить пустые колонки.
	УдалитьКолонкиСНулевойШириной(ТаблицаРезультат);
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Процедура УдалитьКолонкиСНулевойШириной(ТаблицаРезультат)
	Перем МассивПустыхКолонок;
	
	// Найдем пустые колонки.
	МассивПустыхКолонок = Новый Массив;
	Для Каждого Колонка ИЗ ТаблицаРезультат.Колонки Цикл
		Если Колонка.Ширина = 0 Тогда
			МассивПустыхКолонок.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// Удалим пустые колонки.
	Для Каждого ПустаяКолонка ИЗ МассивПустыхКолонок Цикл
		ТаблицаРезультат.Колонки.Удалить(ПустаяКолонка);
	КонецЦикла;
	
КонецПроцедуры

// ПРЕОБРАЗОВАНИЕ СТРОКИ К ТИПИЗОВАННОМУ ЗНАЧЕНИЮ 1С.

Функция ПреобразоватьПростоеЗначениеИзСтрокиВТипизованноеЗначение1С(Знач ИсходноеЗначение)
	
	Если НЕ ИсходноеЗначение = "" Тогда
		Если ТолькоЦифрыИЗапятаяВСтроке(ИсходноеЗначение, Истина, Ложь)И(ЛЕВ(ИсходноеЗначение,1) <> 0) Тогда
			//Попытка
			//    Возврат Число(ИсходноеЗначение);
			//Исключение
			Возврат ИсходноеЗначение
			//КонецПопытки;
		Иначе
			Если ВРег(ИсходноеЗначение) = "ИСТИНА" ИЛИ ВРег(ИсходноеЗначение) = ("ИСТИНА"+Символы.ПС) ИЛИ ВРег(ИсходноеЗначение) = "TRUE" ИЛИ ВРег(ИсходноеЗначение) = ("TRUE"+Символы.ПС) Тогда
				Возврат Истина;
			ИначеЕсли ВРег(ИсходноеЗначение) = "ЛОЖЬ" ИЛИ  ВРег(ИсходноеЗначение) = ("ЛОЖЬ"+Символы.ПС) ИЛИ ВРег(ИсходноеЗначение) = "FALSE" ИЛИ ВРег(ИсходноеЗначение) = ("FALSE"+Символы.ПС) Тогда
				Возврат Ложь;
			Иначе
				Возврат ПреобразоватьИзСтрокиВДату(ИсходноеЗначение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИсходноеЗначение
	
КонецФункции

// Проверяет, содержит ли строка только цифры и запятую.
//
// Параметры:
//  СтрокаПроверки          - Строка - Строка для проверки
//  УчитыватьЛидирующиеНули - Булево - Флаг учета лидирующих нулей, если Истина, то ведущие нули пропускаются
//  УчитыватьПробелы        - Булево - Флаг учета пробелов, если Истина, то пробелы при проверке игнорируются
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
//

Функция ТолькоЦифрыИЗапятаяВСтроке(Знач СтрокаПроверки, Знач УчитыватьЛидирующиеНули = Истина, Знач УчитыватьПробелы = Истина)
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ УчитыватьПробелы Тогда
		СтрокаПроверки = СтрЗаменить(СтрокаПроверки, " ", "");
	КонецЕсли;
	
	//Если Сред(СтрокаПроверки, 1, 1) = "-" Тогда
	//	СтрокаПроверки = Сред(СтрокаПроверки, 2, СтрДлина(СтрокаПроверки));
	//КонецЕсли;
	
	Если ПустаяСтрока(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ УчитыватьЛидирующиеНули Тогда
		Позиция = 1;
		// Взятие символа за границей строки возвращает пустую строку
		Пока Сред(СтрокаПроверки, Позиция, 1) = "0" Цикл
			Позиция = Позиция + 1;
		КонецЦикла;
		СтрокаПроверки = Сред(СтрокаПроверки, Позиция);
	КонецЕсли;
	
	// Если содержит только цифры, то в результате замен должна быть получена пустая строка
	// Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы
	Возврат СтрДлина(
	СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
	СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
	СтрокаПроверки, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", ""), ",", "")
	) = 0;
	
КонецФункции

// Преобразование строки вида "01.01.13" или "01.01.2013" к значению типа "дата".
// Возможны друние форматы даты в файле EXCEL.

Функция ПреобразоватьИзСтрокиВДату(Знач СтрокаДаты)
	Перем ScrptCtrl, OutDate;
	
	Попытка
		ScrptCtrl = Новый COMОбъект("MSScriptControl.ScriptControl");
		ScrptCtrl.Language="vbscript";
		OutDate = ScrptCtrl.Eval("CDate(""" + СтрокаДаты + """)");
		Возврат OutDate;
	Исключение
		//Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат СтрокаДаты;
	
КонецФункции 

// ПОЛУЧЕНИЕ ЗНАЧЕНИЯ ДЛЯ РЕКВИЗИТА ТИПА "ФАЙЛ КАРТИНКИ".
Функция ПолучитьЗначениеЯчейкиОбластиТабличногоДокументаСКартинками(Знач Область, Знач нСтрока, Знач нКолонка, Знач ПравилоИмяФайлаКартинки = "УИД")
	Перем Рисунок, ит, ИмяФайлаРисунка;
	Перем ЗначениеЯчейки;
	
	ит = 0;
	ЗначениеЯчейки = "";
	Для Каждого Рисунок ИЗ Область.Рисунки Цикл
		ит = ит + 1;
		Если ПравилоИмяФайлаКартинки = "УИД" Тогда
			ИмяФайлаРисунка = КаталогВременныхФайлов() + Новый УникальныйИдентификатор() + ".jpg";
		Иначе
			ИмяФайлаРисунка = КаталогВременныхФайлов() + "С" + нСтрока + "К" + нКолонка + ".jpg";
		КонецЕсли;
		Попытка
			Рисунок.Картинка.Записать(ИмяФайлаРисунка);
			ЗначениеЯчейки = ЗначениеЯчейки + ИмяФайлаРисунка + ?(ит < Область.Рисунки.Количество(), Символы.ПС, "");
		Исключение
			// Поле картинки недоступно для чтения.
		КонецПопытки;
	КонецЦикла;
	
	Возврат ЗначениеЯчейки;
	
КонецФункции

