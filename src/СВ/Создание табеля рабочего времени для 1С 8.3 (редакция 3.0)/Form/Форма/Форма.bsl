&НаСервере
Функция ПолучитьФамилиюСИнициалами(знач ФИО) Экспорт

	ФИОСПереносами = СтрЗаменить(ФИО, " ", Символы.ПС);

	ЧастиСтроки = Новый Массив;
	Для Индекс = 1 По СтрЧислоСтрок(ФИОСПереносами) Цикл
		Стр = СтрПолучитьСтроку(ФИОСПереносами, Индекс);
		Если ЗначениеЗаполнено(Стр) Тогда
			ЧастиСтроки.Добавить(СокрЛП(Стр));
		КонецЕсли;
	КонецЦикла;

	Результат = "";

	Если ЧастиСтроки.Количество() > 0 Тогда
		Результат = Результат + ЧастиСтроки[0];

		Если ЧастиСтроки.Количество() > 1 Тогда
			Результат = Результат + " " + Лев(ЧастиСтроки[1], 1) + ".";

			Если ЧастиСтроки.Количество() > 2 Тогда
				Результат = Результат + " " + Лев(ЧастиСтроки[2], 1) + ".";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаСервере
Процедура НастроитьФорму()

	Для Индекс = 1 По 31 Цикл
		Идентификатор = Строка(Индекс);
		ЭтаФорма.Элементы["ОсновнаяВидДня" + Идентификатор].Заголовок = Идентификатор;
		ЭтаФорма.Элементы["ОсновнаяЧасы" + Идентификатор].ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура НастроитьПоУмолчанию()

	Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");

	ПроизводственныеКалендари = Справочники.ПроизводственныеКалендари.СписокПроизводственныхКалендарей();
	Если ПроизводственныеКалендари.Количество() > 0 Тогда
		Объект.Календарь = ПроизводственныеКалендари[0];
	КонецЕсли;

	Объект.ПродолжительностьРабочегоДня = 8;
	Объект.ПродолжительностьПредпраздничногоДня = 7;
	Объект.ПродолжительностьПятницы = 8;

	Видпериода = Перечисления.ДоступныеПериодыОтчета.Месяц;
	Объект.ДатаНачала = НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -1));
	Объект.ДатаОкончания = КонецМесяца(ДобавитьМесяц(ТекущаяДата(), -1));

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастроитьПоУмолчанию();
	НастроитьФорму();
	ИзмениласьДата();		
	
КонецПроцедуры

&НаСервере
Процедура РасчитатьДанныеКалендаря()

	ДанныеКалендаря = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.Дата КАК Дата,
		|	ДанныеПроизводственногоКалендаря.ВидДня КАК ВидДня
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";

	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Объект.ДатаНачала));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(Объект.ДатаОкончания));
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", Объект.Календарь);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

		ВидДня = ВыборкаДетальныеЗаписи.ВидДня;
		Дата = ВыборкаДетальныеЗаписи.Дата;

		ДанныеКалендаря.Вставить(
			Дата, 
			Новый Структура("ВидДня", ВидДня)
		);
	КонецЦикла;

	АдресДанныхКалендаря = ПоместитьВоВременноеХранилище(ДанныеКалендаря, Новый УникальныйИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьПолей()

	СекундВСутках = 60 * 60 * 24;
	Для Индекс = 1 По 31 Цикл
		Д = Объект.ДатаНачала + (Индекс - 1) * СекундВСутках;
		ДеньСуществует = Д >= Объект.ДатаНачала И Д <= Объект.ДатаОкончания;

		Идентификатор = Строка(Индекс);
		ЭтаФорма.Элементы["ОсновнаяВидДня" + Идентификатор].Доступность = ДеньСуществует;
		ЭтаФорма.Элементы["ОсновнаяЧасы" + Идентификатор].Доступность = ДеньСуществует;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере()

	Объект.Основная.Очистить();

КонецПроцедуры

&НаСервере
Процедура ИзмениласьДата()

	ВосстановитьДанные();

	ОбновитьДоступностьПолей();
	РасчитатьДанныеКалендаря();

КонецПроцедуры

// Обработка выбора периода

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ВыборПериодаКлиент.ПериодПриИзменении(Элемент, Период, Объект.ДатаНачала, Объект.ДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СохранитьДанные();
    
    ОписаниеОповещения = Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект);
    
	ВыборПериодаКлиент.ПериодНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, 
		ВидПериода, Объект.ДатаНачала, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаЗавершение(СтруктураПериода, ДополнительныеПараметры) Экспорт
	
	// Установим полученный период
    Если СтруктураПериода <> Неопределено Тогда
        Период = СтруктураПериода.Период;
        Объект.ДатаНачала = СтруктураПериода.НачалоПериода;
        Объект.ДатаОкончания = КонецМесяца(Объект.ДатаНачала);
    КонецЕсли;
    
    ИзмениласьДата();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыборПериодаКлиент.ПериодОбработкаВыбора(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		ВидПериода, Период, Объект.ДатаНачала, Объект.ДатаОкончания);

	ИзмениласьДата();

КонецПроцедуры
	
&НаКлиенте
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборПериодаКлиент.ПериодОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
		ВидПериода, Период, Объект.ДатаНачала, Объект.ДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ВыборПериодаКлиент.ПериодАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка,
		ВидПериода, Период, Объект.ДатаНачала, Объект.ДатаОкончания);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяФайлаОбработки()
	
	Возврат РеквизитФормыВЗначение("Объект").ИспользуемоеИмяФайла;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ВыборПериодаКлиент.ВидПериодаПриИзменении(Неопределено, ВидПериода, Объект.ДатаНачала, Объект.ДатаОкончания, Период);
	
	ИмяФайлаОбработки = ПолучитьИмяФайлаОбработки();
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()

	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получаем сотрудников, работавших в организации из подсистемы КадровыйУчет
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация = Объект.Организация;
	ПараметрыПолученияСотрудниковОрганизаций.Подразделение = Объект.Подразделение;
	ПараметрыПолученияСотрудниковОрганизаций.ОтбиратьПоГоловнойОрганизации  = Ложь;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода = Объект.ДатаНачала;
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода = Объект.ДатаОкончания;
	ПараметрыПолученияСотрудниковОрганизаций.КадровыеДанные = "Должность";

	Сотрудники = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	Сотрудники.Колонки.Добавить("ИмяСотрудника");
	Для Каждого Строка Из Сотрудники Цикл
		Строка.ИмяСотрудника = Строка.Сотрудник.Наименование;
	КонецЦикла;	
	Сотрудники.Сортировать("ИмяСотрудника");
	
	Для Каждого СтрокаПоСотруднику Из Сотрудники Цикл
		Стр = Объект.Основная.Добавить();
		Стр.Сотрудник = СтрокаПоСотруднику.Сотрудник;
		Стр.Должность = СтрокаПоСотруднику.Должность;
		Стр.ТабельныйНомер = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(СтрокаПоСотруднику.Сотрудник.Код, Истина);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВсех(Команда)

	Если Не РассчитатьВсехНаСервере() Тогда	
		  ПредупреждениеОПроблемахСКалендарем();
	КонецЕсли;			

КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеОПроблемахСКалендарем()
	ПоказатьПредупреждение(, "У вас не заполнен производственный календарь на этот год! Откройте его (кнопка 'Открыть'), укажите нужный год, заполните и запишите. После этого закройте и откройте табель рабочего времени прежде чем продолжить работу." + Символы.ПС + Символы.ПС + "Внимание! Если список производственных календарей у вас пустой - создайте новый календарь (для России с именем 'Российская Федерация' и кодом 'РФ').",, "Ошибка");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоматически(Команда)
	
	ОчиститьНаСервере();
	ЗаполнитьНаСервере();

КонецПроцедуры

&НаСервере
Процедура РассчитатьСтрокуПоСотруднику(СтрокаПоСотруднику, ДанныеКалендаря)
	
	КалендарьСотрудника = ПолучитьКалендарьСотрудника(
		СтрокаПоСотруднику.Сотрудник, Объект.Организация,
		Объект.Подразделение, Объект.ДатаНачала, Объект.ДатаОкончания
	);

	СекундВСутках = 60 * 60 * 24;

	Для Индекс = 1 По 31 Цикл
		
		Дата = НачалоМесяца(Объект.ДатаНачала) + (Индекс - 1) * СекундВСутках;
		ДанныеПоДню = ДанныеКалендаря.Получить(Дата);

		ТипЧасов = "";
		ЧасовОтработано = 0;

		Если ДанныеПоДню <> Неопределено Тогда
			
			РаботалВЭтотДень = 
				ЗначениеЗаполнено(КалендарьСотрудника.Календарь) И
				КалендарьСотрудника.Календарь.Получить(День(Дата));
			
			ВидДня = ДанныеПоДню.ВидДня;
			Если
				(ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий Или
				ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный) И
				РаботалВЭтотДень
			Тогда
				ТипЧасов = "я";

				Если ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
					ЧасовОтработано = Объект.ПродолжительностьПредпраздничногоДня;
				Иначе
					ЧасовОтработано = Объект.ПродолжительностьРабочегоДня;
				КонецЕсли;
			Иначе
				ТипЧасов = "в";
				ЧасовОтработано = 0;
			КонецЕсли;

			Если ЗначениеЗаполнено(ПроставитьВидДня) Тогда
				ТипЧасов = НРег(СокрЛП(ПроставитьВидДня));
				ЧасовОтработано = 0;
			КонецЕсли;
		КонецЕсли;

		Идентификатор = Строка(Индекс);
		СтрокаПоСотруднику["ВидДня" + Идентификатор] = ТипЧасов;
		СтрокаПоСотруднику["Часы" + Идентификатор] = ЧасовОтработано;

	КонецЦикла;
	
	// проверим документы начисления оптуска
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Отпуск.ДатаНачалаОсновногоОтпуска КАК ДатаНачалаОсновногоОтпуска,
		|	Отпуск.ДатаОкончанияОсновногоОтпуска КАК ДатаОкончанияОсновногоОтпуска
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Проведен = ИСТИНА
		|	И Отпуск.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
		|	И Отпуск.Сотрудник = &Сотрудник
		|	И Отпуск.Организация = &Организация";
		
	Запрос.УстановитьПараметр("ДатаНачала", 
		НачалоМесяца(
			ДобавитьМесяц(Объект.ДатаНачала, -1)
		)
	);
	Запрос.УстановитьПараметр("ДатаКонца", 
		КонецМесяца(
			ДобавитьМесяц(Объект.ДатаНачала, 1)
		)
	);	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Сотрудник", СтрокаПоСотруднику.Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если 
			НачалоДня(ВыборкаДетальныеЗаписи.ДатаОкончанияОсновногоОтпуска) >= 
			НачалоМесяца(Объект.ДатаНачала) И
			НачалоДня(ВыборкаДетальныеЗаписи.ДатаНачалаОсновногоОтпуска) <= 
			КонецМесяца(Объект.ДатаНачала)
		Тогда			
			ТекущийДень = НачалоДня(ВыборкаДетальныеЗаписи.ДатаНачалаОсновногоОтпуска);
			Пока ТекущийДень <= ВыборкаДетальныеЗаписи.ДатаОкончанияОсновногоОтпуска Цикл
				Если НачалоМесяца(ТекущийДень) = НачалоМесяца(Объект.ДатаНачала) Тогда
					Индекс = День(ТекущийДень);					
					Идентификатор = Строка(Индекс);
					СтрокаПоСотруднику["ВидДня" + Идентификатор] = "ОТ";
					СтрокаПоСотруднику["Часы" + Идентификатор] = 0;					
				КонецЕсли;
				ТекущийДень = ТекущийДень + СекундВСутках;
			КонецЦикла;
			
		КонецЕсли;			
	КонецЦикла;
	
	// также с больничными
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БольничныйЛист.ДатаНачала КАК ДатаНачала,
		|	БольничныйЛист.ДатаОкончания КАК ДатаОкончания,
		|	БольничныйЛист.ПричинаНетрудоспособности
		|ИЗ
		|	Документ.БольничныйЛист КАК БольничныйЛист
		|ГДЕ
		|	БольничныйЛист.Проведен = ИСТИНА
		|	И БольничныйЛист.Организация = &Организация
		|	И БольничныйЛист.Сотрудник = &Сотрудник
		|	И БольничныйЛист.Дата МЕЖДУ &ДатаНачала И &ДатаКонца";
	
	Запрос.УстановитьПараметр("ДатаНачала", 
		НачалоМесяца(
			ДобавитьМесяц(Объект.ДатаНачала, -1)
		)
	);
	Запрос.УстановитьПараметр("ДатаКонца", 
		КонецМесяца(
			ДобавитьМесяц(Объект.ДатаНачала, 1)
		)
	);	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Сотрудник", СтрокаПоСотруднику.Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если 
			НачалоДня(ВыборкаДетальныеЗаписи.ДатаОкончания) >= 
			НачалоМесяца(Объект.ДатаНачала) И
			НачалоДня(ВыборкаДетальныеЗаписи.ДатаНачала) <= 
			КонецМесяца(Объект.ДатаНачала)
		Тогда			
			ТекущийДень = НачалоДня(ВыборкаДетальныеЗаписи.ДатаНачала);
			Пока ТекущийДень <= ВыборкаДетальныеЗаписи.ДатаОкончания Цикл
				Если НачалоМесяца(ТекущийДень) = НачалоМесяца(Объект.ДатаНачала) Тогда
					Индекс = День(ТекущийДень);					
					Идентификатор = Строка(Индекс);
					СтрокаПоСотруднику["ВидДня" + Идентификатор] = "Б";					
					СтрокаПоСотруднику["Часы" + Идентификатор] = 0;					
					
					Если ВыборкаДетальныеЗаписи.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
						СтрокаПоСотруднику["ВидДня" + Идентификатор] = "Р";
					КонецЕсли;
				КонецЕсли;
				ТекущийДень = ТекущийДень + СекундВСутках;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;	

КонецПроцедуры

&НаСервере
Функция РассчитатьВсехНаСервере()

	ДанныеКалендаря = ПолучитьИзВременногоХранилища(АдресДанныхКалендаря);
	
	Если ДанныеКалендаря.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	Для Каждого СтрокаПоСотруднику Из Объект.Основная Цикл
		РассчитатьСтрокуПоСотруднику(СтрокаПоСотруднику, ДанныеКалендаря);
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

&НаСервере
Функция РассчитатьТекущегоНаСервере()

	ТекущаяСтрока = ЭтаФорма.Элементы.Основная.ТекущаяСтрока;

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат -1;
	КонецЕсли;

	СтрокаПоСотруднику = Объект.Основная.НайтиПоИдентификатору(ТекущаяСтрока);

	ДанныеКалендаря = ПолучитьИзВременногоХранилища(АдресДанныхКалендаря);
	
	Если ДанныеКалендаря.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;

	РассчитатьСтрокуПоСотруднику(СтрокаПоСотруднику, ДанныеКалендаря);
	
	Возврат 1;

КонецФункции

&НаКлиенте
Процедура РассчитатьТекущего(Команда)

	Если РассчитатьТекущегоНаСервере() = 0 Тогда
		ПредупреждениеОПроблемахСКалендарем();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяВидДняПриИзменении(Элемент)

	ЭтаФорма.ТекущийЭлемент.ТекущиеДанные["ВидДня" + Строка(Элемент.Заголовок)] = НРег(СокрЛП(Элемент.ТекстРедактирования));
	ЭтаФорма.ТекущийЭлемент.ТекущиеДанные["Часы" + Строка(Элемент.Заголовок)] = 0;

КонецПроцедуры

&НаСервере
Функция ПодготовитьПечатнуюФорму(Результат)

	Результат.Очистить();
	ТабДокумент = Результат;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	счетчик = 1;
	Областьмакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.ИмяОрганизации = Объект.Организация;
	ОбластьМакета.Параметры.ИмяПодразделения = Объект.Подразделение;
	ОбластьМакета.Параметры.НомерДокумента = Месяц(Объект.ДатаНачала);
	ОбластьМакета.Параметры.ДатаЗаполнения = КонецМесяца(Объект.ДатаНачала);
	ОбластьМакета.Параметры.ДатаНач = НачалоМесяца(Объект.ДатаНачала);
	ОбластьМакета.Параметры.ДатаКон = КонецМесяца(Объект.ДатаОкончания);
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	Областьмакета = Макет.ПолучитьОбласть("Колонтитул");	
	
	ТабДокумент.Вывести(ОбластьМакета);

	НомерПоПорядку = 0;

	ВыбСотрудник = Неопределено;
	ОбластьМакета = Неопределено;
	ДнейОтработано = Неопределено;
	ЧасовОтработано = Неопределено;
	ДнейВОтпуске = Неопределено;
	ДнейПоБолезни = Неопределено;

	Для Каждого СтрокаПоСотруднику Из Объект.Основная Цикл

		Для ИндексДня = 1 По 31 Цикл
		
			Если ВыбСотрудник <> СтрокаПоСотруднику.Сотрудник Тогда

				Если ОбластьМакета <> Неопределено Тогда
					ВывестиОбласть(ТабДокумент, ОбластьМакета, НомерПоПорядку, ДнейОтработано, ЧасовОтработано,
						ДнейВОтпуске, ДнейПоБолезни);
				КонецЕсли;

				НомерПоПорядку = НомерПоПорядку + 1;

				ВыбСотрудник = СтрокаПоСотруднику.Сотрудник;

				Областьмакета = Макет.ПолучитьОбласть("Область1");
				ОбластьМакета.Параметры.Работник = ПолучитьФамилиюСИнициалами(СтрокаПоСотруднику.Сотрудник);
				ОбластьМакета.Параметры.Должность = СтрокаПоСотруднику.Должность;
				ОбластьМакета.Параметры.ТабельныйНомер = СтрокаПоСотруднику.ТабельныйНомер;

				ДнейОтработано = Новый Соответствие;
				ЧасовОтработано = Новый Соответствие;
				Для Индекс = 0 По 2 Цикл
					ДнейОтработано[Индекс] = 0;
					ЧасовОтработано[Индекс] = 0;
				КонецЦикла;
				ДнейВОтпуске = 0;
				ДнейПоБолезни = 0;

			КонецЕсли;

			Идентификатор = Строка(ИндексДня);

			ТипЧасов = НРег(СтрокаПоСотруднику["ВидДня" + Идентификатор]);
			КоличествоЧасов = СтрокаПоСотруднику["Часы" + Идентификатор];

			Если ТипЧасов = "я" Или ТипЧасов = "лч" Тогда
				ДнейОтработано[0] = ДнейОтработано[0] + 1;
				ЧасовОтработано[0] = ЧасовОтработано[0] + КоличествоЧасов;

				НомерПоловиныМесяца = ?(ИндексДня <= 15, 1, 2);
				ДнейОтработано[НомерПоловиныМесяца] = ДнейОтработано[НомерПоловиныМесяца] + 1;
				ЧасовОтработано[НомерПоловиныМесяца] = ЧасовОтработано[НомерПоловиныМесяца] + КоличествоЧасов;
			ИначеЕсли ТипЧасов = "от" Тогда
				ДнейВОтпуске = ДнейВОтпуске + 1;
			ИначеЕсли ТипЧасов = "б" Тогда
				ДнейПоБолезни = ДнейПоБолезни + 1;
			КонецЕсли;

			ОбластьМакета.Параметры["День" + Идентификатор] = ТипЧасов;
			ОбластьМакета.Параметры["Время" + Идентификатор] = КоличествоЧасов;

		КонецЦикла;

	КонецЦикла;

	Если ОбластьМакета <> Неопределено Тогда
		ВывестиОбласть(ТабДокумент, ОбластьМакета, НомерПоПорядку, ДнейОтработано, ЧасовОтработано,
			ДнейВОтпуске, ДнейПоБолезни);
	КонецЕсли;

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Областьмакета = Макет.ПолучитьОбласть("Подвал");
	
	Областьмакета.Параметры.ДолжностьОтветственного = Объект.ДолжностьОтветственного;
	Областьмакета.Параметры.ФИООтветственного = ПолучитьФамилиюСИнициалами(Объект.Ответственный);
	
	Областьмакета.Параметры.ДолжностьКадровика = Объект.ДолжностьРаботникаОтделаКадров;
	Областьмакета.Параметры.ФИОКадровика = ПолучитьФамилиюСИнициалами(Объект.РаботникОтделаКадров);

	Областьмакета.Параметры.ДолжностьРуководителя = Объект.ДолжностьРуководителяПодразделения;
	ОбластьМакета.Параметры.ФИОРуководителя = ПолучитьФамилиюСИнициалами(Объект.РуководительПодразделения);
	
	ОбластьМакета.Параметры.дата1 = КонецМесяца(Объект.ДатаНачала);
	ОбластьМакета.Параметры.дата2 = КонецМесяца(Объект.ДатаОкончания);
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ТолькоПросмотр      = Истина;
	ТабДокумент.ОтображатьСетку     = Ложь;
	ТабДокумент.ОтображатьЗаголовки = Ложь;

	Возврат ТабДокумент;

КонецФункции

Процедура ВывестиОбласть(ТабДокумент, ОбластьМакета, НомерПоПорядку, ДнейОтработано, ЧасовОтработано, ДнейВОтпуске, ДнейПоБолезни)

		ОбластьМакета.Параметры.НомерПоПорядку = НомерПоПорядку;

		ОбластьМакета.Параметры.ДнейОтработано = ДнейОтработано[0]; 
		ОбластьМакета.Параметры.ЧасовОтработано = ЧасовОтработано[0];

		ОбластьМакета.Параметры.ДнейОтработано1 = ДнейОтработано[1]; 
		ОбластьМакета.Параметры.ЧасовОтработано1 = ЧасовОтработано[1];

		ОбластьМакета.Параметры.ДнейОтработано2 = ДнейОтработано[2]; 
		ОбластьМакета.Параметры.ЧасовОтработано2 = ЧасовОтработано[2];

		Если ДнейВОтпуске > 0 Тогда
			ОбластьМакета.Параметры.КодВОтпуске = "от";
			ОбластьМакета.Параметры.ДнейВОтпуске = ДнейВОтпуске;
		КонецЕсли;

		Если ДнейПоБолезни > 0 Тогда
			ОбластьМакета.Параметры.КодПоБолезни = "б";
			ОбластьМакета.Параметры.ДнейПоБолезни = ДнейПоБолезни;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)

	Таб = Новый ТабличныйДокумент;
	ПодготовитьПечатнуюФорму(Таб);
	Таб.Показать("Печатная форма (Т-13)");

КонецПроцедуры

&НаСервере
Функция ПолучитьТекущуюДолжностьСотрудника(Сотрудник)

	ДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Сотрудник, "Должность", 
		НачалоДня(Объект.ДатаНачала));
	
	Если ДанныеСотрудников.Количество() > 0 Тогда
		ТекущиеКадровыеДанныеСотрудника = ДанныеСотрудников[0];
		Возврат ТекущиеКадровыеДанныеСотрудника.Должность;
	КонецЕсли;

	Возврат Справочники.Должности.ПустаяСсылка();

КонецФункции

&НаСервере
Процедура ПодобратьДолжностьРуководителяПодразделения()

	Объект.ДолжностьРуководителяПодразделения = ПолучитьТекущуюДолжностьСотрудника(Объект.РуководительПодразделения);

КонецПроцедуры

&НаКлиенте
Процедура РуководительПодразделенияПриИзменении(Элемент)

	ПодобратьДолжностьРуководителяПодразделения();

КонецПроцедуры

&НаКлиенте
Процедура РаботникОтделаКадровПриИзменении(Элемент)

	РаботникОтделаКадровПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура РаботникОтделаКадровПриИзмененииНаСервере()

	Объект.ДолжностьРаботникаОтделаКадров = ПолучитьТекущуюДолжностьСотрудника(Объект.РаботникОтделаКадров);

КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)

	ОтветственныйПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОтветственныйПриИзмененииНаСервере()

	Объект.ДолжностьОтветственного = ПолучитьТекущуюДолжностьСотрудника(Объект.Ответственный);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	ПриЗакрытииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()

	СохранитьДанные();

КонецПроцедуры

&НаСервере
Функция ПодготовитьКаталогДляТабеля(ДляОрганизации, ДляПодразделения)

	КодПодразделения = ?(ЗначениеЗаполнено(ДляПодразделения), ДляПодразделения.Код, "");

	КаталогИБ = НСтр(СтрокаСоединенияИнформационнойБазы(), "File");
	Вариант1_КаталогТабеля = КаталогИБ + "/Tabeli/" + Строка(ДляОрганизации.ИНН) + "/" + КодПодразделения;
	Вариант2_КаталогТабеля = КаталогИБ + "/Табели/" + Строка(ДляОрганизации.ИНН) + "/" + КодПодразделения;
	
	Каталог1НаДиске = Новый Файл(Вариант1_КаталогТабеля);
    Если Каталог1НаДиске.Существует() Тогда
		КаталогТабеля = Вариант1_КаталогТабеля;
	Иначе
		КаталогТабеля = Вариант2_КаталогТабеля;
	КонецЕсли;
		
	Возврат КаталогТабеля;

КонецФункции

&НаСервереБезКонтекста
Функция ПодготовитьИмяНастроекНаДату(ИмяНастроек, Дата)

	Возврат ИмяНастроек + "_" + Формат(Дата, "ДФ=гггг") + "_" + Формат(Дата, "ДФ=ММ");

КонецФункции

&НаСервере
Процедура ОбработатьРеквизит(Каталог, Имя, Операция)

	Если Операция = 0 Тогда
		ЗначениеВФайл(Каталог + "/" + Имя, Объект[Имя]);
	Иначе
		Объект[Имя] = ЗначениеИзФайла(Каталог + "/" + Имя);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьРеквизиты(Каталог, Операция)
	
	ОбработатьРеквизит(Каталог, "РуководительПодразделения", Операция);
	ОбработатьРеквизит(Каталог, "ДолжностьРуководителяПодразделения", Операция);
	ОбработатьРеквизит(Каталог, "РаботникОтделаКадров", Операция);
	ОбработатьРеквизит(Каталог, "ДолжностьРаботникаОтделаКадров", Операция);
	ОбработатьРеквизит(Каталог, "Ответственный", Операция);
	ОбработатьРеквизит(Каталог, "ДолжностьОтветственного", Операция);
	ОбработатьРеквизит(Каталог, "ПродолжительностьРабочегоДня", Операция);
	ОбработатьРеквизит(Каталог, "ПродолжительностьПредпраздничногоДня", Операция);
	ОбработатьРеквизит(Каталог, "ПродолжительностьПятницы", Операция);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанные()

	Попытка

		КаталогТабеля = ПодготовитьКаталогДляТабеля(Объект.Организация, Объект.Подразделение);
		СоздатьКаталог(КаталогТабеля);

		ЗначениеВФайл(
			КаталогТабеля + "/" + ПодготовитьИмяНастроекНаДату("ТабличнаяЧасть", Объект.ДатаНачала), 
			Объект.Основная.Выгрузить()
		);

		ОбработатьРеквизиты(КаталогТабеля, 0);

	Исключение
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура ВосстановитьДанные()

	ОчиститьНаСервере();

	Попытка

		КаталогТабеля = ПодготовитьКаталогДляТабеля(Объект.Организация, Объект.Подразделение);

		Объект.Основная.Загрузить(
			ЗначениеИзФайла(
				КаталогТабеля + "/" + ПодготовитьИмяНастроекНаДату("ТабличнаяЧасть", Объект.ДатаНачала)
			)
		);

		ОбработатьРеквизиты(КаталогТабеля, 1);
	
	Исключение
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ВосстановитьДанные();

КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)

	ВосстановитьДанные();

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СохранитьДанные();

КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СохранитьДанные();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКалендари(Команда)
	ОткрытьФорму("Справочник.ПроизводственныеКалендари.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПриИзменении(Элемент)

	РасчитатьДанныеКалендаря();

КонецПроцедуры

Функция ПолучитьКалендарьСотрудника(Сотрудник, Организация, Подразделение, Знач ДатаНач, Знач ДатаКон)

	Результат = Новый Структура;
	Результат.Вставить("РаботалХотяБыДень", Ложь);
	Результат.Вставить("РаботалХотяБыДеньВВыбранномПодразделении", Ложь);
	Результат.Вставить("Календарь", Новый Соответствие);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаботникиОрганизацийСрезПоследних.ВидСобытия КАК ВидСобытия,
		|	РаботникиОрганизацийСрезПоследних.Подразделение КАК Подразделение
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(
		|		&ВыбДата, Организация = &ВыбОрганизация И Сотрудник = &ВыбСотрудник
		|	) КАК РаботникиОрганизацийСрезПоследних";
	
	Запрос.УстановитьПараметр("ВыбОрганизация", Организация);
	Запрос.УстановитьПараметр("ВыбСотрудник", Сотрудник);
	
	Пока ДатаНач <= ДатаКон Цикл
		Запрос.УстановитьПараметр("ВыбДата", ДатаНач);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ЧислитсяРаботающим = Ложь;
		Если 
			ВыборкаДетальныеЗаписи.Следующий() И
			ВыборкаДетальныеЗаписи.ВидСобытия <> Перечисления.ВидыКадровыхСобытий.Увольнение
		Тогда
			ЧислитсяРаботающим = Истина;
			Результат.РаботалХотяБыДень = Истина;
			Если
				Не Подразделение.Пустая() И
				ВыборкаДетальныеЗаписи.Подразделение = Подразделение 
			Тогда
				Результат.РаботалХотяБыДеньВВыбранномПодразделении = Истина;
			КонецЕсли;
		КонецЕсли;
		Результат.Календарь.Вставить(День(ДатаНач), ЧислитсяРаботающим);
		
		ДатаНач = ДатаНач + 24 * 60 * 60;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции