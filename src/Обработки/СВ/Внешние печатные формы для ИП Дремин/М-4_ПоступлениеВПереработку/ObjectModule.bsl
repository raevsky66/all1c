
// Функция выполняет расчет рублевых сумм для вывода таблиц документа на печать
//
Функция ПодготовитьТаблицуДокументаДляПечати(ВыборкаСтрок, ТаблицаПоТоварам, МассивIDТабличныхЧастей)

	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	СуммаВзаиморасчетов = 0;
	СуммаВзаиморасчетовНДС = 0;
	ТаблицаПоТоварам.Очистить();
	
	НуженПересчетВРубли = Ложь;
	
	Если ВыборкаСтрок.Проведен 
		И (ВыборкаСтрок.РасчетыВУсловныхЕдиницах
		ИЛИ (ВыборкаСтрок.ВалютаДокумента <> ВалютаРегламентированногоУчета И ВыборкаСтрок.Дата >= '20090101000000')) Тогда
		НуженПересчетВРубли = Истина;
	КонецЕсли;	
	
	Пока ВыборкаСтрок.Следующий() Цикл
		
		СтрокаТаблицы = ТаблицаПоТоварам.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаСтрок);
		
		Если НуженПересчетВРубли Тогда
			
			СтрокаТаблицы.СуммаНДС = ?(СтрокаТаблицы.НДСРуб = 0, СтрокаТаблицы.СуммаНДС, СтрокаТаблицы.НДСРуб);
			
			// В случае если сумма включает НДС, то сумма без НДС будет рассчитана позже
			Если СтрокаТаблицы.СуммаВключаетНДС Тогда
				СтрокаТаблицы.Сумма = ?(СтрокаТаблицы.ВсегоРуб = 0, СтрокаТаблицы.Сумма, СтрокаТаблицы.ВсегоРуб);
			// Для валютных документов для Суммы необходимо применять средний курс, 
			// так как сумма документа рассчитывается по курсу аванса,
			// а сумма НДС по курсу текущего документа
			ИначеЕсли НЕ ВыборкаСтрок.РасчетыВУсловныхЕдиницах Тогда
				СуммаРуб            = ?(СтрокаТаблицы.ВсегоРуб = 0, СтрокаТаблицы.Сумма, СтрокаТаблицы.ВсегоРуб);
				СтрокаТаблицы.Сумма = СуммаРуб - СтрокаТаблицы.СуммаНДС;
			// Для условных единиц и сумма НДС и сумма документа рассчитывается по курсу аванса
			Иначе
				СтрокаТаблицы.Сумма = ?(СтрокаТаблицы.СуммаБезНДСРуб = 0, СтрокаТаблицы.Сумма, СтрокаТаблицы.СуммаБезНДСРуб);
			КонецЕсли; 
			
			СтрокаТаблицы.Цена      = ?(СтрокаТаблицы.Количество = 0, 0, СтрокаТаблицы.Сумма/СтрокаТаблицы.Количество);
			
		КонецЕсли;	
		
	КонецЦикла;

	// Исключим строки из табличный частей, которые не удовлетворяют условиям печати. При выборке запросом их необходимо получать, 
	// чтобы распределять сумма взаиморасчетов в рублях на все строки документа.
	Если МассивIDТабличныхЧастей <> Неопределено
		И МассивIDТабличныхЧастей.Количество() <> 0 Тогда
		Инд = ТаблицаПоТоварам.Количество() - 1;
		Пока Инд >= 0 Цикл
			СтрокаТовар = ТаблицаПоТоварам[Инд];
			
			Если МассивIDТабличныхЧастей.Найти(СтрокаТовар.ID) = Неопределено Тогда
				ТаблицаПоТоварам.Удалить(Инд);
			КонецЕсли;
			
			Инд = Инд - 1;
		КонецЦикла;
	КонецЕсли;

	Возврат ТаблицаПоТоварам;

КонецФункции


// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыМ4()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор КАК Регистратор,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументПоступлениеТоваровУслуг.Номер КАК Номер,
	|	ДокументПоступлениеТоваровУслуг.Ссылка КАК Ссылка,
	|	ДокументПоступлениеТоваровУслуг.Проведен КАК Проведен,
	|	ДокументПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	ДокументПоступлениеТоваровУслуг.Дата КАК Дата,
	|	ДокументПоступлениеТоваровУслуг.Дата КАК ДатаСоставления,
	|	ДокументПоступлениеТоваровУслуг.НомерВходящегоДокумента КАК НомерСопроводительногоДокумента,
	|	ДокументПоступлениеТоваровУслуг.Организация КАК Организация,
	|	ДокументПоступлениеТоваровУслуг.Организация КАК ЮрФизЛицо,
	|	ДокументПоступлениеТоваровУслуг.Склад КАК МестоПриемки,
	|	ДокументПоступлениеТоваровУслуг.Склад.Представление КАК СкладНаименование,
	|	ДокументПоступлениеТоваровУслуг.Контрагент.Код КАК ПоставщикКод,
	|	ДокументПоступлениеТоваровУслуг.Контрагент КАК Поставщик,
	|	ЕСТЬNULL(ДокументПоступлениеТоваровУслуг.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	ДокументПоступлениеТоваровУслуг.ВалютаДокумента КАК ВалютаДокумента,
	|	ДокументПоступлениеТоваровУслуг.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ДокументПоступлениеТоваровУслуг.ПодразделениеОрганизации.НаименованиеПолное КАК ПредставлениеПодразделения,
	|	ДокументПоступлениеТоваровУслуг.КурсВзаиморасчетов КАК Курс,
	|	ДокументПоступлениеТоваровУслуг.КратностьВзаиморасчетов КАК Кратность,
	|	ДокументПоступлениеТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ДокументПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом КАК СубСчет,
	|	ПоступлениеТоваровУслуг.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровУслуг.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ПоступлениеТоваровУслуг.Номенклатура.Артикул
	|		ИНАЧЕ ПоступлениеТоваровУслуг.Номенклатура.Код
	|	КОНЕЦ КАК ТоварКод,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ПоступлениеТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
	|	ПоступлениеТоваровУслуг.Цена,
	|	СУММА(ПоступлениеТоваровУслуг.Количество) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА ДокументПоступлениеТоваровУслуг.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|				ТОГДА ПоступлениеТоваровУслуг.Сумма
	|			КОГДА ДокументПоступлениеТоваровУслуг.КратностьВзаиморасчетов = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫРАЗИТЬ(ПоступлениеТоваровУслуг.Сумма * ДокументПоступлениеТоваровУслуг.КурсВзаиморасчетов / ДокументПоступлениеТоваровУслуг.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА ДокументПоступлениеТоваровУслуг.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|				ТОГДА ПоступлениеТоваровУслуг.СуммаНДС
	|			КОГДА ДокументПоступлениеТоваровУслуг.КратностьВзаиморасчетов = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫРАЗИТЬ(ПоступлениеТоваровУслуг.СуммаНДС * ДокументПоступлениеТоваровУслуг.КурсВзаиморасчетов / ДокументПоступлениеТоваровУслуг.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК СуммаНДС,
	|	МИНИМУМ(ПоступлениеТоваровУслуг.НомерСтроки) КАК НомерСтроки,
	|	2 КАК ID,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.СчетУчета.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия,
	|	СУММА(ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0)) КАК ВсегоРуб,
	|	СУММА(ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС, 0)) КАК СуммаБезНДСРуб,
	|	СУММА(ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0)) КАК НДСРуб
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДокументПоступлениеТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
	|		ПО (ПоступлениеТоваровУслуг.Ссылка = ДокументПоступлениеТоваровУслуг.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (ПоступлениеТоваровУслуг.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (ПоступлениеТоваровУслуг.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары))
	|			И (ДокументПоступлениеТоваровУслуг.ВалютаДокумента <> &ВалютаРегламентированногоУчета)
	|ГДЕ
	|	ДокументПоступлениеТоваровУслуг.Ссылка В(&МассивОбъектов)
	|	И НЕ ПоступлениеТоваровУслуг.НомерСтроки ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументПоступлениеТоваровУслуг.Номер,
	|	ДокументПоступлениеТоваровУслуг.Ссылка,
	|	ДокументПоступлениеТоваровУслуг.Проведен,
	|	ДокументПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом,
	|	ДокументПоступлениеТоваровУслуг.Дата,
	|	ДокументПоступлениеТоваровУслуг.НомерВходящегоДокумента,
	|	ДокументПоступлениеТоваровУслуг.Организация,
	|	ДокументПоступлениеТоваровУслуг.Склад,
	|	ДокументПоступлениеТоваровУслуг.Склад.Представление,
	|	ДокументПоступлениеТоваровУслуг.Контрагент.Код,
	|	ДокументПоступлениеТоваровУслуг.Контрагент,
	|	ЕСТЬNULL(ДокументПоступлениеТоваровУслуг.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ),
	|	ДокументПоступлениеТоваровУслуг.ВалютаДокумента,
	|	ДокументПоступлениеТоваровУслуг.ПодразделениеОрганизации,
	|	ДокументПоступлениеТоваровУслуг.ПодразделениеОрганизации.НаименованиеПолное,
	|	ДокументПоступлениеТоваровУслуг.КурсВзаиморасчетов,
	|	ДокументПоступлениеТоваровУслуг.КратностьВзаиморасчетов,
	|	ДокументПоступлениеТоваровУслуг.СуммаВключаетНДС,
	|	ПоступлениеТоваровУслуг.Номенклатура,
	|	ПоступлениеТоваровУслуг.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслуг.Цена,
	|	ПоступлениеТоваровУслуг.СтавкаНДС,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Наименование,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код,
	|	ПоступлениеТоваровУслуг.Номенклатура.НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ПоступлениеТоваровУслуг.Номенклатура.Артикул
	|		ИНАЧЕ ПоступлениеТоваровУслуг.Номенклатура.Код
	|	КОНЕЦ,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.СчетУчета.Забалансовый, ЛОЖЬ),
	|	ДокументПоступлениеТоваровУслуг.Дата,
	|	ДокументПоступлениеТоваровУслуг.Организация,
	|	ДокументПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументПоступлениеТоваровУслуг.Номер,
	|	ДокументПоступлениеТоваровУслуг.Ссылка,
	|	ДокументПоступлениеТоваровУслуг.Проведен,
	|	ДокументПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом,
	|	ДокументПоступлениеТоваровУслуг.Дата,
	|	ДокументПоступлениеТоваровУслуг.Дата,
	|	ДокументПоступлениеТоваровУслуг.НомерВходящегоДокумента,
	|	ДокументПоступлениеТоваровУслуг.Организация,
	|	ДокументПоступлениеТоваровУслуг.Организация,
	|	ДокументПоступлениеТоваровУслуг.Склад,
	|	ДокументПоступлениеТоваровУслуг.Склад.Представление,
	|	ДокументПоступлениеТоваровУслуг.Контрагент.Код,
	|	ДокументПоступлениеТоваровУслуг.Контрагент,
	|	ЕСТЬNULL(ДокументПоступлениеТоваровУслуг.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ),
	|	ДокументПоступлениеТоваровУслуг.ВалютаДокумента,
	|	ДокументПоступлениеТоваровУслуг.ПодразделениеОрганизации,
	|	ДокументПоступлениеТоваровУслуг.ПодразделениеОрганизации.НаименованиеПолное,
	|	ДокументПоступлениеТоваровУслуг.КурсВзаиморасчетов,
	|	ДокументПоступлениеТоваровУслуг.КратностьВзаиморасчетов,
	|	ДокументПоступлениеТоваровУслуг.СуммаВключаетНДС,
	|	ДокументПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом,
	|	ПоступлениеТоваровУслуг.Номенклатура,
	|	ПоступлениеТоваровУслуг.Номенклатура.НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ПоступлениеТоваровУслуг.Номенклатура.Артикул
	|		ИНАЧЕ ПоступлениеТоваровУслуг.Номенклатура.Код
	|	КОНЕЦ,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Наименование,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код,
	|	ПоступлениеТоваровУслуг.СтавкаНДС,
	|	ПоступлениеТоваровУслуг.Цена,
	|	СУММА(ПоступлениеТоваровУслуг.Количество),
	|	СУММА(ВЫБОР
	|			КОГДА ДокументПоступлениеТоваровУслуг.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|				ТОГДА ПоступлениеТоваровУслуг.Сумма
	|			КОГДА ДокументПоступлениеТоваровУслуг.КратностьВзаиморасчетов = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫРАЗИТЬ(ПоступлениеТоваровУслуг.Сумма * ДокументПоступлениеТоваровУслуг.КурсВзаиморасчетов / ДокументПоступлениеТоваровУслуг.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА ДокументПоступлениеТоваровУслуг.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|				ТОГДА ПоступлениеТоваровУслуг.СуммаНДС
	|			КОГДА ДокументПоступлениеТоваровУслуг.КратностьВзаиморасчетов = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫРАЗИТЬ(ПоступлениеТоваровУслуг.СуммаНДС * ДокументПоступлениеТоваровУслуг.КурсВзаиморасчетов / ДокументПоступлениеТоваровУслуг.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|		КОНЕЦ),
	|	МИНИМУМ(ПоступлениеТоваровУслуг.НомерСтроки),
	|	1,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.СчетУчета.Забалансовый, ЛОЖЬ),
	|	СУММА(ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0)),
	|	СУММА(ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС, 0)),
	|	СУММА(ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0))
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДокументПоступлениеТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслуг
	|		ПО (ПоступлениеТоваровУслуг.Ссылка = ДокументПоступлениеТоваровУслуг.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (ПоступлениеТоваровУслуг.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (ПоступлениеТоваровУслуг.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Оборудование))
	|			И (ДокументПоступлениеТоваровУслуг.ВалютаДокумента <> &ВалютаРегламентированногоУчета)
	|ГДЕ
	|	ДокументПоступлениеТоваровУслуг.Ссылка В(&МассивОбъектов)
	|	И НЕ ПоступлениеТоваровУслуг.НомерСтроки ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументПоступлениеТоваровУслуг.Номер,
	|	ДокументПоступлениеТоваровУслуг.Ссылка,
	|	ДокументПоступлениеТоваровУслуг.Проведен,
	|	ДокументПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом,
	|	ДокументПоступлениеТоваровУслуг.Дата,
	|	ДокументПоступлениеТоваровУслуг.НомерВходящегоДокумента,
	|	ДокументПоступлениеТоваровУслуг.Организация,
	|	ДокументПоступлениеТоваровУслуг.Склад,
	|	ДокументПоступлениеТоваровУслуг.Склад.Представление,
	|	ДокументПоступлениеТоваровУслуг.Контрагент.Код,
	|	ДокументПоступлениеТоваровУслуг.Контрагент,
	|	ЕСТЬNULL(ДокументПоступлениеТоваровУслуг.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ),
	|	ДокументПоступлениеТоваровУслуг.ВалютаДокумента,
	|	ДокументПоступлениеТоваровУслуг.ПодразделениеОрганизации,
	|	ДокументПоступлениеТоваровУслуг.ПодразделениеОрганизации.НаименованиеПолное,
	|	ДокументПоступлениеТоваровУслуг.КурсВзаиморасчетов,
	|	ДокументПоступлениеТоваровУслуг.КратностьВзаиморасчетов,
	|	ДокументПоступлениеТоваровУслуг.СуммаВключаетНДС,
	|	ПоступлениеТоваровУслуг.Номенклатура,
	|	ПоступлениеТоваровУслуг.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслуг.Цена,
	|	ПоступлениеТоваровУслуг.СтавкаНДС,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Наименование,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код,
	|	ПоступлениеТоваровУслуг.Номенклатура.НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ПоступлениеТоваровУслуг.Номенклатура.Артикул
	|		ИНАЧЕ ПоступлениеТоваровУслуг.Номенклатура.Код
	|	КОНЕЦ,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.СчетУчета.Забалансовый, ЛОЖЬ),
	|	ДокументПоступлениеТоваровУслуг.Дата,
	|	ДокументПоступлениеТоваровУслуг.Организация,
	|	ДокументПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументПоступлениеТоваровУслуг.Номер,
	|	ДокументПоступлениеТоваровУслуг.Ссылка,
	|	ДокументПоступлениеТоваровУслуг.Проведен,
	|	ДокументПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом,
	|	ДокументПоступлениеТоваровУслуг.Дата,
	|	ДокументПоступлениеТоваровУслуг.Дата,
	|	ДокументПоступлениеТоваровУслуг.НомерВходящегоДокумента,
	|	ДокументПоступлениеТоваровУслуг.Организация,
	|	ДокументПоступлениеТоваровУслуг.Организация,
	|	ДокументПоступлениеТоваровУслуг.Склад,
	|	ДокументПоступлениеТоваровУслуг.Склад.Представление,
	|	ДокументПоступлениеТоваровУслуг.Контрагент.Код,
	|	ДокументПоступлениеТоваровУслуг.Контрагент,
	|	ЕСТЬNULL(ДокументПоступлениеТоваровУслуг.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ),
	|	ДокументПоступлениеТоваровУслуг.ВалютаДокумента,
	|	ДокументПоступлениеТоваровУслуг.ПодразделениеОрганизации,
	|	ДокументПоступлениеТоваровУслуг.ПодразделениеОрганизации.НаименованиеПолное,
	|	ДокументПоступлениеТоваровУслуг.КурсВзаиморасчетов,
	|	ДокументПоступлениеТоваровУслуг.КратностьВзаиморасчетов,
	|	ДокументПоступлениеТоваровУслуг.СуммаВключаетНДС,
	|	ДокументПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом,
	|	ПоступлениеТоваровУслуг.Номенклатура,
	|	ПоступлениеТоваровУслуг.Номенклатура.НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ПоступлениеТоваровУслуг.Номенклатура.Артикул
	|		ИНАЧЕ ПоступлениеТоваровУслуг.Номенклатура.Код
	|	КОНЕЦ,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Наименование,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код,
	|	ПоступлениеТоваровУслуг.СтавкаНДС,
	|	ПоступлениеТоваровУслуг.Цена,
	|	СУММА(ПоступлениеТоваровУслуг.Количество),
	|	СУММА(ВЫБОР
	|			КОГДА ДокументПоступлениеТоваровУслуг.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|				ТОГДА ПоступлениеТоваровУслуг.Сумма
	|			КОГДА ДокументПоступлениеТоваровУслуг.КратностьВзаиморасчетов = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫРАЗИТЬ(ПоступлениеТоваровУслуг.Сумма * ДокументПоступлениеТоваровУслуг.КурсВзаиморасчетов / ДокументПоступлениеТоваровУслуг.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА ДокументПоступлениеТоваровУслуг.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|				ТОГДА ПоступлениеТоваровУслуг.СуммаНДС
	|			КОГДА ДокументПоступлениеТоваровУслуг.КратностьВзаиморасчетов = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫРАЗИТЬ(ПоступлениеТоваровУслуг.СуммаНДС * ДокументПоступлениеТоваровУслуг.КурсВзаиморасчетов / ДокументПоступлениеТоваровУслуг.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|		КОНЕЦ),
	|	МИНИМУМ(ПоступлениеТоваровУслуг.НомерСтроки),
	|	3,
	|	ЛОЖЬ,
	|	СУММА(ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0)),
	|	СУММА(ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС, 0)),
	|	СУММА(ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0))
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДокументПоступлениеТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслуг
	|		ПО (ПоступлениеТоваровУслуг.Ссылка = ДокументПоступлениеТоваровУслуг.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (ПоступлениеТоваровУслуг.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (ПоступлениеТоваровУслуг.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги))
	|			И (ДокументПоступлениеТоваровУслуг.ВалютаДокумента <> &ВалютаРегламентированногоУчета)
	|ГДЕ
	|	ДокументПоступлениеТоваровУслуг.Ссылка В(&МассивОбъектов)
	|	И НЕ ПоступлениеТоваровУслуг.НомерСтроки ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументПоступлениеТоваровУслуг.Номер,
	|	ДокументПоступлениеТоваровУслуг.Ссылка,
	|	ДокументПоступлениеТоваровУслуг.Проведен,
	|	ДокументПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом,
	|	ДокументПоступлениеТоваровУслуг.Дата,
	|	ДокументПоступлениеТоваровУслуг.НомерВходящегоДокумента,
	|	ДокументПоступлениеТоваровУслуг.Организация,
	|	ДокументПоступлениеТоваровУслуг.Склад,
	|	ДокументПоступлениеТоваровУслуг.Склад.Представление,
	|	ДокументПоступлениеТоваровУслуг.Контрагент.Код,
	|	ДокументПоступлениеТоваровУслуг.Контрагент,
	|	ЕСТЬNULL(ДокументПоступлениеТоваровУслуг.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ),
	|	ДокументПоступлениеТоваровУслуг.ВалютаДокумента,
	|	ДокументПоступлениеТоваровУслуг.ПодразделениеОрганизации,
	|	ДокументПоступлениеТоваровУслуг.ПодразделениеОрганизации.НаименованиеПолное,
	|	ДокументПоступлениеТоваровУслуг.КурсВзаиморасчетов,
	|	ДокументПоступлениеТоваровУслуг.КратностьВзаиморасчетов,
	|	ДокументПоступлениеТоваровУслуг.СуммаВключаетНДС,
	|	ПоступлениеТоваровУслуг.Номенклатура,
	|	ПоступлениеТоваровУслуг.Цена,
	|	ПоступлениеТоваровУслуг.СтавкаНДС,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Наименование,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код,
	|	ПоступлениеТоваровУслуг.Номенклатура.НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ПоступлениеТоваровУслуг.Номенклатура.Артикул
	|		ИНАЧЕ ПоступлениеТоваровУслуг.Номенклатура.Код
	|	КОНЕЦ,
	|	ДокументПоступлениеТоваровУслуг.Дата,
	|	ДокументПоступлениеТоваровУслуг.Организация,
	|	ДокументПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументПоступлениеТоваровУслуг.Номер,
	|	ДокументПоступлениеТоваровУслуг.Ссылка,
	|	ДокументПоступлениеТоваровУслуг.Проведен,
	|	ДокументПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом,
	|	ДокументПоступлениеТоваровУслуг.Дата,
	|	ДокументПоступлениеТоваровУслуг.Дата,
	|	ДокументПоступлениеТоваровУслуг.НомерВходящегоДокумента,
	|	ДокументПоступлениеТоваровУслуг.Организация,
	|	ДокументПоступлениеТоваровУслуг.Организация,
	|	ДокументПоступлениеТоваровУслуг.Склад,
	|	ДокументПоступлениеТоваровУслуг.Склад.Представление,
	|	ДокументПоступлениеТоваровУслуг.Контрагент.Код,
	|	ДокументПоступлениеТоваровУслуг.Контрагент,
	|	ЕСТЬNULL(ДокументПоступлениеТоваровУслуг.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ),
	|	ДокументПоступлениеТоваровУслуг.ВалютаДокумента,
	|	ДокументПоступлениеТоваровУслуг.ПодразделениеОрганизации,
	|	ДокументПоступлениеТоваровУслуг.ПодразделениеОрганизации.НаименованиеПолное,
	|	ДокументПоступлениеТоваровУслуг.КурсВзаиморасчетов,
	|	ДокументПоступлениеТоваровУслуг.КратностьВзаиморасчетов,
	|	ДокументПоступлениеТоваровУслуг.СуммаВключаетНДС,
	|	ДокументПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом,
	|	ПоступлениеТоваровУслуг.Номенклатура,
	|	ПоступлениеТоваровУслуг.Номенклатура.НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ПоступлениеТоваровУслуг.Номенклатура.Артикул
	|		ИНАЧЕ ПоступлениеТоваровУслуг.Номенклатура.Код
	|	КОНЕЦ,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Наименование,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код,
	|	ПоступлениеТоваровУслуг.СтавкаНДС,
	|	ПоступлениеТоваровУслуг.Цена,
	|	СУММА(ПоступлениеТоваровУслуг.Количество),
	|	СУММА(ВЫБОР
	|			КОГДА ДокументПоступлениеТоваровУслуг.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|				ТОГДА ПоступлениеТоваровУслуг.Сумма
	|			КОГДА ДокументПоступлениеТоваровУслуг.КратностьВзаиморасчетов = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫРАЗИТЬ(ПоступлениеТоваровУслуг.Сумма * ДокументПоступлениеТоваровУслуг.КурсВзаиморасчетов / ДокументПоступлениеТоваровУслуг.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА ДокументПоступлениеТоваровУслуг.ВалютаДокумента = &ВалютаРегламентированногоУчета
	|				ТОГДА ПоступлениеТоваровУслуг.СуммаНДС
	|			КОГДА ДокументПоступлениеТоваровУслуг.КратностьВзаиморасчетов = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫРАЗИТЬ(ПоступлениеТоваровУслуг.СуммаНДС * ДокументПоступлениеТоваровУслуг.КурсВзаиморасчетов / ДокументПоступлениеТоваровУслуг.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2))
	|		КОНЕЦ),
	|	МИНИМУМ(ПоступлениеТоваровУслуг.НомерСтроки),
	|	4,
	|	ИСТИНА,
	|	СУММА(ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0)),
	|	СУММА(ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС, 0)),
	|	СУММА(ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0))
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДокументПоступлениеТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.АгентскиеУслуги КАК ПоступлениеТоваровУслуг
	|		ПО (ПоступлениеТоваровУслуг.Ссылка = ДокументПоступлениеТоваровУслуг.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (ПоступлениеТоваровУслуг.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (ПоступлениеТоваровУслуг.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслуги))
	|			И (ДокументПоступлениеТоваровУслуг.ВалютаДокумента <> &ВалютаРегламентированногоУчета)
	|ГДЕ
	|	ДокументПоступлениеТоваровУслуг.Ссылка В(&МассивОбъектов)
	|	И НЕ ПоступлениеТоваровУслуг.НомерСтроки ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументПоступлениеТоваровУслуг.Номер,
	|	ДокументПоступлениеТоваровУслуг.Ссылка,
	|	ДокументПоступлениеТоваровУслуг.Проведен,
	|	ДокументПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом,
	|	ДокументПоступлениеТоваровУслуг.Дата,
	|	ДокументПоступлениеТоваровУслуг.НомерВходящегоДокумента,
	|	ДокументПоступлениеТоваровУслуг.Организация,
	|	ДокументПоступлениеТоваровУслуг.Склад,
	|	ДокументПоступлениеТоваровУслуг.Склад.Представление,
	|	ДокументПоступлениеТоваровУслуг.Контрагент.Код,
	|	ДокументПоступлениеТоваровУслуг.Контрагент,
	|	ЕСТЬNULL(ДокументПоступлениеТоваровУслуг.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ),
	|	ДокументПоступлениеТоваровУслуг.ВалютаДокумента,
	|	ДокументПоступлениеТоваровУслуг.ПодразделениеОрганизации,
	|	ДокументПоступлениеТоваровУслуг.ПодразделениеОрганизации.НаименованиеПолное,
	|	ДокументПоступлениеТоваровУслуг.КурсВзаиморасчетов,
	|	ДокументПоступлениеТоваровУслуг.КратностьВзаиморасчетов,
	|	ДокументПоступлениеТоваровУслуг.СуммаВключаетНДС,
	|	ПоступлениеТоваровУслуг.Номенклатура,
	|	ПоступлениеТоваровУслуг.Цена,
	|	ПоступлениеТоваровУслуг.СтавкаНДС,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Наименование,
	|	ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код,
	|	ПоступлениеТоваровУслуг.Номенклатура.НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ПоступлениеТоваровУслуг.Номенклатура.Артикул
	|		ИНАЧЕ ПоступлениеТоваровУслуг.Номенклатура.Код
	|	КОНЕЦ,
	|	ДокументПоступлениеТоваровУслуг.Дата,
	|	ДокументПоступлениеТоваровУслуг.Организация,
	|	ДокументПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка,
	|	ID,
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция формирует табличный документ с печатной формой счета
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьДокумента(МассивОбъектов, ОбъектыПечати)
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_М4";
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Макет = ЭтотОбъект.ПолучитьМакет("ПФ_MXL_М4");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов"  , МассивОбъектов);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыМ4();
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	ОписаниеТиповЧисло15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	ТаблицаПоТоварам = Новый ТаблицаЗначений; 		
	ТаблицаПоТоварам.Колонки.Добавить("НомерСтроки");
	ТаблицаПоТоварам.Колонки.Добавить("Номенклатура");
	ТаблицаПоТоварам.Колонки.Добавить("ТоварНаименование");
	ТаблицаПоТоварам.Колонки.Добавить("ТоварКод");
	ТаблицаПоТоварам.Колонки.Добавить("Количество");
	ТаблицаПоТоварам.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаПоТоварам.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаПоТоварам.Колонки.Добавить("СуммаВключаетНДС");
	ТаблицаПоТоварам.Колонки.Добавить("Цена", 						ОписаниеТиповЧисло15_2);
	ТаблицаПоТоварам.Колонки.Добавить("Сумма", 						ОписаниеТиповЧисло15_2);
	ТаблицаПоТоварам.Колонки.Добавить("СтавкаНДС");
	ТаблицаПоТоварам.Колонки.Добавить("СуммаНДС", 					ОписаниеТиповЧисло15_2);
	ТаблицаПоТоварам.Колонки.Добавить("СуммаНДСВВалютеДокумента", 	ОписаниеТиповЧисло15_2);
	ТаблицаПоТоварам.Колонки.Добавить("СуммаБезНДС", 				ОписаниеТиповЧисло15_2);
	ТаблицаПоТоварам.Колонки.Добавить("СуммаРублевая", 				ОписаниеТиповЧисло15_2);
	ТаблицаПоТоварам.Колонки.Добавить("ID");
	ТаблицаПоТоварам.Колонки.Добавить("ЭтоКомиссия", 				Новый ОписаниеТипов("Булево"));
	ТаблицаПоТоварам.Колонки.Добавить("ВсегоРуб",                   ОписаниеТиповЧисло15_2);
	ТаблицаПоТоварам.Колонки.Добавить("НДСРуб",                     ОписаниеТиповЧисло15_2);
	ТаблицаПоТоварам.Колонки.Добавить("СуммаБезНДСРуб",             ОписаниеТиповЧисло15_2);
	
	МассивIDТабличныхЧастей = Новый Массив;
	МассивIDТабличныхЧастей.Добавить(2); // Товары
	
	Пока Шапка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ТаблицаПоТоварам = ПодготовитьТаблицуДокументаДляПечати(Шапка, ТаблицаПоТоварам, МассивIDТабличныхЧастей);
		
		ОбластьМакетаШапка              = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаЗаголовокДокумента = Макет.ПолучитьОбласть("ЗаголовокДокумента");
		ОбластьМакетаЗаголовокТаблицы   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьМакетаСтрока             = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаПодвалСтрок        = Макет.ПолучитьОбласть("ПодвалСтрок");
		ОбластьМакетаИтого              = Макет.ПолучитьОбласть("Итого");
		ОбластьМакетаПодвал             = Макет.ПолучитьОбласть("Подвал");
		
		// Выводим общие реквизиты шапки
		СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаСоставления);

		ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе);
		ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО        = СведенияОПокупателе.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.НомерДокумента           = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.Номер, Истина, Ложь);
		
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);

		// Выводим заголовок документа
		ОбластьМакетаЗаголовокДокумента.Параметры.Заполнить(Шапка);
		ОбластьМакетаЗаголовокДокумента.Параметры.ДатаСоставления = Шапка.ДатаСоставления;
		ПредставлениеКонтрагента = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
			БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.ДатаСоставления), "НаименованиеДляПечатныхФорм,");
		ОбластьМакетаЗаголовокДокумента.Параметры.ПоставщикНаименование = ПредставлениеКонтрагента;
		ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокДокумента);
		
		// Выводим заголовок таблицы
		ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

		// Инициализация итогов в документе
		ИтогоКоличествоПринято = 0;
		ИтогоСуммаБезНДС       = 0;
		ИтогоСуммаНДС          = 0;
		ИтогоВсегоСНДС         = 0;
		Ном                    = 0;

		// Инициализация счетчиков страниц и строк
		НомерСтраницы   = 1;
		НомерСтроки     = 0;
		КоличествоСтрок = ТаблицаПоТоварам.Количество();
		
		// Выводим многострочную часть документа
		Для Каждого ВыборкаСтрок Из ТаблицаПоТоварам Цикл

			НомерСтроки = НомерСтроки + 1;

			ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);

			Кратность = ?(Шапка.Кратность = 0, 1, Шапка.Кратность);
			ВсегоСНДС = (?(ЗначениеЗаполнено(ВыборкаСтрок.Сумма), ВыборкаСтрок.Сумма, 0)
					  + ?(Шапка.СуммаВключаетНДС, 0, ?(ЗначениеЗаполнено(ВыборкаСтрок.СуммаНДС), ВыборкаСтрок.СуммаНДС, 0)));

			КоличествоПринято = ?(ЗначениеЗаполнено(ВыборкаСтрок.Количество), ВыборкаСтрок.Количество, 0);
			СуммаНДС          = ?(ЗначениеЗаполнено(ВыборкаСтрок.СуммаНДС), ВыборкаСтрок.СуммаНДС, 0);
			СуммаБезНДС       = ВсегоСНДС - СуммаНДС;
			
			Если Шапка.СуммаВключаетНДС И СуммаНДС <> 0 Тогда
				Цена = ?(КоличествоПринято = 0,
					СуммаБезНДС,
					СуммаБезНДС / КоличествоПринято);
					
			Иначе
					
				Цена = ВыборкаСтрок.Цена;
					
			КонецЕсли;

			ОбластьМакетаСтрока.Параметры.КоличествоПринято = КоличествоПринято;
			ОбластьМакетаСтрока.Параметры.ВсегоСНДС         = ВсегоСНДС;
			ОбластьМакетаСтрока.Параметры.СуммаБезНДС       = СуммаБезНДС;
			ОбластьМакетаСтрока.Параметры.СуммаНДС          = СуммаНДС;
			ОбластьМакетаСтрока.Параметры.Цена              = Цена;
			ОбластьМакетаСтрока.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);

			// Проверим вывод
			СтрокаСПодвалом = Новый Массив;
			СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
			Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
				СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);  // помещаться и подвал документа
				СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
			Иначе                                              // иначе - только подвал строк
				СтрокаСПодвалом.Добавить(ОбластьМакетаПодвалСтрок);
			КонецЕсли;

			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, СтрокаСПодвалом) Тогда

				ТабличныйДокумент.Вывести(ОбластьМакетаПодвалСтрок);
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				
				НомерСтраницы = НомерСтраницы + 1;
				ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				
				ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

			КонецЕсли;

			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);

			ИтогоКоличествоПринято = ИтогоКоличествоПринято + КоличествоПринято;
			ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС       + СуммаБезНДС;
			ИтогоСуммаНДС          = ИтогоСуммаНДС          + СуммаНДС;
			ИтогоВсегоСНДС         = ИтогоВсегоСНДС         + ВсегоСНДС;

		КонецЦикла;

		// Выводим итоги по документу
		ОбластьМакетаИтого.Параметры.ИтогоКоличествоПринято = ИтогоКоличествоПринято;
		ОбластьМакетаИтого.Параметры.ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС;
		ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС          = ИтогоСуммаНДС;
		ОбластьМакетаИтого.Параметры.ИтогоВсегоСНДС         = ИтогоВсегоСНДС;
		ТабличныйДокумент.Вывести(ОбластьМакетаИтого);

		// Выводим итоги по документу
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакетаПодвал.Параметры.Заполнить(Шапка);
		
		ОбластьМакетаПодвал.Параметры.ДолжностьПоставщика = "Индивидуальный предприниматель";
		ОбластьМакетаПодвал.Параметры.ФИОПоставщика = "Дремин А.А.";
		
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);

		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

// Экспортная процедура печати, вызываемая из основной программы
//
// Параметры:
// ВХОДЯЩИЕ:
//  МассивОбъектовНазначения - Массив - список объектов ссылочного типа для печати документа
//                 Как правило, содержит один элемент с ссылкой на вызвавший форму объект (документ, справочник)
//
// ИСХОДЯЩИЕ:
//  КоллекцияПечатныхФорм - ТаблицаЗначений - таблица сформированных табличных документов.
//                 Как правило, содержит одну строку с именем текущей печатной формы
//  ОбъектыПечати - СписокЗначений - список объектов печати. 
//  ПараметрыВывода - Структура - Параметры сформированных табличных документов. Содержит поля:
//  						ДоступнаПечатьПоКомплектно - булево - по умолчанию Ложь
//							ПолучательЭлектронногоПисьма
//							ОтправительЭлектронногоПисьма
//
Процедура Печать(МассивОбъектовНазначения, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М4СПодвалом1") Тогда
		 УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М4СПодвалом1", "М-4 (Приходный ордер с подвалом)",
		 	ПечатьДокумента(МассивОбъектовНазначения, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

//
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ОБРАБОТКИ
//

// Сервисная экспортная функция. Вызывается в основной программе при регистрации обработки в информационной базе
// Возвращает структуру с параметрами регистрации
//
// Возвращаемое значение:
//		Структура с полями:
//			Вид - строка, вид обработки, один из возможных: "ДополнительнаяОбработка", "ДополнительныйОтчет", 
//					"ЗаполнениеОбъекта", "Отчет", "ПечатнаяФорма", "СозданиеСвязанныхОбъектов"
//			Назначение - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					Например, "Документ.СчетЗаказ" или "Справочник.*". Параметр имеет смысл только для назначаемых обработок, для глобальных может не задаваться.
//			Наименование - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//			Информация  - строка - Краткая информация или описание по обработке.
//			Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//			БезопасныйРежим - булево - Принимает значение Истина или Ложь, в зависимости от того, требуется ли устанавливать или отключать безопасный режим 
//							исполнения обработок. Если истина, обработка будет запущена в безопасном режиме. 
//
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	//Инициализируем структуру с параметрами регистрации
	
	//Определяем список объектов, вызывающих обработку
	ОбъектыНазначенияФормы = Новый Массив;
	ОбъектыНазначенияФормы.Добавить("Документ.ПоступлениеТоваровУслуг");
	
	ПараметрыРегистрации = ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы);
	ПараметрыРегистрации.Версия = "1.1";

	//Определяем команды для печати формы
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();

	ДобавитьКоманду(ТаблицаКоманд,
		"М-4 с подвалом", // Представление команды в пользовательском интерфейсе
		"М4СПодвалом1",				// Уникальный идентификатор команды
	);

	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);

	Возврат ПараметрыРегистрации;

КонецФункции

//
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ОБРАБОТКИ
//

// Формирует структуру с параметрами регистрации регистрации обработки в информационной базе
//
// Параметры:
//	ОбъектыНазначенияФормы - Массив - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					или строка с именем объекта метаданных 
//	НаименованиеОбработки - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//							Необязательно, по умолчанию синоним или представление объекта
//	Информация  - строка - Краткая информация или описание обработки.
//							Необязательно, по умолчанию комментарий объекта
//	Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//
//
// Возвращаемое значение:
//		Структура
//
Функция ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы = Неопределено, НаименованиеОбработки = "", Информация = "", Версия = "1.0")

	Если ТипЗнч(ОбъектыНазначенияФормы) = Тип("Строка") Тогда
		ОбъектНазначенияФормы = ОбъектыНазначенияФормы;
		ОбъектыНазначенияФормы = Новый Массив;
		ОбъектыНазначенияФормы.Добавить(ОбъектНазначенияФормы);
	КонецЕсли; 
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Назначение", ОбъектыНазначенияФормы);
	
	Если Не ЗначениеЗаполнено(НаименованиеОбработки) Тогда
		НаименованиеОбработки = ЭтотОбъект.Метаданные().Представление();
	КонецЕсли; 
	ПараметрыРегистрации.Вставить("Наименование", НаименованиеОбработки);
	
	Если Не ЗначениеЗаполнено(Информация) Тогда
		Информация = ЭтотОбъект.Метаданные().Комментарий;
	КонецЕсли; 
	ПараметрыРегистрации.Вставить("Информация", Информация);
	
	ПараметрыРегистрации.Вставить("Версия", Версия);

	Возврат ПараметрыРегистрации;

КонецФункции

// Формирует таблицу значений с командами печати
//	
// Возвращаемое значение:
//		ТаблицаЗначений
//
Функция ПолучитьТаблицуКоманд()

	Команды = Новый ТаблицаЗначений;
	
	//Представление команды в пользовательском интерфейсе
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	//Уникальный идентификатор команды или имя макета печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	//Способ вызова команды: "ОткрытиеФормы", "ВызовКлиентскогоМетода", "ВызовСерверногоМетода"
	// "ОткрытиеФормы" - применяется только для отчетов и дополнительных отчетов
	// "ВызовКлиентскогоМетода" - вызов процедуры Печать(), определённой в модуле формы обработки
	// "ВызовСерверногоМетода" - вызов процедуры Печать(), определённой в модуле объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	//Показывать оповещение.
	//Если Истина, требуется показать оповещение при начале и при завершении работы обработки. 
	//Имеет смысл только при запуске обработки без открытия формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	//Дополнительный модификатор команды. 
	//Используется для дополнительных обработок печатных форм на основе табличных макетов.
	//Для таких команд должен содержать строку ПечатьMXL
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));

	Возврат Команды;

КонецФункции

// Вспомогательная процедура.
//
Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ВызовСерверногоМетода", ПоказыватьОповещение = Ложь, Модификатор = "ПечатьMXL")

	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры