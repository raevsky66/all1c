
// Функция формирует табличный документ с печатной формой счета
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьДокумента(ТабЧасть, МассивОбъектов, ОбъектыПечати)
		УстановитьПривилегированныйРежим(Истина);
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
 	ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияУслугПоПереработке_Отчет_о_" + ТабЧасть;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", ДополнительнаяКолонкаПечатныхФормДокументов);
	Запрос.Текст = "
		|//Шапка
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеализацияУслугПоПереработке.Ссылка,
		|	РеализацияУслугПоПереработке.ВерсияДанных,
		|	РеализацияУслугПоПереработке.ПометкаУдаления,
		|	РеализацияУслугПоПереработке.Номер,
		|	РеализацияУслугПоПереработке.Дата,
		|	РеализацияУслугПоПереработке.Проведен,
		|	РеализацияУслугПоПереработке.ВалютаДокумента,
		|	РеализацияУслугПоПереработке.ДоговорКонтрагента,
		|	РеализацияУслугПоПереработке.Комментарий,
		|	РеализацияУслугПоПереработке.Исполнитель,
		|	РеализацияУслугПоПереработке.ИсполнительНаОсновании,
		|	РеализацияУслугПоПереработке.Контрагент,
		|	РеализацияУслугПоПереработке.КратностьВзаиморасчетов,
		|	РеализацияУслугПоПереработке.КурсВзаиморасчетов,
		|	РеализацияУслугПоПереработке.Организация,
		|	РеализацияУслугПоПереработке.Ответственный,
		|	РеализацияУслугПоПереработке.СуммаВключаетНДС,
		|	РеализацияУслугПоПереработке.СчетУчетаРасчетовПоАвансам,
		|	РеализацияУслугПоПереработке.СчетУчетаРасчетовСКонтрагентом,
		|	РеализацияУслугПоПереработке.ТипЦен,
		|	РеализацияУслугПоПереработке.СуммаДокумента,
		|	РеализацияУслугПоПереработке.РучнаяКорректировка,
		|	РеализацияУслугПоПереработке.ПодразделениеОрганизации,
		|	РеализацияУслугПоПереработке.СпособЗачетаАвансов
		|ИЗ
		|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
		|ГДЕ
		|	РеализацияУслугПоПереработке.Ссылка В (&МассивОбъектов)
		|УПОРЯДОЧИТЬ ПО
		|	РеализацияУслугПоПереработке.Дата,
		|	РеализацияУслугПоПереработке.Ссылка
		|;
		|
		|// Табличная часть (услуги или материалы заказчика)
		|ВЫБРАТЬ
		|	РеализацияУслугПоПереработке.Ссылка       КАК Ссылка,
		|	РеализацияУслугПоПереработке.НомерСтроки  КАК НомерСтроки,
		|	РеализацияУслугПоПереработке.Номенклатура КАК Номенклатура,
		|	РеализацияУслугПоПереработке.Номенклатура КАК Товар,
		|	ВЫБОР
		|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
		|			ТОГДА РеализацияУслугПоПереработке.Номенклатура.Артикул
		|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
		|			ТОГДА РеализацияУслугПоПереработке.Номенклатура.Код
		|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
		|			ТОГДА """"
		|	КОНЕЦ КАК КодАртикул,
		|	РеализацияУслугПоПереработке.Количество КАК Количество,
		|	РеализацияУслугПоПереработке.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения" +

		?(ТабЧасть = "Услуги", ",
			|	РеализацияУслугПоПереработке.Цена,
			|	РеализацияУслугПоПереработке.Сумма","") + "

		|ИЗ
		|	Документ.РеализацияУслугПоПереработке." + ТабЧасть + " КАК РеализацияУслугПоПереработке
		|
		|ГДЕ
		|	РеализацияУслугПоПереработке.Ссылка В (&МассивОбъектов)
		|УПОРЯДОЧИТЬ ПО
		|	РеализацияУслугПоПереработке.Ссылка.Дата,
		|	РеализацияУслугПоПереработке.Ссылка,
		|	РеализацияУслугПоПереработке.НомерСтроки
		|";

	Результат = Запрос.ВыполнитьПакет();
	Выборка   = Результат[0].Выбрать();
	ВсеСтроки = Результат[1].Выгрузить();
	ВсеСтроки.Индексы.Добавить("Ссылка,НомерСтроки");

	ПервыйДокумент = Истина;

	Пока Выборка.Следующий() Цикл

		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		ТаблицаПродукция = ВсеСтроки.НайтиСтроки(Новый Структура("Ссылка", Выборка.Ссылка));
		
		Макет = ЭтотОбъект.ПолучитьМакет("ПФ_MXL_Акт");

		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		НазваниеДокумента = НСтр("ru='Отчет о '") + ?(ТабЧасть = "Услуги",
							НСтр("ru='продукции, произведенной из сырья заказчика'"),
							НСтр("ru='переработанном сырье '"));
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Выборка,
												 НСтр("ru='Отчет о '") + ?(ТабЧасть = "Услуги",
												 НСтр("ru='продукции, произведенной из сырья заказчика'"),
												 НСтр("ru='переработанном сырье '")));
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		СведенияОбОрганизации   = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Выборка.Организация, Выборка.Дата);
		ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик               = Выборка.Организация;
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		СведенияОКонтрагенте    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Выборка.Контрагент, Выборка.Дата);
		ПредставлениеПолучателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
		ОбластьМакета.Параметры.Получатель              = Выборка.Контрагент;
		ТабличныйДокумент.Вывести(ОбластьМакета);

		// Вывести табличную часть
		ОбластьШапки = ?(ВыводитьКоды, "ШапкаТаблицы" + ТабЧасть + "СКодом", "ШапкаТаблицы" + ТабЧасть);
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ОбластьМакета.Параметры.ИмяКодАртикул = "Артикул";
		ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ОбластьМакета.Параметры.ИмяКодАртикул = "Код";
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьСтроки = ?(ВыводитьКоды, "Строка" + ТабЧасть + "СКодом", "Строка" + ТабЧасть);
		ОбластьСтроки = Макет.ПолучитьОбласть(ОбластьСтроки);

		НомерСтроки = 0;

		Сумма = 0;

		Для Каждого СтрокаТабличнойЧасти Из ТаблицаПродукция Цикл
			НомерСтроки = НомерСтроки + 1;
			ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
			ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;

			Если ТабЧасть = "Услуги" Тогда
				Сумма = Сумма + СтрокаТабличнойЧасти.Сумма;
			КонецЕсли;

			ТабличныйДокумент.Вывести(ОбластьСтроки);
		КонецЦикла;

		Если ТабЧасть = "Услуги" Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Итого");
			ОбластьМакета.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма);
			ТабличныйДокумент.Вывести(ОбластьМакета);

			СуммаКПрописи = Сумма;
			ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
			ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего продукции '") + НомерСтроки +
				НСтр("ru=', на сумму '") + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, Выборка.ВалютаДокумента);
			ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Выборка.ВалютаДокумента);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;

		Если ТабЧасть = "МатериалыЗаказчика" Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоМатериалы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;

		ОбластьМакета = Макет.ПолучитьОбласть("Подписи" + ТабЧасть);
		ОтветственныеЛицаОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(Выборка.Организация, Выборка.Дата, Выборка.ПодразделениеОрганизации);
		НаименованиеДолжности = ?(ЗначениеЗаполнено(ОтветственныеЛицаОрганизации.РуководительДолжностьПредставление), ОтветственныеЛицаОрганизации.РуководительДолжностьПредставление + " ", "");
		ДолжностьИНазваниеОрганизации = НаименованиеДолжности + ПредставлениеПоставщика;
		
        Если ЗначениеЗаполнено(Выборка.Исполнитель) Тогда
			ДанныеОтветственногоЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Выборка.Организация, Выборка.Исполнитель, Выборка.Дата);
			Если Выборка.Исполнитель = ОтветственныеЛицаОрганизации.Руководитель Тогда 
				ЗаместительПоПриказу = ОтветственныеЛицаОрганизации.РуководительПредставление;
			Иначе
                ЗаместительПоПриказу = "" + ДанныеОтветственногоЛица.Представление;
			КонецЕсли;
		Иначе
			ЗаместительПоПриказу = ОтветственныеЛицаОрганизации.РуководительПредставление;
		КонецЕсли;
		
		Отпустил = Новый Структура("Отпустил", ЗаместительПоПриказу);
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Отпустил);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		// В табличном документе зададим имя области, в которую был
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент,
			НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

// Экспортная процедура печати, вызываемая из основной программы
//
// Параметры:
// ВХОДЯЩИЕ:
//  МассивОбъектовНазначения - Массив - список объектов ссылочного типа для печати документа
//                 Как правило, содержит один элемент с ссылкой на вызвавший форму объект (документ, справочник)
//
// ИСХОДЯЩИЕ:
//  КоллекцияПечатныхФорм - ТаблицаЗначений - таблица сформированных табличных документов.
//                 Как правило, содержит одну строку с именем текущей печатной формы
//  ОбъектыПечати - СписокЗначений - список объектов печати. 
//  ПараметрыВывода - Структура - Параметры сформированных табличных документов. Содержит поля:
//  						ДоступнаПечатьПоКомплектно - булево - по умолчанию Ложь
//							ПолучательЭлектронногоПисьма
//							ОтправительЭлектронногоПисьма
//
Процедура Печать(МассивОбъектовНазначения, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОтчетОПереработкеСырья") Тогда
		 УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ОтчетОПереработкеСырья", "Отчет о переработке сырья",
		 	ПечатьДокумента("МатериалыЗаказчика", МассивОбъектовНазначения, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

//
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ОБРАБОТКИ
//

// Сервисная экспортная функция. Вызывается в основной программе при регистрации обработки в информационной базе
// Возвращает структуру с параметрами регистрации
//
// Возвращаемое значение:
//		Структура с полями:
//			Вид - строка, вид обработки, один из возможных: "ДополнительнаяОбработка", "ДополнительныйОтчет", 
//					"ЗаполнениеОбъекта", "Отчет", "ПечатнаяФорма", "СозданиеСвязанныхОбъектов"
//			Назначение - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					Например, "Документ.СчетЗаказ" или "Справочник.*". Параметр имеет смысл только для назначаемых обработок, для глобальных может не задаваться.
//			Наименование - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//			Информация  - строка - Краткая информация или описание по обработке.
//			Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//			БезопасныйРежим - булево - Принимает значение Истина или Ложь, в зависимости от того, требуется ли устанавливать или отключать безопасный режим 
//							исполнения обработок. Если истина, обработка будет запущена в безопасном режиме. 
//
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	//Инициализируем структуру с параметрами регистрации
	
	//Определяем список объектов, вызывающих обработку
	ОбъектыНазначенияФормы = Новый Массив;
	ОбъектыНазначенияФормы.Добавить("Документ.РеализацияУслугПоПереработке");
	
	ПараметрыРегистрации = ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы);
	ПараметрыРегистрации.Версия = "1.1";

	//Определяем команды для печати формы
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();

	ДобавитьКоманду(ТаблицаКоманд,
		"Отчет о переработке сырья", // Представление команды в пользовательском интерфейсе
		"ОтчетОПереработкеСырья",				// Уникальный идентификатор команды
	);

	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);

	Возврат ПараметрыРегистрации;

КонецФункции

//
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ОБРАБОТКИ
//

// Формирует структуру с параметрами регистрации регистрации обработки в информационной базе
//
// Параметры:
//	ОбъектыНазначенияФормы - Массив - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					или строка с именем объекта метаданных 
//	НаименованиеОбработки - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//							Необязательно, по умолчанию синоним или представление объекта
//	Информация  - строка - Краткая информация или описание обработки.
//							Необязательно, по умолчанию комментарий объекта
//	Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//
//
// Возвращаемое значение:
//		Структура
//
Функция ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы = Неопределено, НаименованиеОбработки = "", Информация = "", Версия = "1.0")

	Если ТипЗнч(ОбъектыНазначенияФормы) = Тип("Строка") Тогда
		ОбъектНазначенияФормы = ОбъектыНазначенияФормы;
		ОбъектыНазначенияФормы = Новый Массив;
		ОбъектыНазначенияФормы.Добавить(ОбъектНазначенияФормы);
	КонецЕсли; 
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Назначение", ОбъектыНазначенияФормы);
	
	Если Не ЗначениеЗаполнено(НаименованиеОбработки) Тогда
		НаименованиеОбработки = ЭтотОбъект.Метаданные().Представление();
	КонецЕсли; 
	ПараметрыРегистрации.Вставить("Наименование", НаименованиеОбработки);
	
	Если Не ЗначениеЗаполнено(Информация) Тогда
		Информация = ЭтотОбъект.Метаданные().Комментарий;
	КонецЕсли; 
	ПараметрыРегистрации.Вставить("Информация", Информация);
	
	ПараметрыРегистрации.Вставить("Версия", Версия);

	Возврат ПараметрыРегистрации;

КонецФункции

// Формирует таблицу значений с командами печати
//	
// Возвращаемое значение:
//		ТаблицаЗначений
//
Функция ПолучитьТаблицуКоманд()

	Команды = Новый ТаблицаЗначений;
	
	//Представление команды в пользовательском интерфейсе
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	//Уникальный идентификатор команды или имя макета печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	//Способ вызова команды: "ОткрытиеФормы", "ВызовКлиентскогоМетода", "ВызовСерверногоМетода"
	// "ОткрытиеФормы" - применяется только для отчетов и дополнительных отчетов
	// "ВызовКлиентскогоМетода" - вызов процедуры Печать(), определённой в модуле формы обработки
	// "ВызовСерверногоМетода" - вызов процедуры Печать(), определённой в модуле объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	//Показывать оповещение.
	//Если Истина, требуется показать оповещение при начале и при завершении работы обработки. 
	//Имеет смысл только при запуске обработки без открытия формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	//Дополнительный модификатор команды. 
	//Используется для дополнительных обработок печатных форм на основе табличных макетов.
	//Для таких команд должен содержать строку ПечатьMXL
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));

	Возврат Команды;

КонецФункции

// Вспомогательная процедура.
//
Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ВызовСерверногоМетода", ПоказыватьОповещение = Ложь, Модификатор = "ПечатьMXL")

	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры