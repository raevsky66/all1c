
// Функция формирует табличный документ с печатной формой счета
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьДокумента(МассивОбъектов, ОбъектыПечати)
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб				= Истина;
	ТабДокумент.РазмерКолонтитулаСверху	= 0;
	ТабДокумент.РазмерКолонтитулаСнизу	= 0;
	ТабДокумент.ОриентацияСтраницы		= ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати		= "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетПроизводстваЗаСмену_МХ18";
	
	Макет = ЭтотОбъект.ПолучитьМакет("ПФ_MXL_МХ18");

	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);

	// Запрос к документам
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетПроизводстваЗаСмену.Номер КАК Номер,
	|	ОтчетПроизводстваЗаСмену.Дата КАК ДатаДокумента,
	|	ОтчетПроизводстваЗаСмену.Ссылка КАК Ссылка,
	|	ОтчетПроизводстваЗаСмену.Организация КАК Организация,
	|	ОтчетПроизводстваЗаСмену.СчетЗатрат КАК СчетЗатрат,
	|	ПРЕДСТАВЛЕНИЕ(ОтчетПроизводстваЗаСмену.СчетЗатрат) КАК ПредставлениеСчетаЗатрат,
	|	ОтчетПроизводстваЗаСмену.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
	|	ОтчетПроизводстваЗаСмену.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ПРЕДСТАВЛЕНИЕ(ОтчетПроизводстваЗаСмену.ПодразделениеЗатрат) КАК ПредставлениеПодразделениеЗатрат,
	|	ПРЕДСТАВЛЕНИЕ(ОтчетПроизводстваЗаСмену.ПодразделениеОрганизации) КАК ПредставлениеПодразделенияОрганизации,
	|	ОтчетПроизводстваЗаСмену.Склад КАК Склад,
	|	ПРЕДСТАВЛЕНИЕ(ОтчетПроизводстваЗаСмену.Склад) КАК ПредставлениеПолучателя
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену КАК ОтчетПроизводстваЗаСмену
	|ГДЕ
	|	ОтчетПроизводстваЗаСмену.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтчетПроизводстваЗаСмену.Дата,
	|	ОтчетПроизводстваЗаСмену.Ссылка";

	ШапкаДокумента = Запрос.Выполнить().Выбрать();

	// Запросы к табличным частям с данными о переданной на склад продукции и возвратным отходам
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	0 КАК Раздел,
	|	ОтчетПроизводстваЗаСмену.Ссылка.Дата КАК Дата,
	|	ОтчетПроизводстваЗаСмену.Ссылка КАК Ссылка,
	|	ОтчетПроизводстваЗаСмену.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ОтчетПроизводстваЗаСмену.Номенклатура.Артикул
	|		ИНАЧЕ ОтчетПроизводстваЗаСмену.Номенклатура.Код
	|	КОНЕЦ КАК КодНоменклатуры,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ОтчетПроизводстваЗаСмену.ЕдиницаИзмерения.Наименование КАК ВидУпаковки,
	|	ОтчетПроизводстваЗаСмену.Коэффициент КАК КоличествоВОдномМесте,
	|	СУММА(ОтчетПроизводстваЗаСмену.Количество) КАК Количество,
	|	СУММА(ОтчетПроизводстваЗаСмену.СуммаПлановая) КАК СуммаПлановая,
	|	СУММА(ОтчетПроизводстваЗаСмену.КоличествоМест) КАК КоличествоМест,
	|	МИНИМУМ(ОтчетПроизводстваЗаСмену.НомерСтроки) КАК НомерСтроки,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.Наименование КАК НоменклатураНаименование
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ОтчетПроизводстваЗаСмену
	|ГДЕ
	|	ОтчетПроизводстваЗаСмену.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетПроизводстваЗаСмену.Ссылка.Дата,
	|	ОтчетПроизводстваЗаСмену.Ссылка,
	|	ОтчетПроизводстваЗаСмену.Номенклатура,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ОтчетПроизводстваЗаСмену.Номенклатура.Артикул
	|		ИНАЧЕ ОтчетПроизводстваЗаСмену.Номенклатура.Код
	|	КОНЕЦ,
	|	ОтчетПроизводстваЗаСмену.ЕдиницаИзмерения,
	|	ОтчетПроизводстваЗаСмену.Коэффициент,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.ЕдиницаИзмерения.Наименование,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.ЕдиницаИзмерения.Код,
	|	ОтчетПроизводстваЗаСмену.ЕдиницаИзмерения.Наименование,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.НаименованиеПолное,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ОтчетПроизводстваЗаСмену.Ссылка.Дата,
	|	ОтчетПроизводстваЗаСмену.Ссылка,
	|	ОтчетПроизводстваЗаСмену.Номенклатура,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ОтчетПроизводстваЗаСмену.Номенклатура.Артикул
	|		ИНАЧЕ ОтчетПроизводстваЗаСмену.Номенклатура.Код
	|	КОНЕЦ,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.ЕдиницаИзмерения.Наименование,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.ЕдиницаИзмерения.Код,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.ЕдиницаИзмерения.Наименование,
	|	1,
	|	СУММА(ОтчетПроизводстваЗаСмену.Количество),
	|	СУММА(ОтчетПроизводстваЗаСмену.Сумма),
	|	СУММА(ОтчетПроизводстваЗаСмену.Количество),
	|	МИНИМУМ(ОтчетПроизводстваЗаСмену.НомерСтроки),
	|	ОтчетПроизводстваЗаСмену.Номенклатура.НаименованиеПолное,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.Наименование
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.ВозвратныеОтходы КАК ОтчетПроизводстваЗаСмену
	|ГДЕ
	|	ОтчетПроизводстваЗаСмену.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетПроизводстваЗаСмену.Ссылка.Дата,
	|	ОтчетПроизводстваЗаСмену.Ссылка,
	|	ОтчетПроизводстваЗаСмену.Номенклатура,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ОтчетПроизводстваЗаСмену.Номенклатура.Артикул
	|		ИНАЧЕ ОтчетПроизводстваЗаСмену.Номенклатура.Код
	|	КОНЕЦ,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.ЕдиницаИзмерения.Наименование,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.ЕдиницаИзмерения.Код,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.НаименованиеПолное,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.Наименование,
	|	ОтчетПроизводстваЗаСмену.Номенклатура.ЕдиницаИзмерения.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка,
	|	Раздел,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка,
	|	Раздел";
	Таблицы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ВалютаРегламентированногоУчета  = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПервыйДокумент = Истина;

	Пока ШапкаДокумента.Следующий() Цикл

		Ссылка = ШапкаДокумента.Ссылка;
		
		// Найдем данные для вывода (данные табличных частей)
		Отбор = Новый Структура();
		Отбор.Вставить("Ссылка", Ссылка);
		Если Не Таблицы.НайтиСледующий(Отбор) Тогда
			// Выборку таблиц упорядочиваем так же, как и выборку документов, чтобы искать по выборке с текущей записи.
			// Но на случай рассинхронизации попробуем поискать с начала выборки.
			Таблицы.Сбросить();
			Если Не Таблицы.НайтиСледующий(Отбор) Тогда
				// Документ без таблиц не выводим
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		Шапка                        = Макет.ПолучитьОбласть("Шапка");
		Подвал                       = Макет.ПолучитьОбласть("Подвал");

		// Каждый раздел выводим отдельно со своей шапкой и подвалом.
		// Но у разделов одного и того же документа шапка почти одинаковая - отличаются только полем КодАналитики, идентифицирующим раздел.
		// В подвале тоже есть одинаковая часть - данные о складе-получателе и его МОЛе.
		Шапка.Параметры.Заполнить(ШапкаДокумента);
		Шапка.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ШапкаДокумента.Номер, Истина, Ложь);
		Шапка.Параметры.ДатаДокумента  = ШапкаДокумента.ДатаДокумента;

		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ШапкаДокумента.Организация, ШапкаДокумента.ДатаДокумента);

		Шапка.Параметры.ОрганизацияПоОКПО          = СведенияОбОрганизации.КодПоОКПО;
		Шапка.Параметры.ПредставлениеОрганизации   = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
			СведенияОбОрганизации,
			"НаименованиеДляПечатныхФорм,ИНН,ЮридическийАдрес,Телефоны,Факс");
		Шапка.Параметры.ПредставлениеПодразделения = ?(ЗначениеЗаполнено(ШапкаДокумента.ПодразделениеОрганизации), // Аналогично БП2
			ШапкаДокумента.ПредставлениеПодразделенияОрганизации,
			ШапкаДокумента.ПредставлениеПодразделениеЗатрат);
		Шапка.Параметры.Корсчет                    = ШапкаДокумента.ПредставлениеСчетаЗатрат;
		
		Если ЗначениеЗаполнено(ШапкаДокумента.Склад) Тогда 
			МОЛ = ОтветственныеЛицаБП.ОтветственноеЛицоНаСкладе(ШапкаДокумента.Склад, ШапкаДокумента.ДатаДокумента);
			ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(ШапкаДокумента.Организация, МОЛ, ШапкаДокумента.ДатаДокумента);
			Подвал.Параметры.КладовщикДолжность = ДанныеФизЛица.Должность;
			Подвал.Параметры.КладовщикФИО       = ДанныеФизЛица.Представление;
		КонецЕсли;
		
		// Выводим разделы
		ПервыйРаздел   = Истина;
		ВыборкаРазделы = Таблицы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаРазделы.Следующий() Цикл
			
			// Для каждого раздела инициализируем макеты заново, чтобы исключить влияние данных предыдущих разделов
			ЗаголовокТаблицы             = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			Строка                       = Макет.ПолучитьОбласть("Строка");
			Итого                        = Макет.ПолучитьОбласть("Итого");
			ИтогоПоНакладнойОднаСтраница = Макет.ПолучитьОбласть("ИтогоПоНакладнойОднаСтраница");
			ИтогоПоНакладнойМногоСтраниц = Макет.ПолучитьОбласть("ИтогоПоНакладнойМногоСтраниц");
			ПодвалТаблицы                = Макет.ПолучитьОбласть("ПодвалТаблицы");
			
			Если Не ПервыйРаздел Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйРаздел = Ложь;
			
			Если ВыборкаРазделы.Раздел = 1 Тогда
				Шапка.Параметры.КодАналитики = "Возвратные отходы";
			Иначе
				Шапка.Параметры.КодАналитики = "";
			КонецЕсли;
			
			Шапка.Параметры.ПредставлениеПолучателя = "ООО ""АБЗ ""Исток""";
			
			ТабДокумент.Вывести(Шапка);
			ТабДокумент.Вывести(ЗаголовокТаблицы);

			// Инициализация счетчика страниц
			НомерСтраницы = 1;

			// Инициализация итогов по странице
			ИтогоМассаБруттоНаСтранице = 0;
			ИтогоМестНаСтранице        = 0;
			ИтогоКоличествоНаСтранице  = 0;
			ИтогоСуммаНаСтранице       = 0;

			// Инициализация итогов по документу
			ИтогоМассаБрутто = 0;
			ИтогоМест        = 0;
			ИтогоКоличество  = 0;
			ИтогСумма        = 0;

			// Выводим многострочную часть документа
			ВыборкаСтроки   = ВыборкаРазделы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			КоличествоСтрок = ВыборкаСтроки.Количество();
			НомерСтроки     = 0;
			
			Пока ВыборкаСтроки.Следующий() Цикл
				
				НомерСтроки = НомерСтроки + 1;
				
				// Проверим, помещается ли строка с итогами на страницу, если нет, будем
				// выводить итоги по странице, а строку перенесем на следующую страницу
				СтрокаСИтогами = Новый Массив;
				СтрокаСИтогами.Добавить(Строка);

				Если НомерСтроки < КоличествоСтрок Тогда
					// не последняя строка, достаточно проверить, поместятся ли итоги по странице
					СтрокаСИтогами.Добавить(Итого);
					СтрокаСИтогами.Добавить(ПодвалТаблицы);
				Иначе 
					// Cтрока - последняя в таблице, проверим, поместятся ли
					// итоги по накладной и подвал.
					Если НомерСтраницы > 1 Тогда
						СтрокаСИтогами.Добавить(Итого);
						СтрокаСИтогами.Добавить(ИтогоПоНакладнойМногоСтраниц);
					Иначе
						СтрокаСИтогами.Добавить(ИтогоПоНакладнойОднаСтраница);
					КонецЕсли;
					СтрокаСИтогами.Добавить(ПодвалТаблицы);
					СтрокаСИтогами.Добавить(Подвал);
				КонецЕсли;
				
				Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСИтогами) Тогда
					
					// Выводим итоги по странице
					Итого.Параметры.ИтогМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице;
					Итого.Параметры.ИтогМестНаСтранице        = ИтогоМестНаСтранице;
					Итого.Параметры.ИтогКоличествоНаСтранице  = ИтогоКоличествоНаСтранице;
					Итого.Параметры.ИтогСуммаНаСтранице       = ИтогоСуммаНаСтранице;
					
					ТабДокумент.Вывести(Итого);

					// Выводим подвал таблицы
					ТабДокумент.Вывести(ПодвалТаблицы);

					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

					// Очистим итоги по странице
					ИтогоМассаБруттоНаСтранице = 0;
					ИтогоМестНаСтранице        = 0;
					ИтогоКоличествоНаСтранице  = 0;
					ИтогоСуммаНаСтранице       = 0;

					// Установим новый номер
					НомерСтраницы = НомерСтраницы + 1;
					ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;

					ТабДокумент.Вывести(ЗаголовокТаблицы);

				КонецЕсли;

				// Выводим строку
				Строка.Параметры.Заполнить(ВыборкаСтроки);
				Строка.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтроки.НоменклатураНаименованиеПолное);
				Строка.Параметры.ТоварКод          = ВыборкаСтроки.КодНоменклатуры;
				Строка.Параметры.Цена              = ?(ВыборкаСтроки.Количество = 0, 0, ВыборкаСтроки.СуммаПлановая / ВыборкаСтроки.Количество);
				Строка.Параметры.Сумма             = ВыборкаСтроки.СуммаПлановая;

				ТабДокумент.Вывести(Строка);

				// Увеличим итоги по странице
				ИтогоМассаБруттоНаСтранице = 0;
				ИтогоМестНаСтранице        = ИтогоМестНаСтранице       + ВыборкаСтроки.КоличествоМест;
				ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице + ВыборкаСтроки.Количество;
				ИтогоСуммаНаСтранице       = ИтогоСуммаНаСтранице      + ВыборкаСтроки.СуммаПлановая;

				// Увеличим итоги по документу
				ИтогоМассаБрутто = 0;
				ИтогоМест        = ИтогоМест       + ВыборкаСтроки.КоличествоМест;
				ИтогоКоличество  = ИтогоКоличество + ВыборкаСтроки.Количество;
				ИтогСумма        = ИтогСумма       + ВыборкаСтроки.СуммаПлановая;

			КонецЦикла;

			// Если страниц много, выводим промежуточные итоги по последней странице
			// перед итогами по накладной
			Если НомерСтраницы > 1 Тогда

				// Выводим итоги по странице
				Итого.Параметры.ИтогМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице;
				Итого.Параметры.ИтогМестНаСтранице        = ИтогоМестНаСтранице;
				Итого.Параметры.ИтогКоличествоНаСтранице  = ИтогоКоличествоНаСтранице;
				Итого.Параметры.ИтогСуммаНаСтранице       = ИтогоСуммаНаСтранице;

				ТабДокумент.Вывести(Итого);

				// Выводим итоги по накладной
				ИтогоПоНакладнойМногоСтраниц.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
				ИтогоПоНакладнойМногоСтраниц.Параметры.ИтогМест        = ИтогоМест;
				ИтогоПоНакладнойМногоСтраниц.Параметры.ИтогКоличество  = ИтогоКоличество;
				ИтогоПоНакладнойМногоСтраниц.Параметры.ИтогСумма       = ИтогСумма;

				ТабДокумент.Вывести(ИтогоПоНакладнойМногоСтраниц);

			Иначе // только итоги по накладной

				ИтогоПоНакладнойОднаСтраница.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
				ИтогоПоНакладнойОднаСтраница.Параметры.ИтогМест        = ИтогоМест;
				ИтогоПоНакладнойОднаСтраница.Параметры.ИтогКоличество  = ИтогоКоличество;
				ИтогоПоНакладнойОднаСтраница.Параметры.ИтогСумма       = ИтогСумма;

				ТабДокумент.Вывести(ИтогоПоНакладнойОднаСтраница);

			КонецЕсли;
			
			// Выводим подвал таблицы
			ТабДокумент.Вывести(ПодвалТаблицы);
			
			// Выводим подвал документа
			// Часть параметров установлены вне цикла по разделам
			Подвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, , ",,,,,,,,0");
			Подвал.Параметры.ИтогСуммаПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ИтогСумма, ВалютаРегламентированногоУчета);
			Подвал.Параметры.МОЛДолжность = "Индивидуальный предприниматель";							
			Подвал.Параметры.МОЛФИО	= "Дремин А.А.";
			Подвал.Параметры.КладовщикДолжность	= "Управляющий-индивидуальный предприниматель";
			Подвал.Параметры.КладовщикФИО = "Чуйков М.Г.";
			
			ТабДокумент.Вывести(Подвал);
			
			// В табличном документе зададим имя области, в которую был
			// выведен объект. Нужно для возможности печати покомплектно.
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
				ТабДокумент,
				НомерСтрокиНачало, 
				ОбъектыПечати, 
				ШапкаДокумента.Ссылка);
				
		КонецЦикла; // По ВыборкаРазделы

	КонецЦикла; // Цикл по документам

	Возврат ТабДокумент;

КонецФункции

// Экспортная процедура печати, вызываемая из основной программы
//
// Параметры:
// ВХОДЯЩИЕ:
//  МассивОбъектовНазначения - Массив - список объектов ссылочного типа для печати документа
//                 Как правило, содержит один элемент с ссылкой на вызвавший форму объект (документ, справочник)
//
// ИСХОДЯЩИЕ:
//  КоллекцияПечатныхФорм - ТаблицаЗначений - таблица сформированных табличных документов.
//                 Как правило, содержит одну строку с именем текущей печатной формы
//  ОбъектыПечати - СписокЗначений - список объектов печати. 
//  ПараметрыВывода - Структура - Параметры сформированных табличных документов. Содержит поля:
//  						ДоступнаПечатьПоКомплектно - булево - по умолчанию Ложь
//							ПолучательЭлектронногоПисьма
//							ОтправительЭлектронногоПисьма
//
Процедура Печать(МассивОбъектовНазначения, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МХ18СПодвалом") Тогда
		 УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "МХ18СПодвалом", "МХ-18 с подвалом",
		 	ПечатьДокумента(МассивОбъектовНазначения, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

//
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ОБРАБОТКИ
//

// Сервисная экспортная функция. Вызывается в основной программе при регистрации обработки в информационной базе
// Возвращает структуру с параметрами регистрации
//
// Возвращаемое значение:
//		Структура с полями:
//			Вид - строка, вид обработки, один из возможных: "ДополнительнаяОбработка", "ДополнительныйОтчет", 
//					"ЗаполнениеОбъекта", "Отчет", "ПечатнаяФорма", "СозданиеСвязанныхОбъектов"
//			Назначение - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					Например, "Документ.СчетЗаказ" или "Справочник.*". Параметр имеет смысл только для назначаемых обработок, для глобальных может не задаваться.
//			Наименование - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//			Информация  - строка - Краткая информация или описание по обработке.
//			Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//			БезопасныйРежим - булево - Принимает значение Истина или Ложь, в зависимости от того, требуется ли устанавливать или отключать безопасный режим 
//							исполнения обработок. Если истина, обработка будет запущена в безопасном режиме. 
//
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	//Инициализируем структуру с параметрами регистрации
	
	//Определяем список объектов, вызывающих обработку
	ОбъектыНазначенияФормы = Новый Массив;
	ОбъектыНазначенияФормы.Добавить("Документ.ОтчетПроизводстваЗаСмену");
	
	ПараметрыРегистрации = ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы);
	ПараметрыРегистрации.Версия = "1.1";

	//Определяем команды для печати формы
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();

	ДобавитьКоманду(ТаблицаКоманд,
		"МХ-18 с подвалом", // Представление команды в пользовательском интерфейсе
		"МХ18СПодвалом",				// Уникальный идентификатор команды
	);

	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);

	Возврат ПараметрыРегистрации;

КонецФункции

//
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ОБРАБОТКИ
//

// Формирует структуру с параметрами регистрации регистрации обработки в информационной базе
//
// Параметры:
//	ОбъектыНазначенияФормы - Массив - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					или строка с именем объекта метаданных 
//	НаименованиеОбработки - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//							Необязательно, по умолчанию синоним или представление объекта
//	Информация  - строка - Краткая информация или описание обработки.
//							Необязательно, по умолчанию комментарий объекта
//	Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//
//
// Возвращаемое значение:
//		Структура
//
Функция ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы = Неопределено, НаименованиеОбработки = "", Информация = "", Версия = "1.0")

	Если ТипЗнч(ОбъектыНазначенияФормы) = Тип("Строка") Тогда
		ОбъектНазначенияФормы = ОбъектыНазначенияФормы;
		ОбъектыНазначенияФормы = Новый Массив;
		ОбъектыНазначенияФормы.Добавить(ОбъектНазначенияФормы);
	КонецЕсли; 
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Назначение", ОбъектыНазначенияФормы);
	
	Если Не ЗначениеЗаполнено(НаименованиеОбработки) Тогда
		НаименованиеОбработки = ЭтотОбъект.Метаданные().Представление();
	КонецЕсли; 
	ПараметрыРегистрации.Вставить("Наименование", НаименованиеОбработки);
	
	Если Не ЗначениеЗаполнено(Информация) Тогда
		Информация = ЭтотОбъект.Метаданные().Комментарий;
	КонецЕсли; 
	ПараметрыРегистрации.Вставить("Информация", Информация);
	
	ПараметрыРегистрации.Вставить("Версия", Версия);

	Возврат ПараметрыРегистрации;

КонецФункции

// Формирует таблицу значений с командами печати
//	
// Возвращаемое значение:
//		ТаблицаЗначений
//
Функция ПолучитьТаблицуКоманд()

	Команды = Новый ТаблицаЗначений;
	
	//Представление команды в пользовательском интерфейсе
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	//Уникальный идентификатор команды или имя макета печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	//Способ вызова команды: "ОткрытиеФормы", "ВызовКлиентскогоМетода", "ВызовСерверногоМетода"
	// "ОткрытиеФормы" - применяется только для отчетов и дополнительных отчетов
	// "ВызовКлиентскогоМетода" - вызов процедуры Печать(), определённой в модуле формы обработки
	// "ВызовСерверногоМетода" - вызов процедуры Печать(), определённой в модуле объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	//Показывать оповещение.
	//Если Истина, требуется показать оповещение при начале и при завершении работы обработки. 
	//Имеет смысл только при запуске обработки без открытия формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	//Дополнительный модификатор команды. 
	//Используется для дополнительных обработок печатных форм на основе табличных макетов.
	//Для таких команд должен содержать строку ПечатьMXL
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));

	Возврат Команды;

КонецФункции

// Вспомогательная процедура.
//
Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ВызовСерверногоМетода", ПоказыватьОповещение = Ложь, Модификатор = "ПечатьMXL")

	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры