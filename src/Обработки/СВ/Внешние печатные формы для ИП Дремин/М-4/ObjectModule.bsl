
// Функция формирует табличный документ с печатной формой счета
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьДокумента(МассивОбъектов, ОбъектыПечати)
	
УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Макет = ЭтотОбъект.ПолучитьМакет("ПФ_MXL_М4");
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.АвтоМасштаб        = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_М4";

	ОбластьМакетаШапка              = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаЗаголовокДокумента = Макет.ПолучитьОбласть("ЗаголовокДокумента");
	ОбластьМакетаЗаголовокТаблицы   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакетаСтрока             = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвалСтрок        = Макет.ПолучитьОбласть("ПодвалСтрок");
	ОбластьМакетаИтого              = Макет.ПолучитьОбласть("Итого");
	ОбластьМакетаПодвал             = Макет.ПолучитьОбласть("Подвал");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеИзПереработкиНоменклатура.Номер,
	|	ПоступлениеИзПереработкиНоменклатура.Ссылка,
	|	ПоступлениеИзПереработкиНоменклатура.ДатаСоставления КАК ДатаДокумента,
	|	ПоступлениеИзПереработкиНоменклатура.ДатаСоставления,
	|	ПоступлениеИзПереработкиНоменклатура.Организация,
	|	ПоступлениеИзПереработкиНоменклатура.Организация КАК ЮридическоеФизическоеЛицо,
	|	ПоступлениеИзПереработкиНоменклатура.МестоПриемки,
	|	ПоступлениеИзПереработкиНоменклатура.СкладНаименование,
	|	ПоступлениеИзПереработкиНоменклатура.ПоставщикКод,
	|	ПоступлениеИзПереработкиНоменклатура.Поставщик,
	|	ПоступлениеИзПереработкиНоменклатура.РасчетыВУсловныхЕдиницах,
	|	ПоступлениеИзПереработкиНоменклатура.ВалютаДокумента,
	|	ПоступлениеИзПереработкиНоменклатура.Курс,
	|	ПоступлениеИзПереработкиНоменклатура.Кратность,
	|	ПоступлениеИзПереработкиНоменклатура.СуммаВключаетНДС,
	|	ПоступлениеИзПереработкиНоменклатура.СубСчет,
	|	ПоступлениеИзПереработкиНоменклатура.ПодразделениеЗатрат,
	|	ПоступлениеИзПереработкиНоменклатура.Номенклатура,
	|	ПоступлениеИзПереработкиНоменклатура.ТоварНаименование,
	|	ПоступлениеИзПереработкиНоменклатура.ТоварКод,
	|	ПоступлениеИзПереработкиНоменклатура.ЕдиницаИзмеренияНаименование,
	|	ПоступлениеИзПереработкиНоменклатура.ЕдиницаИзмеренияКод,
	|	ПоступлениеИзПереработкиНоменклатура.НомерТЧ,
	|	СУММА(ПоступлениеИзПереработкиНоменклатура.КоличествоПринято) КАК КоличествоПринято,
	|	СУММА(ПоступлениеИзПереработкиНоменклатура.Стоимость) КАК Стоимость,
	|	МИНИМУМ(ПоступлениеИзПереработкиНоменклатура.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоступлениеИзПереработки.Номер КАК Номер,
	|		ПоступлениеИзПереработки.Ссылка КАК Ссылка,
	|		ПоступлениеИзПереработки.Дата КАК ДатаДокумента,
	|		ПоступлениеИзПереработки.Дата КАК ДатаСоставления,
	|		ПоступлениеИзПереработки.Организация КАК Организация,
	|		ПоступлениеИзПереработки.Организация КАК ЮридическоеФизическоеЛицо,
	|		ПоступлениеИзПереработки.Склад КАК МестоПриемки,
	|		ПоступлениеИзПереработки.Склад.Представление КАК СкладНаименование,
	|		ПоступлениеИзПереработки.Контрагент.Код КАК ПоставщикКод,
	|		ПоступлениеИзПереработки.Контрагент КАК Поставщик,
	|		ПоступлениеИзПереработки.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|		ПоступлениеИзПереработки.ВалютаДокумента КАК ВалютаДокумента,
	|		ПоступлениеИзПереработки.КурсВзаиморасчетов КАК Курс,
	|		ПоступлениеИзПереработки.КратностьВзаиморасчетов КАК Кратность,
	|		ПоступлениеИзПереработки.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|		ПоступлениеИзПереработки.СчетЗатрат КАК СубСчет,
	|		ПоступлениеИзПереработки.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
	|		ПоступлениеИзПереработкиПродукция.Номенклатура КАК Номенклатура,
	|		ПоступлениеИзПереработкиПродукция.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|		ВЫБОР
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|				ТОГДА ПоступлениеИзПереработкиПродукция.Номенклатура.Артикул
	|			ИНАЧЕ ПоступлениеИзПереработкиПродукция.Номенклатура.Код
	|		КОНЕЦ КАК ТоварКод,
	|		ПоступлениеИзПереработкиПродукция.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|		ПоступлениеИзПереработкиПродукция.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|		ПоступлениеИзПереработкиПродукция.Количество КАК КоличествоПринято,
	|		ПоступлениеИзПереработкиПродукция.СуммаПлановая КАК Стоимость,
	|		1 КАК НомерТЧ,
	|		ПоступлениеИзПереработкиПродукция.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		Документ.ПоступлениеИзПереработки КАК ПоступлениеИзПереработки
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеИзПереработки.Продукция КАК ПоступлениеИзПереработкиПродукция
	|			ПО ПоступлениеИзПереработки.Ссылка = ПоступлениеИзПереработкиПродукция.Ссылка
	|	ГДЕ
	|		ПоступлениеИзПереработки.Ссылка В(&СписокОбъектов)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПоступлениеИзПереработки.Номер,
	|		ПоступлениеИзПереработки.Ссылка,
	|		ПоступлениеИзПереработки.Дата,
	|		ПоступлениеИзПереработки.Дата,
	|		ПоступлениеИзПереработки.Организация,
	|		ПоступлениеИзПереработки.Организация,
	|		ПоступлениеИзПереработки.Склад,
	|		ПоступлениеИзПереработки.Склад.Представление,
	|		ПоступлениеИзПереработки.Контрагент.Код,
	|		ПоступлениеИзПереработки.Контрагент,
	|		ПоступлениеИзПереработки.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах,
	|		ПоступлениеИзПереработки.ВалютаДокумента,
	|		ПоступлениеИзПереработки.КурсВзаиморасчетов,
	|		ПоступлениеИзПереработки.КратностьВзаиморасчетов,
	|		ПоступлениеИзПереработки.СуммаВключаетНДС,
	|		ПоступлениеИзПереработки.СчетУчетаРасчетовСКонтрагентом,
	|		ПоступлениеИзПереработки.ПодразделениеЗатрат,
	|		ПоступлениеИзПереработкиВозвращенныеМатериалы.Номенклатура,
	|		ПоступлениеИзПереработкиВозвращенныеМатериалы.Номенклатура.НаименованиеПолное,
	|		ВЫБОР
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|				ТОГДА ПоступлениеИзПереработкиВозвращенныеМатериалы.Номенклатура.Артикул
	|			ИНАЧЕ ПоступлениеИзПереработкиВозвращенныеМатериалы.Номенклатура.Код
	|		КОНЕЦ,
	|		ПоступлениеИзПереработкиВозвращенныеМатериалы.Номенклатура.ЕдиницаИзмерения.Наименование,
	|		ПоступлениеИзПереработкиВозвращенныеМатериалы.Номенклатура.ЕдиницаИзмерения.Код,
	|		ПоступлениеИзПереработкиВозвращенныеМатериалы.Количество,
	|		0,
	|		2,
	|		ПоступлениеИзПереработкиВозвращенныеМатериалы.НомерСтроки
	|	ИЗ
	|		Документ.ПоступлениеИзПереработки КАК ПоступлениеИзПереработки
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеИзПереработки.ВозвращенныеМатериалы КАК ПоступлениеИзПереработкиВозвращенныеМатериалы
	|			ПО ПоступлениеИзПереработки.Ссылка = ПоступлениеИзПереработкиВозвращенныеМатериалы.Ссылка
	|	ГДЕ
	|		ПоступлениеИзПереработки.Ссылка В(&СписокОбъектов)) КАК ПоступлениеИзПереработкиНоменклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеИзПереработкиНоменклатура.Ссылка,
	|	ПоступлениеИзПереработкиНоменклатура.Номер,
	|	ПоступлениеИзПереработкиНоменклатура.ДатаСоставления,
	|	ПоступлениеИзПереработкиНоменклатура.Организация,
	|	ПоступлениеИзПереработкиНоменклатура.МестоПриемки,
	|	ПоступлениеИзПереработкиНоменклатура.Поставщик,
	|	ПоступлениеИзПереработкиНоменклатура.РасчетыВУсловныхЕдиницах,
	|	ПоступлениеИзПереработкиНоменклатура.ВалютаДокумента,
	|	ПоступлениеИзПереработкиНоменклатура.Курс,
	|	ПоступлениеИзПереработкиНоменклатура.Кратность,
	|	ПоступлениеИзПереработкиНоменклатура.СуммаВключаетНДС,
	|	ПоступлениеИзПереработкиНоменклатура.СубСчет,
	|	ПоступлениеИзПереработкиНоменклатура.ПодразделениеЗатрат,
	|	ПоступлениеИзПереработкиНоменклатура.Номенклатура,
	|	ПоступлениеИзПереработкиНоменклатура.ТоварКод,
	|	ПоступлениеИзПереработкиНоменклатура.ЕдиницаИзмеренияНаименование,
	|	ПоступлениеИзПереработкиНоменклатура.ЕдиницаИзмеренияКод,
	|	ПоступлениеИзПереработкиНоменклатура.СкладНаименование,
	|	ПоступлениеИзПереработкиНоменклатура.ПоставщикКод,
	|	ПоступлениеИзПереработкиНоменклатура.НомерТЧ,
	|	ПоступлениеИзПереработкиНоменклатура.ТоварНаименование,
	|	ПоступлениеИзПереработкиНоменклатура.ДатаСоставления,
	|	ПоступлениеИзПереработкиНоменклатура.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеИзПереработкиНоменклатура.Ссылка,
	|	ДатаДокумента,
	|	ПоступлениеИзПереработкиНоменклатура.НомерТЧ,
	|	НомерСтроки УБЫВ";

	ПервыйДокумент = Истина;

	Шапка = Запрос.Выполнить().Выбрать();

	// Вычисление количества строк
	СоответствиеКоличествоСтрок = Новый Соответствие;
	Пока Шапка.СледующийПоЗначениюПоля("Ссылка") Цикл
		СчетчикСтрок = 0;
		Пока Шапка.Следующий() Цикл
			СчетчикСтрок = СчетчикСтрок + 1;
		КонецЦикла;
		СоответствиеКоличествоСтрок.Вставить(Шапка.Ссылка, СчетчикСтрок);
	КонецЦикла;	
	Шапка.Сбросить();

	Пока Шапка.СледующийПоЗначениюПоля("Ссылка") Цикл

		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ПервыйДокумент = Ложь;

		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		// Выводим общие реквизиты шапки
		СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.ЮридическоеФизическоеЛицо, Шапка.ДатаСоставления);

		ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации   = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
			СведенияОПокупателе);
		ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = СведенияОПокупателе.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.НомерДокумента             = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.Номер, Истина, Ложь);
		ОбластьМакетаШапка.Параметры.ПредставлениеПодразделения = ?(ЗначениеЗаполнено(Шапка.ПодразделениеЗатрат),Шапка.ПодразделениеЗатрат.Наименование,"");

		ТабДокумент.Вывести(ОбластьМакетаШапка);

		// Выводим заголовок докмента
		ОбластьМакетаЗаголовокДокумента.Параметры.Заполнить(Шапка);
		ОбластьМакетаЗаголовокДокумента.Параметры.ДатаСоставления = Шапка.ДатаСоставления;
		ПредставлениеКонтрагента = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
			БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.ДатаСоставления),
			"НаименованиеДляПечатныхФорм,");
		ОбластьМакетаЗаголовокДокумента.Параметры.ПоставщикНаименование = ПредставлениеКонтрагента;
		ТабДокумент.Вывести(ОбластьМакетаЗаголовокДокумента);

		// Выводим заголовок таблицы
		ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

		// Инициализация итогов в документе
		ИтогоКоличествоПринято = 0;
		ИтогоСуммаБезНДС       = 0;
		ИтогоСуммаНДС          = 0;
		ИтогоВсегоСНДС         = 0;
		Ном                    = 0;

		// Инициализация счетчиков страниц и строк
		НомерСтраницы   = 1;
		НомерСтроки     = 0;
		КоличествоСтрок = СоответствиеКоличествоСтрок.Получить(Шапка.Ссылка);

		// Выводим многострочную часть докмента
		Пока Шапка.Следующий() Цикл

			Если НЕ ЗначениеЗаполнено(Шапка.Номенклатура) 
				ИЛИ (НЕ ЗначениеЗаполнено(Шапка.Стоимость) И Шапка.НомерТЧ = 1) Тогда 
				Продолжить;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;

			ОбластьМакетаСтрока.Параметры.Заполнить(Шапка);

			Кратность = ?(Шапка.Кратность = 0, 1, Шапка.Кратность);
			ВсегоСНДС = Шапка.Стоимость;

			КоличествоПринято = ?(ЗначениеЗаполнено(Шапка.КоличествоПринято), Шапка.КоличествоПринято, 0);
			СуммаНДС          = 0;
			Цена              = (ВсегоСНДС - СуммаНДС) / ?(ЗначениеЗаполнено(КоличествоПринято), КоличествоПринято, 1);

			ОбластьМакетаСтрока.Параметры.КоличествоПринято = КоличествоПринято;
			ОбластьМакетаСтрока.Параметры.ВсегоСНДС         = ВсегоСНДС;
			ОбластьМакетаСтрока.Параметры.СуммаБезНДС       = ВсегоСНДС - СуммаНДС;
			ОбластьМакетаСтрока.Параметры.СуммаНДС          = СуммаНДС;
			ОбластьМакетаСтрока.Параметры.Цена              = Цена;
			ОбластьМакетаСтрока.Параметры.ТоварНаименование = СокрЛП(Шапка.ТоварНаименование);

			// Проверим вывод
			СтрокаСПодвалом = Новый Массив;
			СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
			Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
				СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);  // помещаться и подвал документа
				СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
			Иначе                                              // иначе - только подвал строк
				СтрокаСПодвалом.Добавить(ОбластьМакетаПодвалСтрок);
			КонецЕсли;

			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда

				ТабДокумент.Вывести(ОбластьМакетаПодвалСтрок);
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();


				НомерСтраницы = НомерСтраницы + 1;
				ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;

				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

			КонецЕсли;

			ТабДокумент.Вывести(ОбластьМакетаСтрока);

			ИтогоКоличествоПринято = ИтогоКоличествоПринято + КоличествоПринято;
			ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС + ВсегоСНДС - СуммаНДС;
			ИтогоСуммаНДС          = ИтогоСуммаНДС + СуммаНДС;
			ИтогоВсегоСНДС         = ИтогоВсегоСНДС + ВсегоСНДС;

		КонецЦикла;

		// Выводим итоги по документу
		ОбластьМакетаИтого.Параметры.ИтогоКоличествоПринято = ИтогоКоличествоПринято;
		ОбластьМакетаИтого.Параметры.ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС;
		ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС          = ИтогоСуммаНДС;
		ОбластьМакетаИтого.Параметры.ИтогоВсегоСНДС         = ИтогоВсегоСНДС;
		ТабДокумент.Вывести(ОбластьМакетаИтого);

		// Выводим итоги по документу
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакетаПодвал.Параметры.Заполнить(Шапка);
		ОбластьМакетаПодвал.Параметры.ДолжностьПоставщика = "Индивидуальный предприниматель";
		ОбластьМакетаПодвал.Параметры.ФИОПоставщика = "Дремин А.А.";
		
		ТабДокумент.Вывести(ОбластьМакетаПодвал);

		// В табличном документе зададим имя области, в которую был
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент,
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;

	Возврат ТабДокумент;


КонецФункции

// Экспортная процедура печати, вызываемая из основной программы
//
// Параметры:
// ВХОДЯЩИЕ:
//  МассивОбъектовНазначения - Массив - список объектов ссылочного типа для печати документа
//                 Как правило, содержит один элемент с ссылкой на вызвавший форму объект (документ, справочник)
//
// ИСХОДЯЩИЕ:
//  КоллекцияПечатныхФорм - ТаблицаЗначений - таблица сформированных табличных документов.
//                 Как правило, содержит одну строку с именем текущей печатной формы
//  ОбъектыПечати - СписокЗначений - список объектов печати. 
//  ПараметрыВывода - Структура - Параметры сформированных табличных документов. Содержит поля:
//  						ДоступнаПечатьПоКомплектно - булево - по умолчанию Ложь
//							ПолучательЭлектронногоПисьма
//							ОтправительЭлектронногоПисьма
//
Процедура Печать(МассивОбъектовНазначения, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М4СПодвалом") Тогда
		 УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М4СПодвалом", "М-4 с подвалом",
		 	ПечатьДокумента(МассивОбъектовНазначения, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

//
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ОБРАБОТКИ
//

// Сервисная экспортная функция. Вызывается в основной программе при регистрации обработки в информационной базе
// Возвращает структуру с параметрами регистрации
//
// Возвращаемое значение:
//		Структура с полями:
//			Вид - строка, вид обработки, один из возможных: "ДополнительнаяОбработка", "ДополнительныйОтчет", 
//					"ЗаполнениеОбъекта", "Отчет", "ПечатнаяФорма", "СозданиеСвязанныхОбъектов"
//			Назначение - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					Например, "Документ.СчетЗаказ" или "Справочник.*". Параметр имеет смысл только для назначаемых обработок, для глобальных может не задаваться.
//			Наименование - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//			Информация  - строка - Краткая информация или описание по обработке.
//			Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//			БезопасныйРежим - булево - Принимает значение Истина или Ложь, в зависимости от того, требуется ли устанавливать или отключать безопасный режим 
//							исполнения обработок. Если истина, обработка будет запущена в безопасном режиме. 
//
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	//Инициализируем структуру с параметрами регистрации
	
	//Определяем список объектов, вызывающих обработку
	ОбъектыНазначенияФормы = Новый Массив;
	ОбъектыНазначенияФормы.Добавить("Документ.ПоступлениеИзПереработки");
	
	ПараметрыРегистрации = ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы);
	ПараметрыРегистрации.Версия = "1.1";

	//Определяем команды для печати формы
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();

	ДобавитьКоманду(ТаблицаКоманд,
		"М-4 с подвалом", // Представление команды в пользовательском интерфейсе
		"М4СПодвалом",				// Уникальный идентификатор команды
	);

	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);

	Возврат ПараметрыРегистрации;

КонецФункции

//
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ОБРАБОТКИ
//

// Формирует структуру с параметрами регистрации регистрации обработки в информационной базе
//
// Параметры:
//	ОбъектыНазначенияФормы - Массив - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					или строка с именем объекта метаданных 
//	НаименованиеОбработки - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//							Необязательно, по умолчанию синоним или представление объекта
//	Информация  - строка - Краткая информация или описание обработки.
//							Необязательно, по умолчанию комментарий объекта
//	Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//
//
// Возвращаемое значение:
//		Структура
//
Функция ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы = Неопределено, НаименованиеОбработки = "", Информация = "", Версия = "1.0")

	Если ТипЗнч(ОбъектыНазначенияФормы) = Тип("Строка") Тогда
		ОбъектНазначенияФормы = ОбъектыНазначенияФормы;
		ОбъектыНазначенияФормы = Новый Массив;
		ОбъектыНазначенияФормы.Добавить(ОбъектНазначенияФормы);
	КонецЕсли; 
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Назначение", ОбъектыНазначенияФормы);
	
	Если Не ЗначениеЗаполнено(НаименованиеОбработки) Тогда
		НаименованиеОбработки = ЭтотОбъект.Метаданные().Представление();
	КонецЕсли; 
	ПараметрыРегистрации.Вставить("Наименование", НаименованиеОбработки);
	
	Если Не ЗначениеЗаполнено(Информация) Тогда
		Информация = ЭтотОбъект.Метаданные().Комментарий;
	КонецЕсли; 
	ПараметрыРегистрации.Вставить("Информация", Информация);
	
	ПараметрыРегистрации.Вставить("Версия", Версия);

	Возврат ПараметрыРегистрации;

КонецФункции

// Формирует таблицу значений с командами печати
//	
// Возвращаемое значение:
//		ТаблицаЗначений
//
Функция ПолучитьТаблицуКоманд()

	Команды = Новый ТаблицаЗначений;
	
	//Представление команды в пользовательском интерфейсе
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	//Уникальный идентификатор команды или имя макета печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	//Способ вызова команды: "ОткрытиеФормы", "ВызовКлиентскогоМетода", "ВызовСерверногоМетода"
	// "ОткрытиеФормы" - применяется только для отчетов и дополнительных отчетов
	// "ВызовКлиентскогоМетода" - вызов процедуры Печать(), определённой в модуле формы обработки
	// "ВызовСерверногоМетода" - вызов процедуры Печать(), определённой в модуле объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	//Показывать оповещение.
	//Если Истина, требуется показать оповещение при начале и при завершении работы обработки. 
	//Имеет смысл только при запуске обработки без открытия формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	//Дополнительный модификатор команды. 
	//Используется для дополнительных обработок печатных форм на основе табличных макетов.
	//Для таких команд должен содержать строку ПечатьMXL
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));

	Возврат Команды;

КонецФункции

// Вспомогательная процедура.
//
Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ВызовСерверногоМетода", ПоказыватьОповещение = Ложь, Модификатор = "ПечатьMXL")

	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры