
// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыСчетаНаОплатуПокупателю()
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ОбщегоНазначенияБПВызовСервера.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("ЗаказПокупателя");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Номер,
	|	Реквизиты.Дата,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.Организация,
	|	Реквизиты.ПодразделениеОрганизации,
	|	Реквизиты.СтруктурнаяЕдиница,
	|	Реквизиты.СтруктурнаяЕдиница.ТекстКорреспондента КАК ТекстКорреспондента,
	|	Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов КАК БанкДляРасчетов,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.Наименование + "" "" + Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.Город
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк.Наименование + "" "" + Реквизиты.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК НаименованиеБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк
	|	КОНЕЦ КАК БанкПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.Код
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк.Код
	|	КОНЕЦ КАК БикБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.КоррСчет
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк.КоррСчет
	|	КОНЕЦ КАК СчетБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.Город
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК ГородБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.Банк.КоррСчет
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.НомерСчета
	|	КОНЕЦ КАК НомерСчетаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА "" р/с "" + Реквизиты.СтруктурнаяЕдиница.НомерСчета + "" в "" + Реквизиты.СтруктурнаяЕдиница.Банк.Наименование + "" "" + Реквизиты.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК БанкТекстКорресподента,
	|	Реквизиты.Контрагент КАК Покупатель,
	|	Реквизиты.Организация КАК Руководители,
	|	Реквизиты.Организация КАК Поставщик,
	|	Реквизиты.ОрганизацияПолучатель КАК Получатель,
	|	Реквизиты.СуммаДокумента,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.СуммаВключаетНДС,
	|	ЗаказПокупателя.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателя.Номенклатура.НаименованиеПолное КАК Товар,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ЗаказПокупателя.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА ЗаказПокупателя.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ КАК Артикул,
	|	ЗаказПокупателя.Количество КАК Количество,
	|	ЗаказПокупателя.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|	ЗаказПокупателя.Цена КАК Цена,
	|	ЗаказПокупателя.Сумма КАК Сумма,
	|	ЗаказПокупателя.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателя.НомерСтроки КАК НомерСтроки,
	|	1 КАК ID
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю.Товары КАК ЗаказПокупателя
	|		ПО (Реквизиты.Ссылка = ЗаказПокупателя.Ссылка)
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Номер,
	|	Реквизиты.Дата,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.Организация,
	|	Реквизиты.ПодразделениеОрганизации,
	|	Реквизиты.СтруктурнаяЕдиница,
	|	Реквизиты.СтруктурнаяЕдиница.ТекстКорреспондента КАК ТекстКорреспондента,
	|	Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов КАК БанкДляРасчетов,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.Наименование + "" "" + Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.Город
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк.Наименование + "" "" + Реквизиты.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК НаименованиеБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк
	|	КОНЕЦ КАК БанкПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.Код
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк.Код
	|	КОНЕЦ КАК БикБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.КоррСчет
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк.КоррСчет
	|	КОНЕЦ КАК СчетБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.Город
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК ГородБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.Банк.КоррСчет
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.НомерСчета
	|	КОНЕЦ КАК НомерСчетаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА "" р/с "" + Реквизиты.СтруктурнаяЕдиница.НомерСчета + "" в "" + Реквизиты.СтруктурнаяЕдиница.Банк.Наименование + "" "" + Реквизиты.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК БанкТекстКорресподента,
	|	Реквизиты.Контрагент,
	|	Реквизиты.Организация,
	|	Реквизиты.Организация,
	|	Реквизиты.ОрганизацияПолучатель,
	|	Реквизиты.СуммаДокумента,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.СуммаВключаетНДС,
	|	"+ ЧастьЗапросаДляВыбораСодержанияУслуг +",
	|	"+ ЧастьЗапросаДляВыбораСодержанияУслуг +",
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ЗаказПокупателя.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА ЗаказПокупателя.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ,
	|	ЗаказПокупателя.Количество,
	|	ЗаказПокупателя.Номенклатура.ЕдиницаИзмерения.Наименование,
	|	ЗаказПокупателя.Цена,
	|	ЗаказПокупателя.Сумма,
	|	ЗаказПокупателя.СуммаНДС,
	|	ЗаказПокупателя.НомерСтроки,
	|	2
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю.Услуги КАК ЗаказПокупателя
	|		ПО (ЗаказПокупателя.Ссылка = Реквизиты.Ссылка)
	|ГДЕ
	|	Реквизиты.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки";

	Возврат ТекстЗапроса;

КонецФункции

// Функция формирует табличный документ с печатной формой счета
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьДокумента(МассивОбъектов, ОбъектыПечати)

	Перем ПодразделениеОтветственныхЛиц;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СчетЗаказ";
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
	ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", ДополнительнаяКолонкаПечатныхФормДокументов);
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыСчетаНаОплатуПокупателю();
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		//Макет = УправлениеПечатью.ПолучитьМакет("Документ.СчетНаОплатуПокупателю.ПФ_MXL_СчетЗаказ");
 		Макет = ЭтотОбъект.ПолучитьМакет("ПФ_MXL_СчетЗаказ");

		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку счета

		СведенияОПолучателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
		ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ИННПолучателя = СведенияОПолучателе.ИНН;
		ОбластьМакета.Параметры.КПППолучателя = СведенияОПолучателе.КПП;
		Если ТипЗнч(Шапка.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			ОбластьМакета.Параметры.БИКБанкаПолучателя               = Шапка.БикБанкаПолучателя;
			ОбластьМакета.Параметры.БанкПолучателя                   = Шапка.БанкПолучателя;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = СокрЛП(Шапка.НаименованиеБанкаПолучателя);
			ОбластьМакета.Параметры.СчетБанкаПолучателя              = Шапка.СчетБанкаПолучателя;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = Шапка.СчетБанкаПолучателя;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = Шапка.НомерСчетаПолучателя;
			ОбластьМакета.Параметры.СчетПолучателя                   = Шапка.НомерСчетаПолучателя;
		КонецЕсли;
		
		Если ПустаяСтрока(Шапка.ТекстКорреспондента) Тогда
			ТекстКорреспондента = СведенияОПолучателе.НаименованиеДляПечатныхФорм;
			Если ЗначениеЗаполнено(Шапка.БанкДляРасчетов) Тогда
				ТекстКорреспондента = ТекстКорреспондента + Шапка.БанкТекстКорресподента;
			КонецЕсли;
		Иначе
			ТекстКорреспондента = Шапка.ТекстКорреспондента;
		КонецЕсли;
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ТекстКорреспондента;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, "Счет на оплату");
		
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
			СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		СведенияОПокупателе     = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата);
		ОбластьМакета.Параметры.ПредставлениеПокупателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
			СведенияОПокупателе, "НаименованиеДляПечатныхФорм,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = "Артикул";
			ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = "Код";
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);

		ОбластьКолонкаТовар = Макет.Область("Товар");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;

		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

		Сумма    = 0;
		СуммаНДС = 0;
		ВсегоСкидок    = 0;
		ВсегоБезСкидок = 0;
		НомерСтроки    = 0;
		
		Пока Шапка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(Шапка.Сумма) Тогда 
				Продолжить;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
			ТабличныйДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.Заполнить(Шапка);
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Товар            = СокрЛП(Шапка.Товар);
			ОбластьДанных.Параметры.Количество       = Шапка.Количество;
			ОбластьДанных.Параметры.ЕдиницаИзмерения = Шапка.ЕдиницаИзмерения;
			ОбластьДанных.Параметры.Цена             = Шапка.Цена;
			
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			ОбластьСуммы.Параметры.Сумма = Шапка.Сумма;
			
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			Сумма    = Сумма    + Шапка.Сумма;
			СуммаНДС = СуммаНДС + Шапка.СуммаНДС;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);

		// Вывести ИтогоНДС
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		Если СуммаНДС <> 0 Тогда
			ОбластьДанных.Параметры.НДС     = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаНДС);
		Иначе
			ОбластьДанных.Параметры.НДС     = "Без налога (НДС)";
			ОбластьСуммы.Параметры.ВсегоНДС = "-";
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
		
		// Вывести ИтогоКОплате
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоКОплате|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоКОплате|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоКОплате|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоКОплате|Сумма");
		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		СуммаКОплате = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьСуммы.Параметры.ИтогоКОплате = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКОплате);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + Шапка.Количество()
			+ ", на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		ТабличныйДокумент.Вывести(ОбластьМакета);

		// Вывести подписи
		Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(Шапка.Получатель, "ЮридическоеФизическоеЛицо")
			= Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
			
			ПодразделениеОтветственныхЛиц = Шапка.ПодразделениеОрганизации;
			
			Руководители = ОбщегоНазначенияБПВызовСервера.ОтветственныеЛица(Шапка.Организация, Шапка.Дата, ПодразделениеОтветственныхЛиц);
			Руководитель = Руководители.РуководительПредставление;
			Бухгалтер    = Руководители.ГлавныйБухгалтерПредставление;
			
			ОбластьМакета.Параметры.ФИОРуководителя = Руководитель;
			ОбластьМакета.Параметры.ФИОБухгалтера   = Бухгалтер;
			
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчетаПредприниматель");
			
			ФЛ = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Шапка.Получатель, "ИндивидуальныйПредприниматель");
			ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(Шапка.Дата, Новый Структура("ФизическоеЛицо",ФЛ));
			Если ДанныеФЛ.Количество() > 0 Тогда
				Предприниматель = СокрЛП(ДанныеФЛ[0].Фамилия) + " " + Лев(СокрЛП(ДанныеФЛ[0].Имя),1) + ". " + Лев(СокрЛП(ДанныеФЛ[0].Отчество),1) + ".";
			Иначе
				Предприниматель = "";
			КонецЕсли;
			
			ОбластьМакета.Параметры.ФИОПредпринимателя = Предприниматель;
			
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

// Экспортная процедура печати, вызываемая из основной программы
//
// Параметры:
// ВХОДЯЩИЕ:
//  МассивОбъектовНазначения - Массив - список объектов ссылочного типа для печати документа
//                 Как правило, содержит один элемент с ссылкой на вызвавший форму объект (документ, справочник)
//
// ИСХОДЯЩИЕ:
//  КоллекцияПечатныхФорм - ТаблицаЗначений - таблица сформированных табличных документов.
//                 Как правило, содержит одну строку с именем текущей печатной формы
//  ОбъектыПечати - СписокЗначений - список объектов печати. 
//  ПараметрыВывода - Структура - Параметры сформированных табличных документов. Содержит поля:
//  						ДоступнаПечатьПоКомплектно - булево - по умолчанию Ложь
//							ПолучательЭлектронногоПисьма
//							ОтправительЭлектронногоПисьма
//
Процедура Печать(МассивОбъектовНазначения, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетЗаказСПечатью") Тогда
		 УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетЗаказСПечатью", "Счет на оплату с печатью",
		 	ПечатьДокумента(МассивОбъектовНазначения, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

//
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ОБРАБОТКИ
//

// Сервисная экспортная функция. Вызывается в основной программе при регистрации обработки в информационной базе
// Возвращает структуру с параметрами регистрации
//
// Возвращаемое значение:
//		Структура с полями:
//			Вид - строка, вид обработки, один из возможных: "ДополнительнаяОбработка", "ДополнительныйОтчет", 
//					"ЗаполнениеОбъекта", "Отчет", "ПечатнаяФорма", "СозданиеСвязанныхОбъектов"
//			Назначение - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					Например, "Документ.СчетЗаказ" или "Справочник.*". Параметр имеет смысл только для назначаемых обработок, для глобальных может не задаваться.
//			Наименование - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//			Информация  - строка - Краткая информация или описание по обработке.
//			Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//			БезопасныйРежим - булево - Принимает значение Истина или Ложь, в зависимости от того, требуется ли устанавливать или отключать безопасный режим 
//							исполнения обработок. Если истина, обработка будет запущена в безопасном режиме. 
//
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	//Инициализируем структуру с параметрами регистрации
	
	//Определяем список объектов, вызывающих обработку
	ОбъектыНазначенияФормы = Новый Массив;
	ОбъектыНазначенияФормы.Добавить("Документ.СчетНаОплатуПокупателю");
	
	ПараметрыРегистрации = ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы);
	ПараметрыРегистрации.Версия = "1.1";

	//Определяем команды для печати формы
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();

	ДобавитьКоманду(ТаблицаКоманд,
		"Счет на оплату с печатью", // Представление команды в пользовательском интерфейсе
		"СчетЗаказСПечатью",				// Уникальный идентификатор команды
	);

	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);

	Возврат ПараметрыРегистрации;

КонецФункции

//
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ОБРАБОТКИ
//

// Формирует структуру с параметрами регистрации регистрации обработки в информационной базе
//
// Параметры:
//	ОбъектыНазначенияФормы - Массив - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					или строка с именем объекта метаданных 
//	НаименованиеОбработки - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//							Необязательно, по умолчанию синоним или представление объекта
//	Информация  - строка - Краткая информация или описание обработки.
//							Необязательно, по умолчанию комментарий объекта
//	Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//
//
// Возвращаемое значение:
//		Структура
//
Функция ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы = Неопределено, НаименованиеОбработки = "", Информация = "", Версия = "1.0")

	Если ТипЗнч(ОбъектыНазначенияФормы) = Тип("Строка") Тогда
		ОбъектНазначенияФормы = ОбъектыНазначенияФормы;
		ОбъектыНазначенияФормы = Новый Массив;
		ОбъектыНазначенияФормы.Добавить(ОбъектНазначенияФормы);
	КонецЕсли; 
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Назначение", ОбъектыНазначенияФормы);
	
	Если Не ЗначениеЗаполнено(НаименованиеОбработки) Тогда
		НаименованиеОбработки = ЭтотОбъект.Метаданные().Представление();
	КонецЕсли; 
	ПараметрыРегистрации.Вставить("Наименование", НаименованиеОбработки);
	
	Если Не ЗначениеЗаполнено(Информация) Тогда
		Информация = ЭтотОбъект.Метаданные().Комментарий;
	КонецЕсли; 
	ПараметрыРегистрации.Вставить("Информация", Информация);
	
	ПараметрыРегистрации.Вставить("Версия", Версия);

	Возврат ПараметрыРегистрации;

КонецФункции

// Формирует таблицу значений с командами печати
//	
// Возвращаемое значение:
//		ТаблицаЗначений
//
Функция ПолучитьТаблицуКоманд()

	Команды = Новый ТаблицаЗначений;
	
	//Представление команды в пользовательском интерфейсе
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	//Уникальный идентификатор команды или имя макета печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	//Способ вызова команды: "ОткрытиеФормы", "ВызовКлиентскогоМетода", "ВызовСерверногоМетода"
	// "ОткрытиеФормы" - применяется только для отчетов и дополнительных отчетов
	// "ВызовКлиентскогоМетода" - вызов процедуры Печать(), определённой в модуле формы обработки
	// "ВызовСерверногоМетода" - вызов процедуры Печать(), определённой в модуле объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	//Показывать оповещение.
	//Если Истина, требуется показать оповещение при начале и при завершении работы обработки. 
	//Имеет смысл только при запуске обработки без открытия формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	//Дополнительный модификатор команды. 
	//Используется для дополнительных обработок печатных форм на основе табличных макетов.
	//Для таких команд должен содержать строку ПечатьMXL
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));

	Возврат Команды;

КонецФункции

// Вспомогательная процедура.
//
Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ВызовСерверногоМетода", ПоказыватьОповещение = Ложь, Модификатор = "ПечатьMXL")

	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры