
// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыСчетаНаОплатуПокупателю()
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ОбщегоНазначенияБПВызовСервера.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("ЗаказПокупателя");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Номер,
	|	Реквизиты.Дата,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.Организация,
	|	Реквизиты.ПодразделениеОрганизации,
	|	Реквизиты.СтруктурнаяЕдиница,
	|	Реквизиты.СтруктурнаяЕдиница.ТекстКорреспондента КАК ТекстКорреспондента,
	|	Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов КАК БанкДляРасчетов,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.Наименование + "" "" + Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.Город
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк.Наименование + "" "" + Реквизиты.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК НаименованиеБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк
	|	КОНЕЦ КАК БанкПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.Код
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк.Код
	|	КОНЕЦ КАК БикБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.КоррСчет
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк.КоррСчет
	|	КОНЕЦ КАК СчетБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.Город
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК ГородБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.Банк.КоррСчет
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.НомерСчета
	|	КОНЕЦ КАК НомерСчетаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА "" р/с "" + Реквизиты.СтруктурнаяЕдиница.НомерСчета + "" в "" + Реквизиты.СтруктурнаяЕдиница.Банк.Наименование + "" "" + Реквизиты.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК БанкТекстКорресподента,
	|	Реквизиты.Контрагент КАК Покупатель,
	|	Реквизиты.Организация КАК Руководители,
	|	Реквизиты.Организация КАК Поставщик,
	|	Реквизиты.ОрганизацияПолучатель КАК Получатель,
	|	Реквизиты.СуммаДокумента,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.СуммаВключаетНДС,
	|	ЗаказПокупателя.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателя.Номенклатура.НаименованиеПолное КАК Товар,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ЗаказПокупателя.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА ЗаказПокупателя.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ КАК Артикул,
	|	ЗаказПокупателя.Количество КАК Количество,
	|	ЗаказПокупателя.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|	ЗаказПокупателя.Цена КАК Цена,
	|	ЗаказПокупателя.Сумма КАК Сумма,
	|	ЗаказПокупателя.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателя.НомерСтроки КАК НомерСтроки,
	|	1 КАК ID
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю.Товары КАК ЗаказПокупателя
	|		ПО (Реквизиты.Ссылка = ЗаказПокупателя.Ссылка)
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Номер,
	|	Реквизиты.Дата,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.Организация,
	|	Реквизиты.ПодразделениеОрганизации,
	|	Реквизиты.СтруктурнаяЕдиница,
	|	Реквизиты.СтруктурнаяЕдиница.ТекстКорреспондента КАК ТекстКорреспондента,
	|	Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов КАК БанкДляРасчетов,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.Наименование + "" "" + Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.Город
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк.Наименование + "" "" + Реквизиты.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК НаименованиеБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк
	|	КОНЕЦ КАК БанкПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.Код
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк.Код
	|	КОНЕЦ КАК БикБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.КоррСчет
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк.КоррСчет
	|	КОНЕЦ КАК СчетБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.Город
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК ГородБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.Банк.КоррСчет
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.НомерСчета
	|	КОНЕЦ КАК НомерСчетаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА "" р/с "" + Реквизиты.СтруктурнаяЕдиница.НомерСчета + "" в "" + Реквизиты.СтруктурнаяЕдиница.Банк.Наименование + "" "" + Реквизиты.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК БанкТекстКорресподента,
	|	Реквизиты.Контрагент,
	|	Реквизиты.Организация,
	|	Реквизиты.Организация,
	|	Реквизиты.ОрганизацияПолучатель,
	|	Реквизиты.СуммаДокумента,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.СуммаВключаетНДС,
	|	"+ ЧастьЗапросаДляВыбораСодержанияУслуг +",
	|	"+ ЧастьЗапросаДляВыбораСодержанияУслуг +",
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ЗаказПокупателя.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА ЗаказПокупателя.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ,
	|	ЗаказПокупателя.Количество,
	|	ЗаказПокупателя.Номенклатура.ЕдиницаИзмерения.Наименование,
	|	ЗаказПокупателя.Цена,
	|	ЗаказПокупателя.Сумма,
	|	ЗаказПокупателя.СуммаНДС,
	|	ЗаказПокупателя.НомерСтроки,
	|	2
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю.Услуги КАК ЗаказПокупателя
	|		ПО (ЗаказПокупателя.Ссылка = Реквизиты.Ссылка)
	|ГДЕ
	|	Реквизиты.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки";

	Возврат ТекстЗапроса;

КонецФункции

// Функция формирует табличный документ с печатной формой счета
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьДокумента(МассивОбъектов, ОбъектыПечати)

	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб			= Истина;
	ТабДокумент.ПолеСверху			= 10;
	ТабДокумент.ПолеСнизу			= 10;
	ТабДокумент.ПолеСправа			= 0;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаТоваров_М15";
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабДокумент.ПолеСлева          = 0;
	Иначе
		ТабДокумент.ПолеСлева          = 10;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПередачаТоваров.Ссылка КАК Ссылка,
	|	ПередачаТоваров.Номенклатура КАК Номенклатура,
	|	ПередачаТоваров.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПередачаТоваров.Количество КАК КоличествоПринято,
	|	ПередачаТоваров.СчетУчета.Представление КАК СчетУчета,
	|	ПередачаТоваров.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВложенныйЗапрос
	|ИЗ
	|	Документ.ПередачаТоваров.Товары КАК ПередачаТоваров
	|ГДЕ
	|	ПередачаТоваров.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПередачаТоваров.Ссылка КАК Ссылка,
	|	ПередачаТоваров.Номер КАК НомерДокумента,
	|	ПередачаТоваров.Дата КАК ДатаДокумента,
	|	ПередачаТоваров.Дата КАК ДатаНач,
	|	ПередачаТоваров.Дата КАК ДатаКон,
	|	ПередачаТоваров.Дата КАК ДатаСоставления,
	|	ПередачаТоваров.Организация КАК Организация,
	|	ПередачаТоваров.Склад КАК Склад,
	|	ПередачаТоваров.Склад.Наименование КАК СкладНаименование,
	|	ПередачаТоваров.ВалютаДокумента КАК ВалютаДокумента,
	|	ПередачаТоваров.Контрагент.Код КАК КонтрагентКод,
	|	ПередачаТоваров.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ПередачаТоваров.Контрагент КАК Контрагент,
	|	ПередачаТоваров.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПередачаТоваров.ДоговорКонтрагента.Наименование КАК ДоговорКонтрагентаНаименование,
	|	ПередачаТоваров.ДоговорКонтрагента.Номер КАК ДоговорКонтрагентаНомер,
	|	ПередачаТоваров.ДоговорКонтрагента.Дата КАК ДоговорКонтрагентаДата
	|ИЗ
	|	Документ.ПередачаТоваров КАК ПередачаТоваров
	|ГДЕ
	|	ПередачаТоваров.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПередачаТоваров.Дата,
	|	ПередачаТоваров.Ссылка
	|ИТОГИ
	|	МИНИМУМ(ДатаНач),
	|	МАКСИМУМ(ДатаКон)
	|ПО
	|	ОБЩИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Ссылка.Номер КАК НомерДокумента,
	|	ВложенныйЗапрос.Ссылка.Дата КАК ДатаДокумента,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ВложенныйЗапрос.Номенклатура.Артикул
	|		ИНАЧЕ ВложенныйЗапрос.Номенклатура.Код
	|	КОНЕЦ КАК НоменклатурныйНомер,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ВложенныйЗапрос.КоличествоПринято КАК Количество,
	|	ВложенныйЗапрос.СчетУчета КАК СчетУчета
	|ИЗ
	|	ВложенныйЗапрос КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ДатаДокумента,
	|	НомерСтроки";

	Результат = Запрос.ВыполнитьПакет();
	ШапкаИтоги= Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВсеСтроки = Результат[2].Выгрузить(ОбходРезультатаЗапроса.Прямой);
	ВсеСтроки.Индексы.Добавить("Ссылка,НомерСтроки");

	//Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_М15");
	Макет = ЭтотОбъект.ПолучитьМакет("ПФ_MXL_М15");

	СтруктураПоиска = Новый Структура();
	
	Если ШапкаИтоги.Следующий() Тогда
	
		ДатаНач = ?(ЗначениеЗаполнено(ШапкаИтоги.ДатаНач), ШапкаИтоги.ДатаНач, '00010101');
		ДатаКон	= ?(ЗначениеЗаполнено(ШапкаИтоги.ДатаКон), ШапкаИтоги.ДатаКон, '00010101');
	
		ТаблицаСуммСписанияПоДокументам = БухгалтерскийУчетПереопределяемый.ПолучитьСуммуСписанияАктивов(МассивОбъектов, ДатаНач, ДатаКон);
		
		ПервыйДокумент = Истина;

		Шапка = ШапкаИтоги.Выбрать();
		Пока Шапка.Следующий() Цикл

			Если Не ПервыйДокумент Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;

			ПервыйДокумент = Ложь;
			// Запомним номер строки, с которой начали выводить текущий документ.
			НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

			// Выводим общие реквизиты шапки
			СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаСоставления);

			ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");

			ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
			ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации);
			ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
			ОбластьМакетаШапка.Параметры.НомерДокумента           = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.НомерДокумента, Истина, Ложь);

			СведенияОКонтрагенте     = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаСоставления);
			ПредставлениеКонтрагента = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
			ОбластьМакетаШапка.Параметры.КонтрагентНаименование = ПредставлениеКонтрагента;
			ОбластьМакетаШапка.Параметры.Получатель             = ПредставлениеКонтрагента;
			ОбластьМакетаШапка.Параметры.Основание              = Шапка.ДоговорКонтрагентаНаименование;

			ТабДокумент.Вывести(ОбластьМакетаШапка);

			Запрос.УстановитьПараметр("ТекущийДокумент", Шапка.Ссылка);
			СтрокиТоваров = ВсеСтроки.НайтиСтроки(Новый Структура("Ссылка", Шапка.Ссылка));

			// Выводим заголовок таблицы
			ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

			НомерСтраницы   = 1;
			КоличествоСтрок = СтрокиТоваров.Количество();

			// Инициализация итогов в документе
			ИтогоКоличествоПринято = 0;
			ИтогоСуммаБезНДС       = 0;
			ИтогоСуммаНДС          = 0;
			ИтогоВсегоСНДС         = 0;
			НомерСтроки            = 0;

			// Выводим многострочную часть документа
			Для Каждого ТекущаяСтрока Из СтрокиТоваров Цикл
			
				НомерСтроки = НомерСтроки + 1;
				
				СтруктураПоиска.Вставить("Регистратор", 	Шапка.Ссылка);
				СтруктураПоиска.Вставить("Номенклатура", 	ТекущаяСтрока.Номенклатура);
				НайденныеСтроки = ТаблицаСуммСписанияПоДокументам.НайтиСтроки(СтруктураПоиска);
				
				Количество = ТекущаяСтрока.Количество;
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					ВсегоСНДС = 0;
					Цена = 0;
				Иначе
					СтрокаСуммСписания = НайденныеСтроки[0];
					Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
					ВсегоСНДС = Окр(Цена * Количество, 2, 1);
				КонецЕсли;
				
				ОбластьМакетаСтрока.Параметры.Заполнить(ТекущаяСтрока);
				
				ОбластьМакетаСтрока.Параметры.СуммаСНДС           = ВсегоСНДС;
				ОбластьМакетаСтрока.Параметры.СуммаБезНДС         = ВсегоСНДС;
				ОбластьМакетаСтрока.Параметры.СуммаНДС            = 0;
				ОбластьМакетаСтрока.Параметры.Цена                = Цена;
				ОбластьМакетаСтрока.Параметры.ТоварНаименование   = СокрЛП(ТекущаяСтрока.ТоварНаименование);
				ОбластьМакетаСтрока.Параметры.КоррСчет            = СокрЛП(ТекущаяСтрока.СчетУчета);
				
				// Проверим вывод
				СтрокаСПодвалом = Новый Массив;
				Если НомерСтроки = 1 Тогда
					СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы); // если первая строка, то должен
				КонецЕсли;                                                   // помещаться заголовок
				СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
				Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
					СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал); // помещаться и подвал документа
				КонецЕсли;

				Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда

					Если КоличествоСтрок > 1 Тогда

						ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

						// Очистим итоги по странице
						ИтогоМестНаСтранице       = 0;
						ИтогоКоличествоНаСтранице = 0;
						ИтогоСуммаНаСтранице      = 0;
						ИтогоНДСНаСтранице        = 0;
						ИтогоСуммаСНДСНаСтранице  = 0;

						// Выведем заголовок таблицы
						НомерСтраницы = НомерСтраницы + 1;
						ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
						ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);

					КонецЕсли;

				КонецЕсли;

				ТабДокумент.Вывести(ОбластьМакетаСтрока);

				ИтогоКоличествоПринято = ИтогоКоличествоПринято + Количество;
				ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС       + ВсегоСНДС;
				ИтогоВсегоСНДС         = ИтогоВсегоСНДС         + ВсегоСНДС;

			КонецЦикла;

			// Выводим итоги по документу
			ОбластьМакетаПодвал.Параметры.Заполнить(Шапка);

			ПодразделениеОтветственныхЛиц = Шапка.ПодразделениеОрганизации;

			Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Организация, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
			Руководитель  = Руководители.РуководительПредставление;
			Бухгалтер     = Руководители.ГлавныйБухгалтерПредставление;

			//ОбластьМакетаПодвал.Параметры.ФИОРуководителя   		= Руководитель;
			//ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера 		= Бухгалтер;
			//ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя	= Руководители.РуководительДолжностьПредставление;
			//ОбластьМакетаПодвал.Параметры.ДолжностьГлавБух		= Руководители.ГлавныйБухгалтерДолжностьПредставление;
			
			ОбластьМакетаПодвал.Параметры.ФИОРуководителя   		= "Дремин А.А";
			ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера 		= "Дремин А.А";
			ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя	= "Индивидуальный предприниматель";
			ОбластьМакетаПодвал.Параметры.ДолжностьГлавБух		= "Индивидуальный предприниматель";

			//Если Шапка.Склад <> Справочники.Склады.ПустаяСсылка() Тогда 
			//	МОЛ = ОтветственныеЛицаБП.ОтветственноеЛицоНаСкладе(Шапка.Склад, Шапка.ДатаДокумента);
			//	ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация, МОЛ, Шапка.ДатаДокумента);
			//	ОбластьМакетаПодвал.Параметры.ДолжностьКладовщика = ДанныеФизЛица.Должность;
			//	ОбластьМакетаПодвал.Параметры.ФИОКладовщика = ДанныеФизЛица.Представление;
			//КонецЕсли;
				ОбластьМакетаПодвал.Параметры.ДолжностьКладовщика = "Индивидуальный предприниматель";
				ОбластьМакетаПодвал.Параметры.ФИОКладовщика = "Дремин А.А";

			ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
			ОбластьМакетаПодвал.Параметры.СуммаПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ИтогоВсегоСНДС, Шапка.ВалютаДокумента);
			ОбластьМакетаПодвал.Параметры.ИтогНДС = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(0, Шапка.ВалютаДокумента);

			ТабДокумент.Вывести(ОбластьМакетаПодвал);

			// В табличном документе зададим имя области, в которую был
			// выведен объект. Нужно для возможности печати покомплектно.
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

		КонецЦикла;
	
	КонецЕсли;
	Возврат ТабДокумент;

КонецФункции

// Экспортная процедура печати, вызываемая из основной программы
//
// Параметры:
// ВХОДЯЩИЕ:
//  МассивОбъектовНазначения - Массив - список объектов ссылочного типа для печати документа
//                 Как правило, содержит один элемент с ссылкой на вызвавший форму объект (документ, справочник)
//
// ИСХОДЯЩИЕ:
//  КоллекцияПечатныхФорм - ТаблицаЗначений - таблица сформированных табличных документов.
//                 Как правило, содержит одну строку с именем текущей печатной формы
//  ОбъектыПечати - СписокЗначений - список объектов печати. 
//  ПараметрыВывода - Структура - Параметры сформированных табличных документов. Содержит поля:
//  						ДоступнаПечатьПоКомплектно - булево - по умолчанию Ложь
//							ПолучательЭлектронногоПисьма
//							ОтправительЭлектронногоПисьма
//
Процедура Печать(МассивОбъектовНазначения, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М15СПодвалом") Тогда
		 УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М15СПодвалом", "М-15 с подвалом",
		 	ПечатьДокумента(МассивОбъектовНазначения, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

//
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ОБРАБОТКИ
//

// Сервисная экспортная функция. Вызывается в основной программе при регистрации обработки в информационной базе
// Возвращает структуру с параметрами регистрации
//
// Возвращаемое значение:
//		Структура с полями:
//			Вид - строка, вид обработки, один из возможных: "ДополнительнаяОбработка", "ДополнительныйОтчет", 
//					"ЗаполнениеОбъекта", "Отчет", "ПечатнаяФорма", "СозданиеСвязанныхОбъектов"
//			Назначение - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					Например, "Документ.СчетЗаказ" или "Справочник.*". Параметр имеет смысл только для назначаемых обработок, для глобальных может не задаваться.
//			Наименование - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//			Информация  - строка - Краткая информация или описание по обработке.
//			Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//			БезопасныйРежим - булево - Принимает значение Истина или Ложь, в зависимости от того, требуется ли устанавливать или отключать безопасный режим 
//							исполнения обработок. Если истина, обработка будет запущена в безопасном режиме. 
//
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	//Инициализируем структуру с параметрами регистрации
	
	//Определяем список объектов, вызывающих обработку
	ОбъектыНазначенияФормы = Новый Массив;
	ОбъектыНазначенияФормы.Добавить("Документ.ПередачаТоваров");
	
	ПараметрыРегистрации = ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы);
	ПараметрыРегистрации.Версия = "1.1";

	//Определяем команды для печати формы
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();

	ДобавитьКоманду(ТаблицаКоманд,
		"М-15 с подвалом", // Представление команды в пользовательском интерфейсе
		"М15СПодвалом",				// Уникальный идентификатор команды
	);

	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);

	Возврат ПараметрыРегистрации;

КонецФункции

//
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ОБРАБОТКИ
//

// Формирует структуру с параметрами регистрации регистрации обработки в информационной базе
//
// Параметры:
//	ОбъектыНазначенияФормы - Массив - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					или строка с именем объекта метаданных 
//	НаименованиеОбработки - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//							Необязательно, по умолчанию синоним или представление объекта
//	Информация  - строка - Краткая информация или описание обработки.
//							Необязательно, по умолчанию комментарий объекта
//	Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//
//
// Возвращаемое значение:
//		Структура
//
Функция ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы = Неопределено, НаименованиеОбработки = "", Информация = "", Версия = "1.0")

	Если ТипЗнч(ОбъектыНазначенияФормы) = Тип("Строка") Тогда
		ОбъектНазначенияФормы = ОбъектыНазначенияФормы;
		ОбъектыНазначенияФормы = Новый Массив;
		ОбъектыНазначенияФормы.Добавить(ОбъектНазначенияФормы);
	КонецЕсли; 
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Назначение", ОбъектыНазначенияФормы);
	
	Если Не ЗначениеЗаполнено(НаименованиеОбработки) Тогда
		НаименованиеОбработки = ЭтотОбъект.Метаданные().Представление();
	КонецЕсли; 
	ПараметрыРегистрации.Вставить("Наименование", НаименованиеОбработки);
	
	Если Не ЗначениеЗаполнено(Информация) Тогда
		Информация = ЭтотОбъект.Метаданные().Комментарий;
	КонецЕсли; 
	ПараметрыРегистрации.Вставить("Информация", Информация);
	
	ПараметрыРегистрации.Вставить("Версия", Версия);

	Возврат ПараметрыРегистрации;

КонецФункции

// Формирует таблицу значений с командами печати
//	
// Возвращаемое значение:
//		ТаблицаЗначений
//
Функция ПолучитьТаблицуКоманд()

	Команды = Новый ТаблицаЗначений;
	
	//Представление команды в пользовательском интерфейсе
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	//Уникальный идентификатор команды или имя макета печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	//Способ вызова команды: "ОткрытиеФормы", "ВызовКлиентскогоМетода", "ВызовСерверногоМетода"
	// "ОткрытиеФормы" - применяется только для отчетов и дополнительных отчетов
	// "ВызовКлиентскогоМетода" - вызов процедуры Печать(), определённой в модуле формы обработки
	// "ВызовСерверногоМетода" - вызов процедуры Печать(), определённой в модуле объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	//Показывать оповещение.
	//Если Истина, требуется показать оповещение при начале и при завершении работы обработки. 
	//Имеет смысл только при запуске обработки без открытия формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	//Дополнительный модификатор команды. 
	//Используется для дополнительных обработок печатных форм на основе табличных макетов.
	//Для таких команд должен содержать строку ПечатьMXL
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));

	Возврат Команды;

КонецФункции

// Вспомогательная процедура.
//
Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ВызовСерверногоМетода", ПоказыватьОповещение = Ложь, Модификатор = "ПечатьMXL")

	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры