
// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыСчетаНаОплатуПокупателю()
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ОбщегоНазначенияБПВызовСервера.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("ЗаказПокупателя");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Номер,
	|	Реквизиты.Дата,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.Организация,
	|	Реквизиты.ПодразделениеОрганизации,
	|	Реквизиты.СтруктурнаяЕдиница,
	|	Реквизиты.СтруктурнаяЕдиница.ТекстКорреспондента КАК ТекстКорреспондента,
	|	Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов КАК БанкДляРасчетов,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.Наименование + "" "" + Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.Город
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк.Наименование + "" "" + Реквизиты.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК НаименованиеБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк
	|	КОНЕЦ КАК БанкПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.Код
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк.Код
	|	КОНЕЦ КАК БикБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.КоррСчет
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк.КоррСчет
	|	КОНЕЦ КАК СчетБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.Город
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК ГородБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.Банк.КоррСчет
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.НомерСчета
	|	КОНЕЦ КАК НомерСчетаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА "" р/с "" + Реквизиты.СтруктурнаяЕдиница.НомерСчета + "" в "" + Реквизиты.СтруктурнаяЕдиница.Банк.Наименование + "" "" + Реквизиты.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК БанкТекстКорресподента,
	|	Реквизиты.Контрагент КАК Покупатель,
	|	Реквизиты.Организация КАК Руководители,
	|	Реквизиты.Организация КАК Поставщик,
	|	Реквизиты.ОрганизацияПолучатель КАК Получатель,
	|	Реквизиты.СуммаДокумента,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.СуммаВключаетНДС,
	|	ЗаказПокупателя.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателя.Номенклатура.НаименованиеПолное КАК Товар,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ЗаказПокупателя.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА ЗаказПокупателя.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ КАК Артикул,
	|	ЗаказПокупателя.Количество КАК Количество,
	|	ЗаказПокупателя.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|	ЗаказПокупателя.Цена КАК Цена,
	|	ЗаказПокупателя.Сумма КАК Сумма,
	|	ЗаказПокупателя.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателя.НомерСтроки КАК НомерСтроки,
	|	1 КАК ID
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю.Товары КАК ЗаказПокупателя
	|		ПО (Реквизиты.Ссылка = ЗаказПокупателя.Ссылка)
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Номер,
	|	Реквизиты.Дата,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.Организация,
	|	Реквизиты.ПодразделениеОрганизации,
	|	Реквизиты.СтруктурнаяЕдиница,
	|	Реквизиты.СтруктурнаяЕдиница.ТекстКорреспондента КАК ТекстКорреспондента,
	|	Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов КАК БанкДляРасчетов,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.Наименование + "" "" + Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.Город
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк.Наименование + "" "" + Реквизиты.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК НаименованиеБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк
	|	КОНЕЦ КАК БанкПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.Код
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк.Код
	|	КОНЕЦ КАК БикБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.КоррСчет
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк.КоррСчет
	|	КОНЕЦ КАК СчетБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов.Город
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК ГородБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА Реквизиты.СтруктурнаяЕдиница.Банк.КоррСчет
	|		ИНАЧЕ Реквизиты.СтруктурнаяЕдиница.НомерСчета
	|	КОНЕЦ КАК НомерСчетаПолучателя,
	|	ВЫБОР
	|		КОГДА Реквизиты.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА "" р/с "" + Реквизиты.СтруктурнаяЕдиница.НомерСчета + "" в "" + Реквизиты.СтруктурнаяЕдиница.Банк.Наименование + "" "" + Реквизиты.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК БанкТекстКорресподента,
	|	Реквизиты.Контрагент,
	|	Реквизиты.Организация,
	|	Реквизиты.Организация,
	|	Реквизиты.ОрганизацияПолучатель,
	|	Реквизиты.СуммаДокумента,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.СуммаВключаетНДС,
	|	"+ ЧастьЗапросаДляВыбораСодержанияУслуг +",
	|	"+ ЧастьЗапросаДляВыбораСодержанияУслуг +",
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ЗаказПокупателя.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА ЗаказПокупателя.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ,
	|	ЗаказПокупателя.Количество,
	|	ЗаказПокупателя.Номенклатура.ЕдиницаИзмерения.Наименование,
	|	ЗаказПокупателя.Цена,
	|	ЗаказПокупателя.Сумма,
	|	ЗаказПокупателя.СуммаНДС,
	|	ЗаказПокупателя.НомерСтроки,
	|	2
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю.Услуги КАК ЗаказПокупателя
	|		ПО (ЗаказПокупателя.Ссылка = Реквизиты.Ссылка)
	|ГДЕ
	|	Реквизиты.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки";

	Возврат ТекстЗапроса;

КонецФункции

Функция ПредставлениеПодразделенияЗатрат(Выборка)
	
	Если ЗначениеЗаполнено(Выборка.ПодразделениеЗатратНаименованиеПолное) Тогда
		Возврат СокрЛП(Выборка.ПодразделениеЗатратНаименованиеПолное);
	Иначе
		Возврат Выборка.ПодразделениеЗатратНаименование;
	КонецЕсли;
	
КонецФункции

Функция М11ТекстЗапросаШапки()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТребованиеНакладная.Номер,
	|	ТребованиеНакладная.Дата КАК Дата,
	|	ТребованиеНакладная.Дата КАК ДатаНач,
	|	ТребованиеНакладная.Дата КАК ДатаКон,
	|	ТребованиеНакладная.Организация,
	|	ТребованиеНакладная.Организация.КодПоОКПО КАК КодПоОКПО,
	|	ТребованиеНакладная.Ссылка,
	|	ТребованиеНакладная.Контрагент,
	|	ТребованиеНакладная.Контрагент.Представление КАК ФИОПолучателя,
	|	ТребованиеНакладная.ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ТребованиеНакладная.ПодразделениеОрганизации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ТребованиеНакладная.ПодразделениеОрганизации.Наименование
	|		ИНАЧЕ ТребованиеНакладная.ПодразделениеОрганизации.НаименованиеПолное
	|	КОНЕЦ КАК ПредставлениеПодразделения,
	|	ТребованиеНакладная.Склад,
	|	ТребованиеНакладная.СчетЗатрат,
	|	ТребованиеНакладная.СчетЗатрат.Код КАК СчетЗатратКод,
	|	ТребованиеНакладная.ПодразделениеЗатрат,
	|	ТребованиеНакладная.ПодразделениеЗатрат.Наименование КАК ПодразделениеЗатратНаименование,
	|	ТребованиеНакладная.ПодразделениеЗатрат.НаименованиеПолное КАК ПодразделениеЗатратНаименованиеПолное,
	|	ТребованиеНакладная.СчетаУчетаЗатратВТаблице,
	|	ТребованиеНакладная.Материалы.(
	|		Номенклатура КАК Материал,
	|		ВЫБОР
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|				ТОГДА ТребованиеНакладная.Материалы.Номенклатура.Артикул
	|			ИНАЧЕ ТребованиеНакладная.Материалы.Номенклатура.Код
	|		КОНЕЦ КАК Код,
	|		ВЫБОР
	|			КОГДА ТребованиеНакладная.Материалы.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|				ТОГДА ТребованиеНакладная.Материалы.Номенклатура.Наименование
	|			ИНАЧЕ ТребованиеНакладная.Материалы.Номенклатура.НаименованиеПолное
	|		КОНЕЦ КАК Имя,
	|		Номенклатура.ЕдиницаИзмерения КАК ЕдИзм,
	|		Номенклатура.ЕдиницаИзмерения.Код КАК ЕдИзмКод,
	|		Счет КАК Счет,
	|		ЕдиницаИзмерения КАК ЕдИзмМест,
	|		Количество,
	|		КоличествоМест,
	|		ДокументОприходования КАК Партия,
	|		ПодразделениеЗатрат КАК ПодразделениеЗатрат,
	|		ПодразделениеЗатрат.Наименование КАК ПодразделениеЗатратНаименование,
	|		ПодразделениеЗатрат.НаименованиеПолное КАК ПодразделениеЗатратНаименованиеПолное,
	|		СчетЗатрат.Код КАК СчетЗатратКод
	|	),
	|	ТребованиеНакладная.МатериалыЗаказчика.(
	|		Номенклатура КАК Материал,
	|		ВЫБОР
	|			КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|				ТОГДА ТребованиеНакладная.МатериалыЗаказчика.Номенклатура.Артикул
	|			ИНАЧЕ ТребованиеНакладная.МатериалыЗаказчика.Номенклатура.Код
	|		КОНЕЦ КАК Код,
	|		ВЫБОР
	|			КОГДА ТребованиеНакладная.МатериалыЗаказчика.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|				ТОГДА ТребованиеНакладная.МатериалыЗаказчика.Номенклатура.Наименование
	|			ИНАЧЕ ТребованиеНакладная.МатериалыЗаказчика.Номенклатура.НаименованиеПолное
	|		КОНЕЦ КАК Имя,
	|		Номенклатура.ЕдиницаИзмерения КАК ЕдИзм,
	|		Номенклатура.ЕдиницаИзмерения.Код КАК ЕдИзмКод,
	|		Счет КАК Счет,
	|		ЕдиницаИзмерения КАК ЕдИзмМест,
	|		Количество,
	|		КоличествоМест
	|	)
	|ИЗ
	|	Документ.ТребованиеНакладная КАК ТребованиеНакладная
	|ГДЕ
	|	ТребованиеНакладная.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТребованиеНакладная.Ссылка
	|ИТОГИ
	|	МИНИМУМ(ДатаНач),
	|	МАКСИМУМ(ДатаКон)
	|ПО
	|	ОБЩИЕ";	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЦенаСписания(ТаблицаСуммСписанияПоДокументам, Номенклатура, Партия)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",  Номенклатура);
	СтруктураПоиска.Вставить("Партия",        ?(ЗначениеЗаполнено(Партия), Партия, Неопределено));
	
	НайденныеСтроки = ТаблицаСуммСписанияПоДокументам.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат 0;
	Иначе
		СтрокаСуммСписания = НайденныеСтроки[0];
		Если СтрокаСуммСписания.Количество = 0 Тогда
			Возврат 0;
		Иначе
			Возврат СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ТаблицаСуммСписанияПоДокументу(Знач ТаблицаСуммСписанияПоДокументам, Регистратор, ТаблицаМатериалы)

	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("Номенклатура");
	ТаблицаРезультата.Колонки.Добавить("Партия");
	ТаблицаРезультата.Колонки.Добавить("Количество");
	ТаблицаРезультата.Колонки.Добавить("Сумма");
	
	ТаблицаСуммСписанияПоДокументу = ТаблицаСуммСписанияПоДокументам.Скопировать(Новый Структура("Регистратор", Регистратор));
	
	СтруктураПоиска = Новый Структура("Номенклатура, Партия");
	
	// Сначала заполним сумму оценки по строкам с заполненной партией.
	Для каждого СтрокаМатериал Из ТаблицаМатериалы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаМатериал.Партия) Тогда
			Продолжить;
		КонецЕсли; 
	
		СтруктураПоиска.Вставить("Номенклатура",  СтрокаМатериал.Материал);
		СтруктураПоиска.Вставить("Партия",        СтрокаМатериал.Партия);
		
		НайденныеСтроки = ТаблицаСуммСписанияПоДокументу.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			// Если не нашли партии в таблице сумм - очищаем ее в таблице материалов, чтобы оценка прошла "по средней"
			СтрокаМатериал.Партия = Неопределено;
		Иначе
			СтрокаСуммСписания = НайденныеСтроки[0];
			Если СтрокаСуммСписания.Количество < СтрокаМатериал.Количество  Тогда
				СтрокаМатериал.Партия = Неопределено;
			Иначе
				
				КоличествоПоСтроке = Мин(СтрокаСуммСписания.Количество, СтрокаМатериал.Количество);
				СуммаПоСтроке      = Окр(СтрокаСуммСписания.Сумма*КоличествоПоСтроке/СтрокаСуммСписания.Количество, 2);
				
				НоваяСтрока = ТаблицаРезультата.Добавить();
				
				НоваяСтрока.Номенклатура = СтрокаМатериал.Материал;
				НоваяСтрока.Партия       = СтрокаМатериал.Партия;
				НоваяСтрока.Количество   = КоличествоПоСтроке;
				НоваяСтрока.Сумма        = СуммаПоСтроке;
				
				СтрокаСуммСписания.Сумма      = СтрокаСуммСписания.Сумма - НоваяСтрока.Сумма;
				СтрокаСуммСписания.Количество = СтрокаСуммСписания.Количество - НоваяСтрока.Количество;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// По незаполненным партиям рассчитаем среднюю
	Для каждого СтрокаСуммСписания Из ТаблицаСуммСписанияПоДокументу Цикл
		Если СтрокаСуммСписания.Количество <> 0 Тогда 
			НоваяСтрока = ТаблицаРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСуммСписания, ,"Партия");
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаРезультата.Свернуть("Номенклатура, Партия", "Количество, Сумма");
	ТаблицаРезультата.Индексы.Добавить("Номенклатура, Партия");
	
	Возврат ТаблицаРезультата;
КонецФункции

// Функция формирует табличный документ с печатной формой счета
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьДокумента(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб			= Истина;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ТребованиеНакладная_М11";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	Запрос.Текст = М11ТекстЗапросаШапки();
	
	ШапкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ШапкаИтоги.Следующий() Тогда
	
		ДатаНач = ?(ЗначениеЗаполнено(ШапкаИтоги.ДатаНач), ШапкаИтоги.ДатаНач, '00010101');
		ДатаКон = ?(ЗначениеЗаполнено(ШапкаИтоги.ДатаКон), ШапкаИтоги.ДатаКон, '00010101');
		
		// Из общей таблицы сумм списания получим таблицу по документу с учетом партий указанных в табличной части.
		ТаблицаСуммСписанияПоДокументам = БухгалтерскийУчетПереопределяемый.ПолучитьСуммуСписанияАктивовПоПартиям(МассивОбъектов, ДатаНач, ДатаКон);
		
		ПервыйДокумент = Истина;
		Шапка = ШапкаИтоги.Выбрать();
		
		Пока Шапка.Следующий() Цикл
			
			Материалы           = Шапка.Материалы.Выгрузить();
			МатериалыЗаказчиков = Шапка.МатериалыЗаказчика.Выгрузить();
			
			ТаблицаСуммСписанияПоДокументу = ТаблицаСуммСписанияПоДокументу(ТаблицаСуммСписанияПоДокументам, Шапка.Ссылка, Материалы);
			
			Если Не ПервыйДокумент Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
			
			Макет = ЭтотОбъект.ПолучитьМакет("ПФ_MXL_М11");

			Область = Макет.ПолучитьОбласть("Шапка");
			
			Параметры = Новый Структура;
			
			Параметры.Вставить("Заголовок",  "ТРЕБОВАНИЕ-НАКЛАДНАЯ № " + ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.Номер, Истина, Ложь));
			Параметры.Вставить("КодОКПО",    Шапка.КодПоОКПО);
			СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
			ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				СведенияОбОрганизации, 
				"НаименованиеДляПечатныхФорм,");
			Параметры.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
			Параметры.Вставить("ДатаСоставления",          Формат(Шапка.Дата, "ДФ=dd.MM.yy"));
			Параметры.Вставить("Склад",                    Шапка.Склад);
			
			Если Не Шапка.СчетаУчетаЗатратВТаблице Тогда
				Параметры.Вставить("ПредставлениеПодразделения", ПредставлениеПодразделенияЗатрат(Шапка));
				Параметры.Вставить("КоррСчет",Шапка.СчетЗатратКод);
			Иначе
				
				// Может быть несколько, если счета учета затрат - в таблице
				Получатели = Новый Соответствие;
				СчетаУчетаЗатрат = Новый Соответствие;
				Для Каждого СтрокаТабличнойЧасти Из Материалы Цикл
					Получатели.Вставить(СтрокаТабличнойЧасти.ПодразделениеЗатрат, ПредставлениеПодразделенияЗатрат(СтрокаТабличнойЧасти));
					СчетаУчетаЗатрат.Вставить(СтрокаТабличнойЧасти.СчетЗатратКод);
				КонецЦикла;
				
				Если Получатели.Количество() = 1 Тогда
					Для Каждого КлючИЗначение Из Получатели Цикл
						Параметры.Вставить("ПредставлениеПодразделения", КлючИЗначение.Значение);
					КонецЦикла;
				КонецЕсли;
				
				Если СчетаУчетаЗатрат.Количество() = 1 Тогда
					Для Каждого КлючИЗначение Из СчетаУчетаЗатрат Цикл
						Параметры.Вставить("КоррСчет",КлючИЗначение.Ключ);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			Область.Параметры.Заполнить(Параметры);
			ТабДокумент.Вывести(Область);
			
			Область = Макет.ПолучитьОбласть("Строка");
			
			// Поиск сумм списания активов для заполнения Цены и Суммы
			
			Для Каждого СтрокаТЧ Из Материалы Цикл
				
				Параметры = Новый Структура;
				
				Параметры.Вставить("Счет",                         СтрокаТЧ.Счет);
				Параметры.Вставить("МатериалНаименование",         СтрокаТЧ.Имя);
				Параметры.Вставить("НоменклатурныйНомер",          СтрокаТЧ.Код);
				Параметры.Вставить("ЕдиницаИзмеренияНаименование", СтрокаТЧ.ЕдИзм);
				Параметры.Вставить("ЕдиницаИзмеренияКод",          СтрокаТЧ.ЕдИзмКод);
				Параметры.Вставить("Количество",                   СтрокаТЧ.Количество);
				
				Цена = ЦенаСписания(ТаблицаСуммСписанияПоДокументу, СтрокаТЧ.Материал, СтрокаТЧ.Партия);
				
				Параметры.Вставить("Цена",  Цена);
				Параметры.Вставить("Сумма", Цена * СтрокаТЧ.Количество);
				
				Область.Параметры.Заполнить(Параметры);
				ТабДокумент.Вывести(Область);
				
			КонецЦикла;
			
			Для Каждого СтрокаТЧ Из МатериалыЗаказчиков Цикл
				
				Параметры = Новый Структура;
				
				Параметры.Вставить("Счет",                         СтрокаТЧ.Счет);
				Параметры.Вставить("МатериалНаименование",         СтрокаТЧ.Имя);
				Параметры.Вставить("НоменклатурныйНомер",          СтрокаТЧ.Код);
				Параметры.Вставить("ЕдиницаИзмеренияНаименование", СтрокаТЧ.ЕдИзм);
				Параметры.Вставить("ЕдиницаИзмеренияКод",          СтрокаТЧ.ЕдИзмКод);
				Параметры.Вставить("Количество",                   СтрокаТЧ.Количество);
				
				Цена = ЦенаСписания(ТаблицаСуммСписанияПоДокументу, СтрокаТЧ.Материал, Неопределено);
				Параметры.Вставить("Цена",  Цена);
				Параметры.Вставить("Сумма", Цена * СтрокаТЧ.Количество);
				
				Область.Параметры.Заполнить(Параметры);
				ТабДокумент.Вывести(Область);
				
			КонецЦикла;
			
			Область = Макет.ПолучитьОбласть("Подвал");
			
			Если Шапка.Склад <> Справочники.Склады.ПустаяСсылка() Тогда 
				МОЛ = ОтветственныеЛицаБП.ОтветственноеЛицоНаСкладе(Шапка.Склад,Шапка.Дата);
				ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация,МОЛ,Шапка.Дата);
				Область.Параметры.МОЛДолжность = ДанныеФизЛица.Должность;
				Область.Параметры.МОЛФИО = ДанныеФизЛица.Представление;
			КонецЕсли;
			
			Область.Параметры.МОЛДолжность = "Индивидуальный предприниматель";
			Область.Параметры.МОЛФИО = "Дремин А.А.";
			
			ТабДокумент.Вывести(Область);
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ТабДокумент;


КонецФункции

// Экспортная процедура печати, вызываемая из основной программы
//
// Параметры:
// ВХОДЯЩИЕ:
//  МассивОбъектовНазначения - Массив - список объектов ссылочного типа для печати документа
//                 Как правило, содержит один элемент с ссылкой на вызвавший форму объект (документ, справочник)
//
// ИСХОДЯЩИЕ:
//  КоллекцияПечатныхФорм - ТаблицаЗначений - таблица сформированных табличных документов.
//                 Как правило, содержит одну строку с именем текущей печатной формы
//  ОбъектыПечати - СписокЗначений - список объектов печати. 
//  ПараметрыВывода - Структура - Параметры сформированных табличных документов. Содержит поля:
//  						ДоступнаПечатьПоКомплектно - булево - по умолчанию Ложь
//							ПолучательЭлектронногоПисьма
//							ОтправительЭлектронногоПисьма
//
Процедура Печать(МассивОбъектовНазначения, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М11СПодвалом") Тогда
		 //УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М115СПодвалом", "М-11 с подвалом",
		 //	ПечатьДокумента(МассивОбъектовНазначения, ОбъектыПечати));
		 //   
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М11СПодвалом", "М-11 с подвалом",
			ПечатьДокумента(МассивОбъектовНазначения, ОбъектыПечати));

	КонецЕсли;
	
КонецПроцедуры

//
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ОБРАБОТКИ
//

// Сервисная экспортная функция. Вызывается в основной программе при регистрации обработки в информационной базе
// Возвращает структуру с параметрами регистрации
//
// Возвращаемое значение:
//		Структура с полями:
//			Вид - строка, вид обработки, один из возможных: "ДополнительнаяОбработка", "ДополнительныйОтчет", 
//					"ЗаполнениеОбъекта", "Отчет", "ПечатнаяФорма", "СозданиеСвязанныхОбъектов"
//			Назначение - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					Например, "Документ.СчетЗаказ" или "Справочник.*". Параметр имеет смысл только для назначаемых обработок, для глобальных может не задаваться.
//			Наименование - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//			Информация  - строка - Краткая информация или описание по обработке.
//			Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//			БезопасныйРежим - булево - Принимает значение Истина или Ложь, в зависимости от того, требуется ли устанавливать или отключать безопасный режим 
//							исполнения обработок. Если истина, обработка будет запущена в безопасном режиме. 
//
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	//Инициализируем структуру с параметрами регистрации
	
	//Определяем список объектов, вызывающих обработку
	ОбъектыНазначенияФормы = Новый Массив;
	ОбъектыНазначенияФормы.Добавить("Документ.ТребованиеНакладная");
	
	ПараметрыРегистрации = ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы);
	ПараметрыРегистрации.Версия = "1.1";

	//Определяем команды для печати формы
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();

	ДобавитьКоманду(ТаблицаКоманд,
		"М-11 с подвалом", // Представление команды в пользовательском интерфейсе
		"М11СПодвалом",				// Уникальный идентификатор команды
	);

	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);

	Возврат ПараметрыРегистрации;

КонецФункции

//
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ОБРАБОТКИ
//

// Формирует структуру с параметрами регистрации регистрации обработки в информационной базе
//
// Параметры:
//	ОбъектыНазначенияФормы - Массив - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					или строка с именем объекта метаданных 
//	НаименованиеОбработки - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//							Необязательно, по умолчанию синоним или представление объекта
//	Информация  - строка - Краткая информация или описание обработки.
//							Необязательно, по умолчанию комментарий объекта
//	Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//
//
// Возвращаемое значение:
//		Структура
//
Функция ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы = Неопределено, НаименованиеОбработки = "", Информация = "", Версия = "1.0")

	Если ТипЗнч(ОбъектыНазначенияФормы) = Тип("Строка") Тогда
		ОбъектНазначенияФормы = ОбъектыНазначенияФормы;
		ОбъектыНазначенияФормы = Новый Массив;
		ОбъектыНазначенияФормы.Добавить(ОбъектНазначенияФормы);
	КонецЕсли; 
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Назначение", ОбъектыНазначенияФормы);
	
	Если Не ЗначениеЗаполнено(НаименованиеОбработки) Тогда
		НаименованиеОбработки = ЭтотОбъект.Метаданные().Представление();
	КонецЕсли; 
	ПараметрыРегистрации.Вставить("Наименование", НаименованиеОбработки);
	
	Если Не ЗначениеЗаполнено(Информация) Тогда
		Информация = ЭтотОбъект.Метаданные().Комментарий;
	КонецЕсли; 
	ПараметрыРегистрации.Вставить("Информация", Информация);
	
	ПараметрыРегистрации.Вставить("Версия", Версия);

	Возврат ПараметрыРегистрации;

КонецФункции

// Формирует таблицу значений с командами печати
//	
// Возвращаемое значение:
//		ТаблицаЗначений
//
Функция ПолучитьТаблицуКоманд()

	Команды = Новый ТаблицаЗначений;
	
	//Представление команды в пользовательском интерфейсе
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	//Уникальный идентификатор команды или имя макета печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	//Способ вызова команды: "ОткрытиеФормы", "ВызовКлиентскогоМетода", "ВызовСерверногоМетода"
	// "ОткрытиеФормы" - применяется только для отчетов и дополнительных отчетов
	// "ВызовКлиентскогоМетода" - вызов процедуры Печать(), определённой в модуле формы обработки
	// "ВызовСерверногоМетода" - вызов процедуры Печать(), определённой в модуле объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	//Показывать оповещение.
	//Если Истина, требуется показать оповещение при начале и при завершении работы обработки. 
	//Имеет смысл только при запуске обработки без открытия формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	//Дополнительный модификатор команды. 
	//Используется для дополнительных обработок печатных форм на основе табличных макетов.
	//Для таких команд должен содержать строку ПечатьMXL
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));

	Возврат Команды;

КонецФункции

// Вспомогательная процедура.
//
Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ВызовСерверногоМетода", ПоказыватьОповещение = Ложь, Модификатор = "ПечатьMXL")

	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры