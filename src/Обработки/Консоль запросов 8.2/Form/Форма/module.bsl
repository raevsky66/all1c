Перем мИмяФайла;                        // имя файла запросов
Перем мИмяПути;                         // путь к файлу запорсов

Перем мЗаголовокФормы;                  // заголовок формы

Перем мТекущаяСтрока;                   // текущая(прошлая) строка дерева запросов.
Перем мИдетДобавление;                  // признак добавления
Перем мАктивизированаДобавляемаяЗапись; // признак активизации добавленной записи

Перем мРезЗапроса;                      // результат 

Перем мТаблицаВыборок;                  // таблица настроек выборок из результата
Перем мСписокПоследнихОткрытыхФайлов;	// список последних открытых файлов

Перем мТаблицаЗагружена;                // признак того, что рез-т запроса загружен в табличное поле
Перем мСводнаяТаблицаЗагружена;         // признак того, что рез-т запроса загружен в сводную таблицу

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//загружает список запросов из старых открытых ранее файлов
//
Процедура ЗагрузитьЗапросыИзСтарогоФайла(Кнопка)
	мИмяФайла = Кнопка.Текст;
	вЗагрузитьЗапросыИзФайла();
	мТекущаяСтрока = НеОпределено;
	вСохранитьИмяФайла();
КонецПроцедуры //ЗагрузитьЗапросыИзСтарогоФайла


//переносит список последних файлов в спец. подменю
//
Процедура СформироватьПодменюПоследнихФайлов()
	
	Подменю = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПодменюПоследнихФайлов;
	Подменю.Кнопки.Очистить();
	
	Для каждого ЭлементСписка Из мСписокПоследнихОткрытыхФайлов Цикл
		Действие = Новый Действие("ЗагрузитьЗапросыИзСтарогоФайла");
		Подменю.Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Действие, 
		ЭлементСписка.Значение, Действие);
	КонецЦикла; 
	
КонецПроцедуры //СформироватьПодменюПоследнихФайлов


// Получает текст запроса из текстового поля
//
// Параметры:
//  ТолькоВыделенныйТекст - признак получения только выделенного текста.
//
// Возвращаемое значение:
//	Текст запроса в виде строки.
//
Функция вПолучитьТекстЗапроса(ТолькоВыделенныйТекст = Ложь)
	
	Если Не ТолькоВыделенныйТекст Тогда
		Возврат ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	КонецЕсли;
	
	ТекстЗап = ЭлементыФормы.ТекстЗапроса.ПолучитьВыделенныйТекст();
	Если СтрДлина(ТекстЗап) <> 0 Тогда
		Возврат ТекстЗап;
	Иначе
		Возврат ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	КонецЕсли;
	
КонецФункции // ПолучитьТекстЗапроса()

// Устанавливает текст запроса в текстовом поле
//
// Параметры:
//  Текст - устанавливаемый текст запроса.
//
Процедура вЗадатьТекстЗапроса(Текст)
	
	ЭлементыФормы.ТекстЗапроса.УстановитьТекст(Текст);
	
КонецПроцедуры // ЗадатьТекстЗапроса()

// Устанавливает заголовок формы по имени файла запросов
//
// Параметры:
//  Нет.
//
Процедура вУстановитьЗаголовокФормы()
	
	Если мИмяФайла <> "" Тогда
		Заголовок = мЗаголовокФормы + " : " + мИмяФайла;
	Иначе
		Заголовок = мЗаголовокФормы;
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗаголовокФормы()

// Записывает в дерево запросов текст запроса из текстового поля
//
// Параметры:
//  Нет.
//
Процедура вСохранитьЗапросТекущейСтроки()
	
	Если ДеревоЗапросов.Строки.Количество() <> 0 И мТекущаяСтрока <> НеОпределено Тогда
		
		Если мТекущаяСтрока.ТекстЗапроса <> вПолучитьТекстЗапроса(Ложь) Тогда
			Модифицированность = Истина;
		КонецЕсли;
		
		мТекущаяСтрока.ТекстЗапроса 	= 	вПолучитьТекстЗапроса(Ложь);
		мТекущаяСтрока.ПараметрыЗапроса = 	Параметры.Скопировать();
		мТекущаяСтрока.СпособВыгрузки 	= 	СпособВыгрузки;
		мТекущаяСтрока.ПоказыватьСлужебныеКолонкиРезультата = ПоказыватьСлужебныеКолонкиРезультата;
		мТекущаяСтрока.ТаблицаВыборок 	= 	ТаблицаВыборок.Скопировать();
		мТекущаяСтрока.СпособВыборки 	= 	СпособВыборки;
		мТекущаяСтрока.ОбходитьИерархическиеВыборкиРекурсивно 	= 	ОбходитьИерархическиеВыборкиРекурсивно;
		
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьЗапросТекущейСтроки()

// Очищает дерево запросов, текстовое поле, список параметров
//
// Параметры:
//  Нет.
//
Процедура вОчиститьЗначения()
	
	ДеревоЗапросов.Строки.Очистить();
	вЗадатьТекстЗапроса("");
	Параметры.Очистить();
	ТаблицаВыборок.Очистить();
	ПоказыватьСлужебныеКолонкиРезультата = Ложь;
	СпособВыгрузки = 1;
	СпособВыборки = 1;
	
КонецПроцедуры // ОчиститьЗначения()

// Сохраняет имя файла и путь к нему для использования в последующих сеансах работы
//
// Параметры:
//  Нет.
//
Процедура вСохранитьИмяФайла()
	
	СохранитьЗначение("КонсольЗапросов+_ИмяФайла", мИмяФайла);
	СохранитьЗначение("КонсольЗапросов+_ИмяПути",  мИмяПути);
	
	Если мСписокПоследнихОткрытыхФайлов.НайтиПоЗначению(мИмяФайла) = Неопределено Тогда
		мСписокПоследнихОткрытыхФайлов.Вставить(0,мИмяФайла);
		Если мСписокПоследнихОткрытыхФайлов.Количество() = 16 Тогда
			мСписокПоследнихОткрытыхФайлов.Удалить(15);
		КонецЕсли; 
		
		СформироватьПодменюПоследнихФайлов();
	КонецЕсли; 
	
	СохранитьЗначение("КонсольЗапросов+_СписокПоследнихОткрытыхФайлов",  мСписокПоследнихОткрытыхФайлов);
	
КонецПроцедуры // СохранитьИмяФайла()

// Восстанавливает имя открывавшегося в предыдущем сеансе работы файла и путь к нему 
//
// Параметры:
//  Нет.
//
Процедура вВосстановитьИмяФайла()
	
	мИмяФайла = ВосстановитьЗначение("КонсольЗапросов+_ИмяФайла");
	мИмяПути  = ВосстановитьЗначение("КонсольЗапросов+_ИмяПути");
	мСписокПоследнихОткрытыхФайлов = ВосстановитьЗначение("КонсольЗапросов+_СписокПоследнихОткрытыхФайлов");
	
	Если мИмяФайла = НеОпределено Тогда
		мИмяФайла = "";
	КонецЕсли;
	
	Если мИмяПути = НеОпределено Тогда
		мИмяПути = "";
	КонецЕсли;
	
	Если мСписокПоследнихОткрытыхФайлов = Неопределено Тогда
		мСписокПоследнихОткрытыхФайлов = Новый СписокЗначений;
	Иначе
		СформироватьПодменюПоследнихФайлов();
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьИмяФайла()

// Копирует дерево запросов
//
// Параметры:
//  ИсходноеДерево
//	НовоеДерево.
//
Процедура вСкопироватьДеревоЗапросов(ИсходноеДерево, НовоеДерево, КолонокВДереве)
	
	НовоеДерево.Строки.Очистить();
	
	Если ИсходноеДерево.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаДерева из ИсходноеДерево.Строки Цикл
		
		НоваяСтрока = НовоеДерево.Строки.Добавить();
		
		Для сч = 0 по КолонокВДереве - 1 Цикл
			НоваяСтрока[сч] = СтрокаДерева[сч];
		КонецЦикла;  
		
		//для запросов из старой консоли устанавливаем новые параметры по умолчанию
		//СпособВыборки 
		Если НоваяСтрока[6] = Неопределено Тогда
			НоваяСтрока[6] = 1;
		КонецЕсли; 
		
		вСкопироватьДеревоЗапросов(СтрокаДерева, НоваяСтрока, КолонокВДереве);
		
	КонецЦикла;
	
КонецПроцедуры // СкопироватьДеревоЗапросов()

// Подготовка к созданию нового файла запросов
//
// Параметры:
//  Нет.
//
Процедура вСоздатьНовыйФайлЗапросов()
	
	мИмяФайла = "";
	мИмяПути = "";
	вСохранитьИмяФайла();
	
	вОчиститьЗначения();
	вУстановитьЗаголовокФормы();
	мТекущаяСтрока = НеОпределено;
	
	мТекущаяСтрока = ДеревоЗапросов.Строки.Добавить();
	мТекущаяСтрока.Запрос = "Запросы";
	мТекущаяСтрока.ТекстЗапроса = "";
	
	СпособВыгрузки = 1;
	СпособВыборки = 1;
	ОбходитьИерархическиеВыборкиРекурсивно = Истина;	
	Модифицированность = Ложь;
	
КонецПроцедуры // СоздатьНовыйФайлЗапросов()

// Загружает дерево запросов из файла
//
// Параметры:
//  Нет.
//
Процедура вЗагрузитьЗапросыИзФайла()
	
	//Проверим существование файла.
	ФайлЗначения = Новый Файл(мИмяФайла);
	ПолученноеЗначение = ?(ФайлЗначения.Существует(), ЗначениеИзФайла(мИмяФайла), Неопределено);
	
	Если ТипЗнч(ПолученноеЗначение) = Тип("ТаблицаЗначений") Тогда
		
		вОчиститьЗначения();
		Для каждого СтрокаВремТаблицы из ПолученноеЗначение Цикл
			НовСтрока = ДеревоЗапросов.Строки.Добавить();
			НовСтрока[0] = СтрокаВремТаблицы[0]; // Запрос
			НовСтрока[1] = СтрокаВремТаблицы[1]; // ТекстЗапроса
			НовСтрока[2] = СтрокаВремТаблицы[2]; // ПараметрыЗапроса
			Если ПолученноеЗначение.Колонки.Количество() > 3 Тогда
				НовСтрока[3] = СтрокаВремТаблицы[3]; // СпособВыгрузки
			КонецЕсли;
			НовСтрока[4] = СтрокаВремТаблицы[4]; // ПоказыватьСлужебныеКолонкиРезультата
			НовСтрока[5] = СтрокаВремТаблицы[5]; // ТаблицаВыборок
			НовСтрока[6] = СтрокаВремТаблицы[6]; // СпособВыборки
			НовСтрока[7] = СтрокаВремТаблицы[7]; // ОбходитьИерархическиеВыборкиРекурсивно
			
		КонецЦикла;
		Модифицированность = Ложь;
		
	ИначеЕсли ТипЗнч(ПолученноеЗначение) = Тип("ДеревоЗначений") Тогда
		
		вОчиститьЗначения();
		вСкопироватьДеревоЗапросов(ПолученноеЗначение, ДеревоЗапросов, ПолученноеЗначение.Колонки.Количество());
		Модифицированность = Ложь;
		
	Иначе // Формат файла не опознан
		вОчиститьЗначения();
		//Предупреждение("Невозможно загрузить список запросов из указанного файла!
		//			   |Выберите другой файл.");
		
	КонецЕсли;
	
	вУстановитьЗаголовокФормы();
	
КонецПроцедуры // ЗагрузитьЗапросыИзФайла()

// Сохраняет дерево запросов в файл
//
// Параметры:
//  ЗапрашиватьСохранение - признак необходимости предупрежедния перед сохранением
//	ЗапрашиватьИмяФайла - признак необходимости запроса имени файла.
//
Функция вСохранитьЗапросыВФайл(ЗапрашиватьСохранение = Ложь, ЗапрашиватьИмяФайла = Ложь)
	
	вСохранитьЗапросТекущейСтроки();
	
	Если Не ЗапрашиватьИмяФайла Тогда
		Если ЗапрашиватьСохранение Тогда
			Если Не Модифицированность Тогда
				Возврат Истина;
			Иначе
				Ответ = Вопрос("Сохранить текущие запросы?", РежимДиалогаВопрос.ДаНетОтмена);
				Если Ответ = КодВозвратаДиалога.Отмена Тогда
					Возврат Ложь;
				ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(мИмяФайла) или ЗапрашиватьИмяФайла Тогда
		
		Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		
		Длг.ПолноеИмяФайла = мИмяФайла;
		Длг.Каталог = мИмяПути;
		Длг.Заголовок = "Укажите файл для списка запросов";
		Длг.Фильтр = "Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*";
		Длг.Расширение = "sel";
		
		Если Длг.Выбрать() Тогда
			мИмяФайла = Длг.ПолноеИмяФайла;
			мИмяПути = Длг.Каталог;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначениеВФайл(мИмяФайла, ДеревоЗапросов);
	Модифицированность = Ложь;
	вСохранитьИмяФайла();
	вУстановитьЗаголовокФормы();
	
	Возврат Истина;
	
КонецФункции // СохранитьЗапросыВФайл()

//
//
Процедура ВывестиВыборкуЗапросаРекурсивно(Знач СчетчикРекурсии, Знач Выборка, ПриемникРезультата)
	
	СтрокаОписанияВыборки = мТаблицаВыборок[СчетчикРекурсии];
	
	ТекТипОбхода = СтрокаОписанияВыборки.ТипОбхода;
	Если НЕ ПустаяСтрока(СтрокаОписанияВыборки.Группировки) Тогда
		СтрокаГруппировки = СтрокаОписанияВыборки.Группировки;
	Иначе	
		СтрокаГруппировки = Неопределено;
	КонецЕсли; 
	
	Если НЕ ПустаяСтрока(СтрокаОписанияВыборки.ГруппировкиДляЗначенийГруппировок) Тогда
		СтрокаГруппировкиДляЗначенийГруппировок = СтрокаОписанияВыборки.ГруппировкиДляЗначенийГруппировок;
	Иначе	
		СтрокаГруппировкиДляЗначенийГруппировок = Неопределено;
	КонецЕсли; 
	
	Попытка
		ТекВыборка = Выборка.Выбрать(ТекТипОбхода,СтрокаГруппировки,СтрокаГруппировкиДляЗначенийГруппировок); 
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Пока ТекВыборка.Следующий() Цикл
		
		НовСтрока = ПриемникРезультата.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока,ТекВыборка);
		Если СпособВыборки = 2 Тогда
			Если Не ПустаяСтрока(СтрокаОписанияВыборки.Имя)Тогда
				НовСтрока.ИмяВыборки 	= СтрокаОписанияВыборки.Имя;
			Иначе	
				НовСтрока.ИмяВыборки 	= СтрокаОписанияВыборки.Группировки;
			КонецЕсли; 
			
		КонецЕсли; 
		Если ПоказыватьСлужебныеКолонкиРезультата Тогда
			НовСтрока.ТипЗаписи 	= ТекВыборка.ТипЗаписи();
			НовСтрока.Группировка	= ТекВыборка.Группировка();
			НовСтрока.Уровень 		= ТекВыборка.Уровень();
		КонецЕсли; 
		
		Если ТекТипОбхода = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией И ОбходитьИерархическиеВыборкиРекурсивно Тогда
			//такой тип обхода может иметь иерархическую вложенность
			//проходим его до упора
			ТекВыборкаВниз = ТекВыборка.Выбрать(ТекТипОбхода,СтрокаГруппировки,СтрокаГруппировкиДляЗначенийГруппировок);
			Если ТипЗнч(ПриемникРезультата) = Тип("КоллекцияСтрокДереваЗначений") Тогда
				ВывестиВыборкуЗапросаРекурсивно(СчетчикРекурсии, ТекВыборка, НовСтрока.Строки)
			Иначе
				ВывестиВыборкуЗапросаРекурсивно(СчетчикРекурсии, ТекВыборка, ПриемникРезультата)
			КонецЕсли; 
		КонецЕсли; 
		
		Если СчетчикРекурсии < мТаблицаВыборок.Количество() - 1 Тогда
			
			Если ТипЗнч(ПриемникРезультата) = Тип("КоллекцияСтрокДереваЗначений") Тогда
				ВывестиВыборкуЗапросаРекурсивно(СчетчикРекурсии + 1, ТекВыборка, НовСтрока.Строки)
			Иначе
				ВывестиВыборкуЗапросаРекурсивно(СчетчикРекурсии + 1, ТекВыборка, ПриемникРезультата)
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла;  
	
КонецПроцедуры //ВывестиВыборкуЗапросаРекурсивно

//вставляет служебные колонки результата запроса в таблицу или дерево
//
Процедура СоздатьКолонкиПриемникаРезультата(ТаблицаДерево)
	
	ТаблицаДерево.Колонки.Очистить();
	
	сч = 0;
	Если СпособВыборки = 2 Тогда
		//бум показывать и выборки
		НовКолонка = ТаблицаДерево.Колонки.Вставить(сч);
		НовКолонка.Имя = "ИмяВыборки";
		НовКолонка.Заголовок = "Имя выборки";
		
		сч = сч + 1;
	КонецЕсли; 
	
	Если ПоказыватьСлужебныеКолонкиРезультата Тогда
		//добавим служебные колонки
		НовКолонка = ТаблицаДерево.Колонки.Вставить(сч);
		НовКолонка.Имя = "Группировка";
		НовКолонка.Заголовок = "Группировка";
		НовКолонка.Ширина = 25;
		
		сч = сч + 1;
		
		НовКолонка = ТаблицаДерево.Колонки.Вставить(сч);
		НовКолонка.Имя = "ТипЗаписи";
		НовКолонка.Заголовок = "Тип записи";
		НовКолонка.Ширина = 20;
		
		сч = сч + 1;
		
		КЧ = Новый КвалификаторыЧисла(10,0);
		
		НовКолонка = ТаблицаДерево.Колонки.Вставить(сч);
		НовКолонка.Имя = "Уровень";
		НовКолонка.Заголовок = "Уровень";
		НовКолонка.Ширина = 7;
		
	КонецЕсли;	
	
	//копируем колонки результата
	Для каждого КолонкаРезультата Из мРезЗапроса.Колонки Цикл
		НовКолонка = ТаблицаДерево.Колонки.Добавить();
		ЗаполнитьЗначенияСвойств(НовКолонка,КолонкаРезультата);
	КонецЦикла; 
	
КонецПроцедуры //ВставитьСлужебныеКолонки

//копирует используемые выборки в таблицу выборок
//в переменную модуля мТаблицаВыборок
Процедура СкопироватьТаблицуВыборокВПеременную()
	
	мТаблицаВыборок = ТаблицаВыборок.Скопировать();
	мТаблицаВыборок.Очистить();
	
	Для каждого Строка Из ТаблицаВыборок Цикл
		Если НЕ Строка.Включена Тогда Продолжить КонецЕсли; 
		НоваяСтрока = мТаблицаВыборок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	КонецЦикла; 
	
КонецПроцедуры //СкопироватьТаблицуВыборокВПеременную


// Загружает результат запроса в таблицу или сводную таблицу
//
// Параметры:
//  Нет.
//
Процедура вЗагрузитьРезультат()
	Если мРезЗапроса <> Неопределено Тогда
		
		Если ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Имя = "Результат" Тогда
			
			Если мТаблицаЗагружена = Ложь Тогда
				
				ЭлементыФормы.ТаблицаРезультата.Колонки.Очистить();
				
				Если СпособВыгрузки = 2 Тогда // Дерево
					
					СоздатьКолонкиПриемникаРезультата(РезультатДерево);
					
					Если СпособВыборки <> 1 И СпособВыборки <> 2 Тогда
						СпособВыборки = 1;
					КонецЕсли; 
					
					Если СпособВыборки = 1 Тогда
						//стандартный способ
						РезультатДерево = мРезЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
					Иначе
						//по настроенным выборкам
						СкопироватьТаблицуВыборокВПеременную();
						СчетчикРекурсии = 0;
						
						Если мТаблицаВыборок.Количество() = 0 Тогда
							Предупреждение("Не описана ни одна выборка из запроса!");
							Возврат;
						КонецЕсли; 
						
						ВывестиВыборкуЗапросаРекурсивно(СчетчикРекурсии,мРезЗапроса,РезультатДерево.Строки);
					КонецЕсли; 
					
					ЭлементыФормы.ТаблицаРезультата.Данные = "РезультатДерево";
					ЭлементыФормы.ТаблицаРезультата.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
					
				Иначе // Таблица
					
					СоздатьКолонкиПриемникаРезультата(РезультатТаблица);
					СкопироватьТаблицуВыборокВПеременную();
					
					Если СпособВыборки = 1 Тогда
						//стандартный способ
						РезультатТаблица = мРезЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
					Иначе
						СчетчикРекурсии = 0;
						
						Если мТаблицаВыборок.Количество() = 0 Тогда
							Предупреждение("Не описана ни одна выборка из запроса!");
							Возврат;
						КонецЕсли; 
						
						ВывестиВыборкуЗапросаРекурсивно(СчетчикРекурсии,мРезЗапроса,РезультатТаблица);
					КонецЕсли;
					
					
					ЭлементыФормы.ТаблицаРезультата.Данные = "РезультатТаблица";
					
				КонецЕсли;
				мТаблицаЗагружена = Истина;
				
				ЭлементыФормы.ТаблицаРезультата.СоздатьКолонки();
				
				ЦветСлужебнойКолонки = WebЦвета.Синий;
				
				//оформляем служебные колонки
				Если ПоказыватьСлужебныеКолонкиРезультата Тогда
					Колонка = ЭлементыФормы.ТаблицаРезультата.Колонки["ТипЗаписи"];
					Колонка.ЦветТекстаПоля = ЦветСлужебнойКолонки;
					Колонка.ЦветТекстаШапки = ЦветСлужебнойКолонки;
					
					Колонка = ЭлементыФормы.ТаблицаРезультата.Колонки["Группировка"];
					Колонка.ЦветТекстаПоля = ЦветСлужебнойКолонки;
					Колонка.ЦветТекстаШапки = ЦветСлужебнойКолонки;
					
					Колонка = ЭлементыФормы.ТаблицаРезультата.Колонки["Уровень"];
					Колонка.ЦветТекстаПоля = ЦветСлужебнойКолонки;
					Колонка.ЦветТекстаШапки = ЦветСлужебнойКолонки;
				КонецЕсли; 
				
				Если СпособВыборки = 2 Тогда
					Колонка = ЭлементыФормы.ТаблицаРезультата.Колонки["ИмяВыборки"];
					Колонка.ЦветТекстаПоля = WebЦвета.Коричневый;
					Колонка.ЦветТекстаШапки = WebЦвета.Коричневый;
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Имя = "СводнаяТаблица" Тогда
			Если мСводнаяТаблицаЗагружена = Ложь Тогда
				Попытка
					ЭлементыФормы.РезультатТабДокСвод.ВстроенныеТаблицы.СводнаяТаблица.ИсточникДанных = мРезЗапроса;
				Исключение
				КонецПопытки;
				мСводнаяТаблицаЗагружена = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыФормы.НадписьКолСтрокРезультата.Заголовок = "Кол. строк результата: " + СокрЛП(РезультатТаблица.Количество());
КонецПроцедуры // ЗагрузитьРезультат()

// Добавляет строки при копировании строки дерева запросов
//
// Параметры:
//  ТекСтрока - текущая строка
//	ДобСтрока - добавляемая строка
//	Дерево - дерево значений.
//
Процедура вДобавитьСтроки(ТекСтрока, ДобСтрока, Дерево)
	
	Для Каждого Кол Из Дерево.Колонки Цикл
		ДобСтрока[Кол.Имя] = ТекСтрока[Кол.Имя];
	КонецЦикла; 
	
	Для Каждого Строка Из ТекСтрока.Строки Цикл
		НоваяСтрока = ДобСтрока.Строки.Добавить();
		вДобавитьСтроки(Строка, НоваяСтрока, Дерево);
	КонецЦикла;
	
КонецПроцедуры // ДобавитьСтроки()

// Включает или отключает запуск автосохранения.
//
// Параметры:
//  Нет.
//
Процедура вОбработкаАвтосохранения()
	
	Если ИспользоватьАвтосохранение Тогда
		ПодключитьОбработчикОжидания("Сохранить", ИнтервалАвтосохранения);
	Иначе
		ОтключитьОбработчикОжидания("Сохранить");
	КонецЕсли;
	
КонецПроцедуры // ОбработкаАвтосохранения()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ

// Обработчик нажатия кнопки командной панели "Новый список запросов"
//
Процедура НовыйФайл()
	
	Если вСохранитьЗапросыВФайл(Истина) Тогда
		вСоздатьНовыйФайлЗапросов();
	КонецЕсли;
	
КонецПроцедуры // НовыйФайл()

// Обработчик нажатия кнопки командной панели "Открыть файл запросов"
//
Процедура ОткрытьФайл()
	
	Если вСохранитьЗапросыВФайл(Истина) Тогда
		
		Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		
		Длг.ПолноеИмяФайла = мИмяФайла;
		Длг.Каталог = мИмяПути;
		Длг.Заголовок = "Выберите файл со списком запросов";
		Длг.Фильтр = "Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*";
		Длг.Расширение = "sel";
		
		Если Длг.Выбрать() Тогда
			мИмяФайла = Длг.ПолноеИмяФайла;
			мИмяПути = Длг.Каталог;
			вЗагрузитьЗапросыИзФайла();
			мТекущаяСтрока = НеОпределено;
			вСохранитьИмяФайла();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФайл()

// Обработчик нажатия кнопки командной панели "Сохранить"
//
Процедура Сохранить()
	
	вСохранитьЗапросыВФайл();
	
КонецПроцедуры // Сохранить()

// Обработчик нажатия кнопки командной панели "Сохранить как"
//
Процедура СохранитьКак()
	
	вСохранитьЗапросыВФайл(Ложь, Истина);
	
КонецПроцедуры // СохранитьКак()

// Обработчик нажатия кнопки командной панели "Настройка автосохранения"
//
Процедура НастройкаАвтосохранения()
	
	ФормаНастройкиАвтосохранения = ПолучитьФорму("ФормаНастройкиАвтосохранения");
	ФормаНастройкиАвтосохранения.ОткрытьМодально();
	
	вОбработкаАвтосохранения();
	
КонецПроцедуры // НастройкаАвтосохранения()

// Обработчик нажатия кнопки командной панели "Перенести в другую группу"
//
Процедура ПеренестиСтрокуДерева()
	
	ФормаВыбораСтрокиДереваЗапросов = ПолучитьФорму("ФормаВыбораСтрокиДереваЗапросов", ЭтаФорма);
	ФормаВыбораСтрокиДереваЗапросов.ЗакрыватьПриВыборе = Истина;
	
	ФормаВыбораСтрокиДереваЗапросов.ДеревоЗапросов = ДеревоЗапросов;
	ФормаВыбораСтрокиДереваЗапросов.ТекущаяСтрокаВладельца = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	ФормаВыбораСтрокиДереваЗапросов.ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	
	ФормаВыбораСтрокиДереваЗапросов.ОткрытьМодально();
	
КонецПроцедуры // ПеренестиСтрокуДерева()

// Обработчик нажатия кнопки командной панели "Выполнить"
//
Процедура ВыполнитьЗапрос(Знач ТолькоВыделенныйФрагмент = Ложь)
	
	вСохранитьЗапросТекущейСтроки();
	
	ОбъектЗапрос = Новый Запрос;
	ОбъектЗапрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ПроверитьНаличиеТекстаЗапроса() Тогда
		ОбъектЗапрос.Текст = вПолучитьТекстЗапроса(ТолькоВыделенныйФрагмент);
	Иначе
		Возврат;
	КонецЕсли; 
	
	//установка параметров запроса
	Для каждого СтрокаПараметров Из Параметры Цикл
		Если СтрокаПараметров.ЭтоВыражение Тогда
			ОбъектЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, Вычислить(СтрокаПараметров.ЗначениеПараметра));
		Иначе
			ОбъектЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, СтрокаПараметров.ЗначениеПараметра);
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(ОбъектЗапрос.Текст) Тогда
		Предупреждение("Не заполнен текст запроса!", 30);
		Возврат;
	КонецЕсли;
	
	ДатаНачала = ТекущаяДата();
	
	Попытка
		мРезЗапроса = ОбъектЗапрос.Выполнить();
		ДатаКонцаВыполнения = ТекущаяДата();
		
		ЭлементыФормы.НадписьВремяВыполнения.Заголовок = "Время выполнения запроса: " + СокрЛП(ДатаКонцаВыполнения - ДатаНачала) + " сек.";
		
		мТаблицаЗагружена = Ложь;
		мСводнаяТаблицаЗагружена = Ложь;
		
		вЗагрузитьРезультат();
		
		ДатаКонца = ТекущаяДата();
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры // ВыполнитьЗапрос()

// Обработчик нажатия кнопки командной панели "Сохранить в табличный документ"
//
Процедура СохранитьРезультат()
	Перем ЗаголовокКолонки;
	
	Если мРезЗапроса <> Неопределено Тогда
		ТабДок = Новый ТабличныйДокумент;
		КоличествоКолонок = мРезЗапроса.Колонки.Количество();
		
		Выборка = мРезЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
		
		ДетальнаяСтрока = ТабДок.ПолучитьОбласть(1, , 1, );
		ОбластьОбщихИтогов = ТабДок.ПолучитьОбласть(1, , 1, );
		ОбластьОбщихИтогов.Область().Шрифт = Новый Шрифт(ОбластьОбщихИтогов.Область().Шрифт, , , Истина, , ,);
		ОбластьИерархическихЗаписей = ТабДок.ПолучитьОбласть(1, , 1, );
		ОбластьИерархическихЗаписей.Область().Шрифт = Новый Шрифт(ОбластьИерархическихЗаписей.Область().Шрифт, , , Истина, , ,);
		ОбластьГрупповыхЗаписей = ТабДок.ПолучитьОбласть(1, , 1, );
		ОбластьГрупповыхЗаписей.Область().Шрифт = Новый Шрифт(ОбластьГрупповыхЗаписей.Область().Шрифт, , , Истина, , ,);
		ОбластьЗаголвка = ТабДок.ПолучитьОбласть(1, , 1, );
		
		Для ТекущееПоле = 0 По КоличествоКолонок - 1 Цикл
			Область = ОбластьЗаголвка.Область(1, ТекущееПоле + 1);
			Область.Текст = мРезЗапроса.Колонки[ТекущееПоле].Имя;
			Область.ШиринаКолонки = мРезЗапроса.Колонки[ТекущееПоле].Ширина;
		КонецЦикла;
		ТабДок.Вывести(ОбластьЗаголвка);
		ОбластьЗаголвка = ТабДок.Область(1, 1, 1, КоличествоКолонок);
		
		ОбластьЗаголвка.Шрифт = Новый Шрифт(ОбластьЗаголвка.Шрифт, , , Истина, , ,);
		ОбластьЗаголвка.ЦветФона = Новый Цвет(255, 255, 0);
		ОбластьЗаголвка.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		
		ТабДок.НачатьАвтогруппировкуСтрок();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда 
				ИсходнаяСтрока = ОбластьГрупповыхЗаписей;
			ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда 
				ИсходнаяСтрока = ОбластьИерархическихЗаписей;
			ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда 
				ИсходнаяСтрока = ОбластьОбщихИтогов;
			Иначе
				ИсходнаяСтрока = ДетальнаяСтрока;
			КонецЕсли;
			
			Для ТекущееПоле = 0 По КоличествоКолонок - 1 Цикл
				Область = ИсходнаяСтрока.Область(1, ТекущееПоле + 1);
				Область.Текст = Выборка[ТекущееПоле];
			КонецЦикла;
			ТабДок.Вывести(ИсходнаяСтрока, Выборка.Уровень());
		КонецЦикла;
		ТабДок.ЗакончитьАвтогруппировкуСтрок();
		
		ТабДок.Показать();
	КонецЕсли;
	
КонецПроцедуры // СохранитьРезультат()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

// Обработчик выбора строки в дереве запросов
//
Процедура ДеревоЗапросовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьЗапрос();
	
КонецПроцедуры // ДеревоЗапросовВыбор()

// Обработчик активизации строки в дереве запросов
//
Процедура ДеревоЗапросовПриАктивизацииСтроки(Элемент)
	
	НадоСохранять = Истина;
	
	Если мИдетДобавление Тогда
		Если мАктивизированаДобавляемаяЗапись Тогда
			
			// Произошла отмена добавления записи.
			НадоСохранять = Ложь;
			мАктивизированаДобавляемаяЗапись = Ложь;
		Иначе
			мАктивизированаДобавляемаяЗапись = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НадоСохранять Тогда
		вСохранитьЗапросТекущейСтроки();
	КонецЕсли;
	
	мТекущаяСтрока = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	
	Если ДеревоЗапросов.Строки.Количество() <> 0 И мТекущаяСтрока <> НеОпределено Тогда
		
		вЗадатьТекстЗапроса(мТекущаяСтрока.ТекстЗапроса);
		
		ИсходнаяТаблицаПараметров = мТекущаяСтрока.ПараметрыЗапроса;
		Параметры.Очистить();
		Если Не ИсходнаяТаблицаПараметров = НеОпределено Тогда
			Для каждого СтрокаИсходнойТаблицы из ИсходнаяТаблицаПараметров Цикл
				НоваяСтрока = Параметры.Добавить();
				НоваяСтрока[0] = СтрокаИсходнойТаблицы[0]; // Имя параметра
				НоваяСтрока[1] = СтрокаИсходнойТаблицы[1]; // Вид параметра
				НоваяСтрока[2] = СтрокаИсходнойТаблицы[2]; // Значение
			КонецЦикла;
		КонецЕсли;
		
		Если мТекущаяСтрока.СпособВыгрузки = Неопределено Тогда
			мТекущаяСтрока.СпособВыгрузки = 1;
		КонецЕсли;
		
		ИсходнаяТаблицаВыборок = мТекущаяСтрока.ТаблицаВыборок;
		ТаблицаВыборок.Очистить();
		Если Не ИсходнаяТаблицаВыборок = НеОпределено Тогда
			Для каждого СтрокаИсходнойТаблицы из ИсходнаяТаблицаВыборок Цикл
				НоваяСтрока = ТаблицаВыборок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаИсходнойТаблицы);
			КонецЦикла;
		КонецЕсли;
		
		СпособВыгрузки = мТекущаяСтрока.СпособВыгрузки;
		СпособВыборки = мТекущаяСтрока.СпособВыборки;
		ПоказыватьСлужебныеКолонкиРезультата = мТекущаяСтрока.ПоказыватьСлужебныеКолонкиРезультата;
		
	Иначе
		
		вЗадатьТекстЗапроса("");
		Параметры.Очистить();
		ТаблицаВыборок.Очистить();
		
	КонецЕсли;
	
	УправлениеДиалогом();
	
КонецПроцедуры // ДеревоЗапросовПриАктивизацииСтроки()

// Обработчик события перед началом добавления строки в дереве запросов
//
Процедура ДеревоЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	
	Если Копирование Тогда
		Отказ = Истина;
		ТекСтрока = Элемент.ТекущаяСтрока;
		Если ТекСтрока.Родитель <> Неопределено Тогда
			НоваяСтрока = ТекСтрока.Родитель.Строки.Добавить();
		Иначе
			НоваяСтрока = Элемент.Значение.Строки.Добавить();
		КонецЕсли; 
		вДобавитьСтроки(ТекСтрока, НоваяСтрока, Элемент.Значение);
	КонецЕсли; 
	
	мИдетДобавление = Истина;
	
КонецПроцедуры // ДеревоЗапросовПередНачаломДобавления()

// Обработчик события перед удалением строки в дереве запросов
//
Процедура ДеревоЗапросовПередУдалением(Элемент, Отказ)
	
	мТекущаяСтрока = НеОпределено;
	Модифицированность = Истина;
	
КонецПроцедуры // ДеревоЗапросовПередУдалением()

// Обработчик события при окончании редактирования строки в дереве запросов
//
Процедура ДеревоЗапросовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока и Элемент.ТекущаяСтрока.СпособВыгрузки = Неопределено Тогда
		Элемент.ТекущаяСтрока.СпособВыгрузки = 1;
	КонецЕсли;
	
	Если НоваяСтрока и Элемент.ТекущаяСтрока.СпособВыборки = Неопределено Тогда
		Элемент.ТекущаяСтрока.СпособВыборки = 1;
	КонецЕсли;
	
	
	ДеревоЗапросовПриАктивизацииСтроки(Элемент);
	
	Если мИдетДобавление Тогда
		
		Если ОтменаРедактирования Тогда
			мТекущаяСтрока = Неопределено;
		КонецЕсли;
		
		мИдетДобавление = Ложь;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры // ДеревоЗапросовПриОкончанииРедактирования()

// Обработчик изменения способа выгрузки
//
Процедура СпособВыгрузкиПриИзменении(Элемент)
	
	УправлениеДиалогом();
	Модифицированность = Истина;
	
КонецПроцедуры // СпособВыгрузкиПриИзменении()

// Обработчик выбора строки в таблице результата
//
Процедура ТаблицаРезультатаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СодержимоеЯчейки = ВыбраннаяСтрока[Колонка.Имя];
	
	Если ТипЗнч(СодержимоеЯчейки) = Тип("ТаблицаЗначений") Тогда
		ФормаВложеннойТаблицы = Обработка.ПолучитьФорму("ФормаВложеннойТаблицы", ЭтаФорма);
		ФормаВложеннойТаблицы.ВложеннаяТаблица = СодержимоеЯчейки;
		ФормаВложеннойТаблицы.ЭлементыФормы.ВложеннаяТаблица.СоздатьКолонки();
		ФормаВложеннойТаблицы.Открыть();
	ИначеЕсли ТипЗнч(СодержимоеЯчейки) = Тип("РезультатЗапроса") Тогда
		ФормаВложеннойТаблицы = Обработка.ПолучитьФорму("ФормаВложеннойТаблицы", ЭтаФорма);
		ФормаВложеннойТаблицы.ВложеннаяТаблица = СодержимоеЯчейки.Выгрузить(ОбходРезультатаЗапроса.Прямой);
		ФормаВложеннойТаблицы.ЭлементыФормы.ВложеннаяТаблица.СоздатьКолонки();
		ФормаВложеннойТаблицы.Открыть();
	ИначеЕсли ТипЗнч(СодержимоеЯчейки) = Тип("МоментВремени") Тогда
		Предупреждение(СокрЛП(СодержимоеЯчейки.Дата)+ " ; " +СокрЛП(СодержимоеЯчейки.Ссылка),,"Момент времени:");
	Иначе
		ОткрытьЗначение(СодержимоеЯчейки);
	КонецЕсли;
	
КонецПроцедуры // ТаблицаРезультатаВыбор()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события при открытии формы
//
Процедура ПередОткрытием()
	
	// Создадим структуру дерева запросов
	ДеревоЗапросов.Колонки.Добавить("ТекстЗапроса");
	ДеревоЗапросов.Колонки.Добавить("ПараметрыЗапроса");
	ДеревоЗапросов.Колонки.Добавить("СпособВыгрузки");
	ДеревоЗапросов.Колонки.Добавить("ПоказыватьСлужебныеКолонкиРезультата");
	ДеревоЗапросов.Колонки.Добавить("ТаблицаВыборок");
	ДеревоЗапросов.Колонки.Добавить("СпособВыборки");
	ДеревоЗапросов.Колонки.Добавить("ОбходитьИерархическиеВыборкиРекурсивно");
	
	// Попытаемся загрузить последний открывавшийся файл запросов
	вВосстановитьИмяФайла();
	Если ПустаяСтрока(мИмяФайла) Тогда
		вСоздатьНовыйФайлЗапросов();
	Иначе
		вЗагрузитьЗапросыИзФайла();
		мТекущаяСтрока = НеОпределено;
	КонецЕсли;
	
	ИспользоватьАвтосохранение = ВосстановитьЗначение("КонсольЗапросов+_ИспользоватьАвтосохранение");
	ИнтервалАвтосохранения = ВосстановитьЗначение("КонсольЗапросов+_ИнтервалАвтосохранения");
	вОбработкаАвтосохранения();
	
КонецПроцедуры // ПередОткрытием()

// Обработчик события выбора в подчиненной форме
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	НоваяСтрока = ЗначениеВыбора.Строки.Добавить();
	НоваяСтрока[0] = мТекущаяСтрока[0]; // Запрос
	НоваяСтрока[1] = мТекущаяСтрока[1]; // ТекстЗапроса
	НоваяСтрока[2] = мТекущаяСтрока[2]; // ПараметрыЗапроса
	НоваяСтрока[3] = мТекущаяСтрока[3]; // СпособВыгрузки
	
	НоваяСтрока[4] = мТекущаяСтрока[4]; // ПоказыватьСлужебныеКолонкиРезультата
	НоваяСтрока[5] = мТекущаяСтрока[5]; // ТаблицаВыборок
	НоваяСтрока[6] = мТекущаяСтрока[6]; // СпособВыборки
	НоваяСтрока[7] = мТекущаяСтрока[7]; // ОбходитьИерархическиеВыборкиРекурсивно
	
	вСкопироватьДеревоЗапросов(мТекущаяСтрока, НоваяСтрока, ДеревоЗапросов.Колонки.Количество());
	
	РодительТекущейСтроки = ?(мТекущаяСтрока.Родитель = НеОпределено, ДеревоЗапросов, мТекущаяСтрока.Родитель);
	РодительТекущейСтроки.Строки.Удалить(РодительТекущейСтроки.Строки.Индекс(мТекущаяСтрока));
	мТекущаяСтрока = НеОпределено;
	
	ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрока;
	
	Модифицированность = Истина;
	
КонецПроцедуры // ОбработкаВыбора()

// Обработчик события преред закрытием формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если вСохранитьЗапросыВФайл(Истина) Тогда
		СохранитьЗначение("КонсольЗапросов+_ИспользоватьАвтосохранение", ИспользоватьАвтосохранение);
		СохранитьЗначение("КонсольЗапросов+_ИнтервалАвтосохранения", ИнтервалАвтосохранения);
	Иначе
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

// Обработчик события при смене страницы панели
//
Процедура ПанельРезультатаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	вЗагрузитьРезультат();
	
КонецПроцедуры // ПанельРезультатаПриСменеСтраницы()

Процедура КоманднаяПанельЗапросКонструкторЗапросов(Кнопка)
	КонструкторЗапроса = Новый КонструкторЗапроса;
	КонструкторЗапроса.АвтодобавлениеПредставлений = Ложь;
	Попытка
		ТекстЗапросаКонструктор = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
		Если ТекстЗапросаКонструктор <> "" Тогда
			КонструкторЗапроса.Текст = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
		КонецЕсли;
		
		Если КонструкторЗапроса.ОткрытьМодально() Тогда
			ЭлементыФормы.ТекстЗапроса.УстановитьТекст(КонструкторЗапроса.Текст);
		КонецЕсли;
	Исключение
		Предупреждение(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

////////////////////////////////////////////////////////////
//РАБОТА С ПАРАМЕТРАМИ 

// Управляет признаком выбора типа у поля ввода, редактирующего значения параметра
//
// Параметры:
//	Нет.
//
Процедура вУправлениеКолонкамиПараметры()
	
	ЭлементыФормы.Параметры.Колонки.ЗначениеПараметра.ЭлементУправления.ВыбиратьТип = Не ЭлементыФормы.Параметры.ТекущаяСтрока.ЭтоВыражение;
	
КонецПроцедуры // УправлениеКолонкамиПараметры()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ПАРАМЕТРОВ

// Обработчик события при начале редактирования строки параметров
//
Процедура ПараметрыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	вУправлениеКолонкамиПараметры();
	
КонецПроцедуры // ПараметрыПриНачалеРедактирования()

// Обработчик события при окончании редактирования строки параметров
//
Процедура ПараметрыПриОкончанииРедактирования(Элемент, НоваяСтрока)
	
	Модифицированность = Истина;
	
КонецПроцедуры // ПараметрыПриОкончанииРедактирования()

// Обработчик события перед удалением строки параметров
//
Процедура ПараметрыПередУдалением(Элемент, Отказ)
	
	Модифицированность = Истина;
	
КонецПроцедуры // ПараметрыПередУдалением()

// Обработчик изменения флажка "ЭтоВыражение"
//
Процедура ПараметрыПриИзмененииФлажка(Элемент, Колонка)
	
	Если Колонка.Имя = "ЭтоВыражение" Тогда
		
		Если Элемент.ТекущаяСтрока.ЭтоВыражение Тогда
			Если Не ТипЗнч(Элемент.ТекущаяСтрока.ЗначениеПараметра) = Тип("Строка") Тогда
				Элемент.ТекущаяСтрока.ЗначениеПараметра = "";
			КонецЕсли; 
		КонецЕсли;
		
		вУправлениеКолонкамиПараметры();
		
	КонецЕсли; 
	
КонецПроцедуры // ПараметрыПриИзмененииФлажка()

// Обработчик нажатия кнопки командной панели "Дополнить из запроса"
//
Процедура КоманднаяПанельФормыПолучитьИзЗапроса(Кнопка)
	
	Если НЕ ПроверитьНаличиеТекстаЗапроса() Тогда
		Возврат;
	КонецЕсли; 
	ТекстЗапроса = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Попытка
		ПараметрыЗапроса = Запрос.НайтиПараметры();
	Исключение
		Предупреждение(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Для каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		ИмяПараметра =  ПараметрЗапроса.Имя;
		СтрокаПараметров = Параметры.Найти(ИмяПараметра,"ИмяПараметра");
		Если  СтрокаПараметров = Неопределено Тогда
			СтрокаПараметров = Параметры.Добавить();
			СтрокаПараметров.ИмяПараметра = ИмяПараметра;
		КонецЕсли; 
		СтрокаПараметров.ЗначениеПараметра = ПараметрЗапроса.ТипЗначения.ПривестиЗначение(СтрокаПараметров.ЗначениеПараметра);
	КонецЦикла;
	
КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Элемент)
	//	ДопМенюТекстаЗапросаПропылесосить(Элемент);
	ВыполнитьЗапрос();
КонецПроцедуры

Процедура ПанельЗапросаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ЭлементыФормы.ПанельЗапроса.ТекущаяСтраница.Имя = "Выборки" Тогда
		СпособВыборкиПриИзменении(Элемент);
	ИначеЕсли ЭлементыФормы.ПанельЗапроса.ТекущаяСтраница.Имя = "Параметры" Тогда
		ТекстЗапроса = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
		Если ПустаяСтрока(ТекстЗапроса) ИЛИ Параметры.Количество() > 0 Тогда
			Возврат;
		КонецЕсли; 
		//попытаемся автозаполнить
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Попытка
			ПараметрыЗапроса = Запрос.НайтиПараметры();
			Если ПараметрыЗапроса.Количество() > 0 Тогда
				КоманднаяПанельФормыПолучитьИзЗапроса(Неопределено);
			КонецЕсли; 
			
		Исключение
			Предупреждение(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли; 	
КонецПроцедуры

//возвращает список группировок анализируя запрос
//
Функция ПолучитьСписокГруппировокЗапроса()
	СписокГруппировок = Новый СписокЗначений;
	
	Если НЕ ПроверитьНаличиеТекстаЗапроса() Тогда
		Возврат СписокГруппировок;
	КонецЕсли; 
	
	ТекстЗапроса = вПолучитьТекстЗапроса();
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда   
		
		Если Найти(ТекстЗапроса,"ОБЩИЕ") Тогда
			СписокГруппировок.Добавить("ОБЩИЕ");	
		КонецЕсли; 
		
		Построитель = Новый ПостроительЗапроса;
		Построитель.Текст = ТекстЗапроса;
		Построитель.ЗаполнитьНастройки();
		Для каждого Измерение Из Построитель.Измерения Цикл
			СписокГруппировок.Добавить(Измерение.Имя);	
		КонецЦикла; 
		
	КонецЕсли;
	
	Возврат СписокГруппировок;
	
КонецФункции //ПолучитьСписокГруппировокЗапроса

//управление видимостью и доступностью элементов
//
Процедура УправлениеДиалогом()
	
	Если СпособВыгрузки = 1 Тогда
		ЭлементыФормы.НадписьКолСтрокРезультата.Видимость = Истина;
	Иначе	
		//для дерева по быстрому не посчитаешь
		//ну и не покажем
		ЭлементыФормы.НадписьКолСтрокРезультата.Видимость = Ложь;
	КонецЕсли; 
	
	Если СпособВыборки = 1 Тогда    
		//стандартная выборка
		ЭлементыФормы.ТаблицаВыборок.ТолькоПросмотр = Истина;
		ЭлементыФормы.КоманднаяПанельВыборки.Доступность = Ложь;
		ЭлементыФормы.ПоказыватьСлужебныеКолонкиРезультата.Видимость = Ложь;
		ЭлементыФормы.ОбходитьИерархическиеВыборкиРекурсивно.Видимость = Ложь;
	Иначе	
		//по списку настроенных выборок
		ЭлементыФормы.ТаблицаВыборок.ТолькоПросмотр = Ложь;
		ЭлементыФормы.КоманднаяПанельВыборки.Доступность = Истина;
		ЭлементыФормы.ПоказыватьСлужебныеКолонкиРезультата.Видимость = Истина;
		ЭлементыФормы.ОбходитьИерархическиеВыборкиРекурсивно.Видимость = Истина;
	КонецЕсли; 
КонецПроцедуры //УправлениеДиалогом

Процедура СпособВыборкиПриИзменении(Элемент)
	
	УправлениеДиалогом();
	
	Если СпособВыборки = 1 Тогда    
		
		ПоказыватьСлужебныеКолонкиРезультата = Ложь;
		
	Иначе	
		
		ТекстЗапроса = вПолучитьТекстЗапроса();
		
		Если ПустаяСтрока(ТекстЗапроса) Тогда Возврат КонецЕсли; 
		Если НЕ Найти(ТекстЗапроса,"ИТОГИ") Тогда
			//тут и итогов то нет
			//выбирать не из чего
			Возврат;
		КонецЕсли; 
		
		//по списку настроенных выборок
		ЭлементыФормы.ТаблицаВыборок.ТолькоПросмотр = Ложь;
		ЭлементыФормы.КоманднаяПанельВыборки.Доступность = Истина;
		ЭлементыФормы.ПоказыватьСлужебныеКолонкиРезультата.Видимость = Истина;
		
		СписокГруппировок = ПолучитьСписокГруппировокЗапроса();
		
		//обновим список измерений запроса
		ЭлементыФормы.ТаблицаВыборок.Колонки.Группировки.ЭлементУправления.СписокВыбора = СписокГруппировок;
		//для группировок значений группировок добавим вариант ВСЕ
		СписокГруппировок.Добавить("ВСЕ");
		ЭлементыФормы.ТаблицаВыборок.Колонки.ГруппировкиДляЗначенийГруппировок.ЭлементУправления.СписокВыбора = СписокГруппировок;
		
		Если ТаблицаВыборок.Количество() = 0 Тогда
			Ответ = Вопрос("Выполнить автонастройку выборок? (free service!)",РежимДиалогаВопрос.ДаНетОтмена);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				КоманднаяПанельВыборкиПолучитьИзЗапроса(Элемент);
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ТаблицаВыборокПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Модифицированность = Истина;
КонецПроцедуры

Процедура ТаблицаВыборокПередУдалением(Элемент, Отказ)
	Модифицированность = Истина;
КонецПроцедуры

Процедура ТаблицаВыборокГруппировкиПриИзменении(Элемент)
	ТекДанные = ЭлементыФормы.ТаблицаВыборок.ТекущиеДанные;
	ТекДанные.Имя = ТекДанные.Группировки;
КонецПроцедуры

Процедура ТаблицаРезультатаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Для каждого Ячейка Из ОформлениеСтроки.Ячейки Цикл
		Если Ячейка.Значение = NULL Тогда
			Ячейка.Текст = "<NULL>";
			Ячейка.ЦветТекста = WebЦвета.Серый;
		ИначеЕсли Ячейка.Значение = Неопределено Тогда	
			Ячейка.Текст = "<Неопределено>";
			Ячейка.ЦветТекста = WebЦвета.Серый;
		ИначеЕсли ТипЗнч(Ячейка.Значение) = Тип("МоментВремени") Тогда	
			Ячейка.Текст = "<МоментВремени>";
			Ячейка.ЦветТекста = WebЦвета.Серый;
		ИначеЕсли ТипЗнч(Ячейка.Значение) = Тип("РезультатЗапроса") Тогда	
			Ячейка.Текст = "<РезультатЗапроса>";
			Ячейка.ЦветТекста = WebЦвета.Серый;
		ИначеЕсли  Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) 
			ИЛИ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) 
			ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) 
			ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение))
			ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение))
			ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение))
			Тогда
			Если Ячейка.Значение.Пустая() Тогда	    
				Ячейка.Текст = "<пустая ссылка " + ТипЗнч(Ячейка.Значение) + ">";
				Ячейка.ЦветТекста = WebЦвета.Серый;
			ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) Тогда	
				Ячейка.ЦветТекста = WebЦвета.ТемноБордовый;
			ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение))  Тогда	
				Ячейка.ЦветТекста = WebЦвета.КожаноКоричневый;
			ИначеЕсли  Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) Тогда	
				Если Ячейка.Значение.Предопределенный Тогда
					Ячейка.ЦветТекста = WebЦвета.ТемноБордовый;
				КонецЕсли;		
			ИначеЕсли  ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) Тогда	
				Если Ячейка.Значение.Предопределенный Тогда
					Ячейка.ЦветТекста = WebЦвета.ТемноБордовый;
				Иначе 
					Ячейка.ЦветТекста = WebЦвета.Томатный;
				КонецЕсли;		
			ИначеЕсли  ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) Тогда	
				Если Ячейка.Значение.Предопределенный Тогда
					Ячейка.ЦветТекста = WebЦвета.ТемноБордовый;
				Иначе 
					Ячейка.ЦветТекста = WebЦвета.Томатный;
				КонецЕсли;		
			ИначеЕсли  ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) Тогда	
				Если Ячейка.Значение.Предопределенный Тогда
					Ячейка.ЦветТекста = WebЦвета.ТемноБордовый;
				Иначе 
					Ячейка.ЦветТекста = WebЦвета.Томатный;
				КонецЕсли;		
			КонецЕсли;
		ИначеЕсли ТипЗнч(Ячейка.Значение) = Тип("Строка") Тогда	
			Ячейка.ЦветТекста = WebЦвета.ТемноЗеленый;
		ИначеЕсли ТипЗнч(Ячейка.Значение) = Тип("Дата") Тогда	
			Ячейка.ЦветТекста = WebЦвета.ТемноСиний;
		ИначеЕсли ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда	
			Ячейка.ЦветТекста = WebЦвета.ФуксинТемный;
		ИначеЕсли ТипЗнч(Ячейка.Значение) = Тип("Булево") Тогда	
			Ячейка.ЦветТекста = ?(Ячейка.Значение,WebЦвета.ТемноЗолотистый,WebЦвета.ТемноГрифельноСерый);
			Ячейка.ЦветФона = WebЦвета.СеребристоСерый;
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

Процедура ДопМенюТекстаЗапросаТекстаЗапросаВыполнитьВыделенныйФрагмент(Кнопка)
	ВыполнитьЗапрос(Истина);	
КонецПроцедуры

//открывает конструктор запроса для редактирования текста запроса
Процедура КоманднаяПанельТекстаЗапросаКонструкторЗапроса(Кнопка)
	КонструкторЗапроса = Новый КонструкторЗапроса;
	КонструкторЗапроса.АвтодобавлениеПредставлений = Ложь;
	Попытка
		ТекстЗапросаКонструктор = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
		Если ТекстЗапросаКонструктор <> "" Тогда
			КонструкторЗапроса.Текст = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
		КонецЕсли;
		
		Если КонструкторЗапроса.ОткрытьМодально() Тогда
			ЭлементыФормы.ТекстЗапроса.УстановитьТекст(КонструкторЗапроса.Текст);
		КонецЕсли;
	Исключение
		Предупреждение(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Процедура КоманднаяПанельТекстаЗапросаЗакомментироватьСтроки(Кнопка)
	Перем СтрНач,СтрКон,КолНач,КолКон;
	
	ЭлементыФормы.ТекстЗапроса.ПолучитьГраницыВыделения(СтрНач,КолНач,СтрКон,КолКон);
	ЭлементыФормы.ТекстЗапроса.УстановитьГраницыВыделения(СтрНач,КолНач,СтрКон,КолКон);
	
	Для сч = СтрНач по СтрКон Цикл
		НовСтрока = "//" + ЭлементыФормы.ТекстЗапроса.ПолучитьСтроку(сч);
		ЭлементыФормы.ТекстЗапроса.ЗаменитьСтроку(сч, НовСтрока);
	КонецЦикла;  
	
	ЭлементыФормы.ТекстЗапроса.УстановитьГраницыВыделения(СтрНач,КолНач,СтрКон,КолКон);
	
	Модифицированность = Истина;
КонецПроцедуры

Процедура КоманднаяПанельТекстаЗапросаУдалитьКомментирование(Кнопка)
	Перем СтрНач,СтрКон,КолНач,КолКон;
	
	ЭлементыФормы.ТекстЗапроса.ПолучитьГраницыВыделения(СтрНач,КолНач,СтрКон,КолКон);
	
	Для сч = СтрНач по СтрКон Цикл
		СтарСтрока = ЭлементыФормы.ТекстЗапроса.ПолучитьСтроку(сч);
		Если Не Лев(СтарСтрока,2) = "//" Тогда Продолжить КонецЕсли; 
		
		НовСтрока = Сред(СтарСтрока,3,СтрДлина(СтарСтрока));
		ЭлементыФормы.ТекстЗапроса.ЗаменитьСтроку(сч, НовСтрока);
	КонецЦикла;  
	
	ЭлементыФормы.ТекстЗапроса.УстановитьГраницыВыделения(СтрНач,КолНач,СтрКон,КолКон);
	Модифицированность = Истина;
КонецПроцедуры

Процедура КоманднаяПанельВыборкиПолучитьИзЗапроса(Кнопка)
	
	Если НЕ ПроверитьНаличиеТекстаЗапроса() Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса = вПолучитьТекстЗапроса();
	
	Если ТаблицаВыборок.Количество() > 0 Тогда
		Ответ = Вопрос("Перед заполнением будет очищена текущая настройка выборок.
		|Увы :(
		|Продолжить?",РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ <> КодВозвратаДиалога.Да Тогда Возврат КонецЕсли; 
	КонецЕсли; 
	
	ТаблицаВыборок.Очистить();
	
	Если Найти(ТекстЗапроса,"ОБЩИЕ") Тогда
		НоваяСтрока = ТаблицаВыборок.Добавить();
		НоваяСтрока.Включена = Истина;
		НоваяСтрока.Группировки = "ОБЩИЕ";
		НоваяСтрока.Имя = "ОБЩИЕ";
		НоваяСтрока.ТипОбхода = ОбходРезультатаЗапроса.ПоГруппировкам;
	КонецЕсли; 
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.Текст = вПолучитьТекстЗапроса();
	Построитель.ЗаполнитьНастройки();
	СписокГруппировок = Новый СписокЗначений;
	Для каждого Измерение Из Построитель.Измерения Цикл
		НоваяСтрока = ТаблицаВыборок.Добавить();
		НоваяСтрока.Включена = Истина;
		НоваяСтрока.Группировки = Измерение.Имя;
		НоваяСтрока.Имя = Измерение.Имя;
		Если Измерение.ТипИзмерения = ТипИзмеренияПостроителяЗапроса.Элементы Тогда
			НоваяСтрока.ТипОбхода = ОбходРезультатаЗапроса.ПоГруппировкам;
		Иначе	
			НоваяСтрока.ТипОбхода = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией;
		КонецЕсли; 
	КонецЦикла; 
	
	НоваяСтрока = ТаблицаВыборок.Добавить();
	НоваяСтрока.Включена = Истина;
	НоваяСтрока.Группировки = "";
	НоваяСтрока.Имя = "ДетальныеЗаписи";
	НоваяСтрока.ТипОбхода = ОбходРезультатаЗапроса.ПоГруппировкам;
	
КонецПроцедуры

Процедура КонтМенюСвернутьДерево(Кнопка)
	
	Для каждого Строка Из ДеревоЗапросов.Строки[0].Строки Цикл
		ЭлементыФормы.ДеревоЗапросов.Свернуть(Строка);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ТаблицаВыборокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекДанные = ЭлементыФормы.ТаблицаВыборок.ТекущиеДанные;
		ТекДанные.Включена = Истина;
	КонецЕсли; 
КонецПроцедуры

Процедура ТаблицаВыборокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.Включена Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Черный;
	Иначе	
		ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
	КонецЕсли; 
КонецПроцедуры

//проверяет наличие текста запроса
//возвращает Ложь если нет тексту
Функция ПроверитьНаличиеТекстаЗапроса()
	
	ТекстЗапроса = вПолучитьТекстЗапроса();
	
	Если ПустаяСтрока(СокрЛП(ТекстЗапроса)) Тогда
		Предупреждение("Не заполнен текст запроса!", 30);
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	Возврат ИСТИНА;
КонецФункции //ПроверитьНаличиеТекстаЗапроса

Процедура ПараметрыЗначениеПараметраНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекстЗапроса = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Попытка
		ПараметрыЗапроса = Запрос.НайтиПараметры();
	Исключение
		Возврат;
	КонецПопытки;
	
	Для каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		ИмяПараметра =  ПараметрЗапроса.Имя;
		Если ЭлементыФормы.Параметры.ТекущиеДанные.ИмяПараметра <> ИмяПараметра Тогда
			продолжить;
		КонецЕсли; 
		Если ТипЗнч(Элемент.Значение) = неопределено Тогда
			возврат;
		КонецЕсли; 
		Тип = "";
		Есть = Ложь;
		Для каждого ТекТип Из ПараметрыЗапроса[ИмяПараметра].ТипЗначения.Типы() Цикл
			Если ТекТип = Тип("ДАТА")
				ИЛИ ТекТип = Тип("Число")
				ИЛИ ТекТип = Тип("Строка")
				ИЛИ ТекТип = Тип("Булево")
				Тогда
				Есть = Истина;
			КонецЕсли; 
		КонецЦикла;
		Если Не Есть Тогда
			Тип = "СписокЗначений";
		КонецЕсли; 
		ТипСтр = Новый ОписаниеТипов(ПараметрыЗапроса[ИмяПараметра].ТипЗначения);
		Элемент.ОграничениеТипа = Новый ОписаниеТипов(ТипСтр,Тип);
		Значение = Элемент.Значение;
		Элемент.Значение = Элемент.ОграничениеТипа.ПривестиЗначение(Значение);
		Элемент.ВыбиратьТип = Истина;
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанельТекстаЗапросаЗапросВБуферОбмена(Кнопка)
	#Если Клиент Тогда 
		
		Текст = ЭлементыФормы.ТекстЗапроса;
		//одинарные кавычки надо заменить на двойные
		Строка2Кавычки = Символ(34) + Символ(34);
		Строка1Кавычка = Символ(34);
		
		ВременныйТекст = Новый ТекстовыйДокумент;
		ВременныйТекст.ДобавитьСтроку( //"    Запрос = Новый Запрос;" + Символы.ПС	+ 
		"    Запрос.Текст=""");
		Для Номер = 1 По Текст.КоличествоСтрок() Цикл
			Строка = "    |" +  СтрЗаменить(Текст.ПолучитьСтроку(Номер),Строка1Кавычка,Строка2Кавычки);
			ВременныйТекст.ДобавитьСтроку(Строка);
		КонецЦикла; 	
		ВременныйТекст.ДобавитьСтроку("    |"";");
		Объект = Новый COMОбъект("htmlfile");
		
		Объект.ParentWindow.ClipboardData.Setdata("Text",ВременныйТекст.ПолучитьТекст());
	#КонецЕсли 
КонецПроцедуры

Процедура КоманднаяПанельТекстаЗапросаБуферОбменаВЗапрос(Кнопка)
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Загрузить содержимое буфера обмена в область текста запроса ?", Режим, 0,КодВозвратаДиалога.Нет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;	
	Объект = Новый COMОбъект("htmlfile");
	Буфер = Объект.ParentWindow.ClipboardData.Getdata("Text");
	// Уберем текст до первой кавычки
	ПозКавычки = Найти(Буфер,"""");
	Если ПозКавычки<>0 Тогда
		Буфер = СокрЛП(Сред(Буфер,ПозКавычки+1));
	КонецЕсли;	
	// Уберем текст после последней кавычки
	Длина = СтрДлина(Буфер);
	Поз = Длина;
	Пока Поз > 1 Цикл
	   Если Сред(Буфер,Поз,1) =  """" Тогда
		  Буфер = Лев(Буфер,Поз-1);
		  Прервать;
	   КонецЕсли;	 
	   Поз = Поз - 1;
	КонецЦикла;
	
	Текст = ЭлементыФормы.ТекстЗапроса;
	БуферТекст = Новый ТекстовыйДокумент;
	БуферТекст.УстановитьТекст(Буфер);
	
	ВременныйТекст = Новый ТекстовыйДокумент;
	
	Для Номер = 1 По БуферТекст.КоличествоСтрок() Цикл
		Строка = БуферТекст.ПолучитьСтроку(Номер);
		ВремСтрока = СокрП(Строка);
		Длина = СтрДлина(ВремСтрока);
		Если Сред(ВремСтрока,Длина,1) = ";" Тогда
			Строка = Лев(ВремСтрока,Длина-1);	
		КонецЕсли;	
		ВремСтрока = СокрП(Строка);
		Длина = СтрДлина(ВремСтрока);
		Если Сред(ВремСтрока,Длина,1) = """" Тогда
			Строка = Лев(ВремСтрока,Длина-1);	
		КонецЕсли;	
		ПозПалки = Найти(Строка,"|");
		Если ПозПалки > 0 Тогда
			Строка = Сред(Строка,ПозПалки+1);
		КонецЕсли;		  
		ВременныйТекст.ДобавитьСтроку(Строка);
	КонецЦикла; 	
	//двойные кавычки надо заменить на одинарные
	Строка2Кавычки = Символ(34) + Символ(34);
	Строка1Кавычка = Символ(34);
	ИтоговыйТекст = ВременныйТекст.ПолучитьТекст();
	ИтоговыйТекст	=	СтрЗаменить(ИтоговыйТекст,Строка2Кавычки,Строка1Кавычка);
	
	Текст.УстановитьТекст(ИтоговыйТекст);
КонецПроцедуры

Функция ЧС(Число,Длина = 0)
	Если Длина = 0 Тогда
		Возврат Формат(Число, "ЧН=; ЧВН=; ЧГ=0");
	Иначе	
	    Возврат Формат(Число, "ЧЦ="+ Длина +"; ЧВН=; ЧГ=0");
	КонецЕсли;
КонецФункции	

Процедура ВывестиИнформациюОТипеЗначения()
	Если ЭлементыФормы.ТаблицаРезультата.ТекущиеДанные = Неопределено ИЛИ ЭлементыФормы.ТаблицаРезультата.ТекущаяКолонка = Неопределено Тогда
		Сообщить("Не установлена текущая ячейка");
		Возврат;
	КонецЕсли;	
	ТекущаяКолонка = ЭлементыФормы.ТаблицаРезультата.ТекущаяКолонка;
	Элемент = ЭлементыФормы.ТаблицаРезультата;
	ИмяКолонки = ТекущаяКолонка.Данные;
	СодержимоеЯчейки = Элемент.ТекущиеДанные[ИмяКолонки];
	
	ТипЯч = ТипЗнч(СодержимоеЯчейки);
	ИмяТипа = "";
	
	Если  СодержимоеЯчейки = Неопределено Тогда
		Если Элемент.ТекущаяКолонка.Данные = "Родитель" Тогда
			ИмяТипа = "Пустая ссылка на родительский элемент" + " (" + ИмяКолонки + ")";
		Иначе	
			ИмяТипа = "Значение: Неопределено"+ " (" + ИмяКолонки + ")";
		КонецЕсли;		
	ИначеЕсли  СодержимоеЯчейки = NULL Тогда
		ИмяТипа = "Значение: NULL"+ " (" + ИмяКолонки + ")"; 
	ИначеЕсли XMLТипЗнч(СодержимоеЯчейки)=Неопределено Тогда			
		ИмяТипа = "Служебная ячейка"  + " (" + ИмяКолонки + ")" + " , тип записи:" 
		+ Символы.ПС + "  " + СодержимоеЯчейки + " " + Строка(ТипЗнч(СодержимоеЯчейки));
	ИначеЕсли  Справочники.ТипВсеСсылки().СодержитТип(ТипЯч) Тогда
		Пустая = СодержимоеЯчейки.Пустая();
		Предопределенный = СодержимоеЯчейки.Предопределенный;
		Имя =	СтрЗаменить(XMLТипЗнч(СодержимоеЯчейки).ИмяТипа,"CatalogRef","");
		ИмяПредопределенногоЭлемента = ?(Предопределенный,Строка(Справочники[Сред(Имя,2)].ПолучитьИмяПредопределенного(СодержимоеЯчейки.Ссылка)),"");
		ИмяТипа = "Справочники" + Имя;
		Если Предопределенный  Тогда
			ИмяТипа = ИмяТипа + "." + ИмяПредопределенногоЭлемента + " (" + ИмяКолонки + ")"
			+ Символы.ПС + "  ЗНАЧЕНИЕ(Справочник" + Имя + "." + ИмяПредопределенногоЭлемента + ")";
		КонецЕсли; 
		Если Пустая Тогда
			ИмяТипа = ИмяТипа + ".ПустаяСсылка()" + " (" + ИмяКолонки + ")"
			+ Символы.ПС + "  ЗНАЧЕНИЕ(Справочник" + Имя + ".ПустаяСсылка)";
		ИначеЕсли Не Предопределенный Тогда
			ИмяТипа = ИмяТипа + " (" + ИмяКолонки + ")"
		КонецЕсли; 
		ИмяТипа = ИмяТипа + Символы.ПС+"  Синоним: " + Строка(ТипЗнч(СодержимоеЯчейки));
		Если Не Пустая Тогда
			ИмяТипа = ИмяТипа
			+ Символы.ПС + "  Код: " + ?(СодержимоеЯчейки.Метаданные().ДлинаКода=0,"в виде наименования",СодержимоеЯчейки.Код)
			+ Символы.ПС + "  Значение: " + Строка(СодержимоеЯчейки);
		КонецЕсли;
	ИначеЕсли  ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЯч) Тогда
		Пустая = СодержимоеЯчейки.Пустая();
		Предопределенный = СодержимоеЯчейки.Предопределенный;
		Имя =	СтрЗаменить(XMLТипЗнч(СодержимоеЯчейки).ИмяТипа,"ChartOfCalculationTypesRef","");
		ИмяПредопределенногоЭлемента = Строка(ПланыВидовРасчета[Сред(Имя,2)].ПолучитьИмяПредопределенного(СодержимоеЯчейки.Ссылка));
		
		ИмяТипа = "ПланыВидовРасчета" + Имя;
		Если Предопределенный  Тогда
			ИмяТипа = ИмяТипа + "." + ИмяПредопределенногоЭлемента + " (" + ИмяКолонки + ")"
			+ Символы.ПС + "  ЗНАЧЕНИЕ(ПланВидовРасчета" + Имя + "." + ИмяПредопределенногоЭлемента + ")";
		КонецЕсли; 
		Если Пустая Тогда
			ИмяТипа = ИмяТипа + ".ПустаяСсылка()" + " (" + ИмяКолонки + ")"
		ИначеЕсли Не Предопределенный Тогда
			ИмяТипа = ИмяТипа + " (" + ИмяКолонки + ")"
			+ Символы.ПС + "  ЗНАЧЕНИЕ(ПланыВидовРасчета" + Имя + ".ПустаяСсылка)";
		КонецЕсли; 
		ИмяТипа = ИмяТипа + Символы.ПС+"  Синоним: " + Строка(ТипЗнч(СодержимоеЯчейки));
		Если Не Пустая Тогда
			ИмяТипа = ИмяТипа
			+ Символы.ПС + "  Код: " + ?(СодержимоеЯчейки.Метаданные().ДлинаКода=0,"в виде наименования",СодержимоеЯчейки.Код)
			+ Символы.ПС + "  Наименование: " + Строка(СодержимоеЯчейки);
		КонецЕсли;
	ИначеЕсли  ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЯч) Тогда
		Пустая = СодержимоеЯчейки.Пустая();
		Предопределенный = СодержимоеЯчейки.Предопределенный;
		Имя =	СтрЗаменить(XMLТипЗнч(СодержимоеЯчейки).ИмяТипа,"ChartOfAccountsRef","");
		ИмяПредопределенногоЭлемента = Строка(ПланыСчетов[Сред(Имя,2)].ПолучитьИмяПредопределенного(СодержимоеЯчейки.Ссылка));
		
		ИмяТипа = "ПланыСчетов" + Имя;
		Если Предопределенный  Тогда
			ИмяТипа = ИмяТипа + "." + ИмяПредопределенногоЭлемента + " (" + ИмяКолонки + ")"
			+ Символы.ПС + "  ЗНАЧЕНИЕ(ПланСчетов" + Имя + "." + ИмяПредопределенногоЭлемента + ")";
		КонецЕсли; 
		Если Пустая Тогда
			ИмяТипа = ИмяТипа + ".ПустаяСсылка()" + " (" + ИмяКолонки + ")"
			+ Символы.ПС + "  ЗНАЧЕНИЕ(ПланСчетов" + Имя + ".ПустаяСсылка)";
		ИначеЕсли Не Предопределенный Тогда
			ИмяТипа = ИмяТипа + " (" + ИмяКолонки + ")";
		КонецЕсли; 
		ИмяТипа = ИмяТипа + Символы.ПС+"  Синоним: " + Строка(ТипЗнч(СодержимоеЯчейки));
		Если Не Пустая Тогда
			ИмяТипа = ИмяТипа
			+ Символы.ПС + "  Код: " + ?(СодержимоеЯчейки.Метаданные().ДлинаКода=0,"в виде наименования",СодержимоеЯчейки.Код)
			+ Символы.ПС + "  Наименование: " + Строка(СодержимоеЯчейки.Наименование);
		КонецЕсли;
	ИначеЕсли  Перечисления.ТипВсеСсылки().СодержитТип(ТипЯч) Тогда
		Пустая = СодержимоеЯчейки.Пустая();
		Имя =	СтрЗаменить(XMLТипЗнч(СодержимоеЯчейки).ИмяТипа,"EnumRef","");
		ИмяПеречисления = СодержимоеЯчейки;
		Для каждого ЗнчПереч Из СодержимоеЯчейки.Метаданные().ЗначенияПеречисления Цикл
			Если Строка(СодержимоеЯчейки) = ЗнчПереч.Синоним Тогда 
				ИмяПеречисления = ЗнчПереч.Имя;
			КонецЕсли;
		КонецЦикла;   
		
		ИмяТипа = "Перечисления" + Имя;
		Если Пустая Тогда
			ИмяТипа = ИмяТипа + ".ПустаяСсылка()" + " (" + ИмяКолонки + ")"
			+ Символы.ПС + "  ЗНАЧЕНИЕ(Перечисление" + Имя + ".ПустаяСсылка)";
		Иначе
			ИмяТипа = ИмяТипа + "." + ИмяПеречисления + " (" + ИмяКолонки + ")"
			+ Символы.ПС + "  ЗНАЧЕНИЕ(Перечисление" + Имя + "." + ИмяПеречисления + ")";
		КонецЕсли; 
		ИмяТипа = ИмяТипа + Символы.ПС+"  Синоним: " + Строка(ТипЗнч(СодержимоеЯчейки));
		Если Не Пустая Тогда
			ИмяТипа = ИмяТипа
			+ Символы.ПС + "  Значение: " + Строка(СодержимоеЯчейки);
		КонецЕсли;
	ИначеЕсли  Документы.ТипВсеСсылки().СодержитТип(ТипЯч) Тогда
		Пустая = СодержимоеЯчейки.Пустая();
		Имя =	СтрЗаменить(XMLТипЗнч(СодержимоеЯчейки).ИмяТипа,"DocumentRef","");
		
		ИмяТипа = "Документы" + Имя;
		Если Пустая Тогда
			ИмяТипа = ИмяТипа + ".ПустаяСсылка()" + " (" + ИмяКолонки + ")"
			+ Символы.ПС + "  ЗНАЧЕНИЕ(Документ" + Имя + ".ПустаяСсылка)";
        Иначе			
			ИмяТипа = ИмяТипа  + " (" + ИмяКолонки + ")"
		    + Символы.ПС + "  Синоним: " + Строка(ТипЗнч(СодержимоеЯчейки)) 
		    + Символы.ПС + "  Значение: " + Строка(СодержимоеЯчейки);
		КонецЕсли; 
	ИначеЕсли Лев(XMLТипЗнч(СодержимоеЯчейки).ИмяТипа,30) = "ChartOfCharacteristicTypesRef." Тогда
		Пустая = СодержимоеЯчейки.Пустая();
		Предопределенный = СодержимоеЯчейки.Предопределенный;
		Имя =	СтрЗаменить(XMLТипЗнч(СодержимоеЯчейки).ИмяТипа,"ChartOfCharacteristicTypesRef","");
		ИмяПредопределенногоЭлемента = Строка(ПланыВидовХарактеристик[Сред(Имя,2)].ПолучитьИмяПредопределенного(СодержимоеЯчейки.Ссылка));
		
		ИмяТипа = "ПланыВидовХарактеристик" + Имя;
		Если Предопределенный  Тогда
			ИмяТипа = ИмяТипа + "." + ИмяПредопределенногоЭлемента 	+ " (" + ИмяКолонки + ")"
			+ Символы.ПС + "  ЗНАЧЕНИЕ(ПланВидовХарактеристик" + Имя + "." + ИмяПредопределенногоЭлемента + ")"
		КонецЕсли; 
		Если Пустая Тогда
			ИмяТипа = ИмяТипа + ".ПустаяСсылка()"  + " (" + ИмяКолонки + ")"
			+ Символы.ПС + "  ЗНАЧЕНИЕ(ПланВидовХарактеристик" + Имя + ".ПустаяСсылка)";
		КонецЕсли; 
		ИмяТипа = ИмяТипа + Символы.ПС+"  Синоним: " + Строка(ТипЗнч(СодержимоеЯчейки));
		Если Не Пустая Тогда
			ИмяТипа = ИмяТипа
			+ Символы.ПС + "  Код: " + ?(СодержимоеЯчейки.Метаданные().ДлинаКода=0,"в виде наименования",СодержимоеЯчейки.Код)
			+ Символы.ПС + "  Наименование: " + Строка(СодержимоеЯчейки.Наименование);
		КонецЕсли;
	ИначеЕсли  ТипЯч = Тип("ВидСчета") Тогда
		ИмяТипа = "Вид счета: ("+ ИмяКолонки + ")"  + Символы.ПС + "  " + Строка(СодержимоеЯчейки);
	ИначеЕсли  ТипЯч = Тип("Тип") Тогда
		ИмяТипа = "Тип: ("+ ИмяКолонки + ")"  + Символы.ПС + "  " + Строка(СодержимоеЯчейки);
	ИначеЕсли  ТипЯч = Тип("ОписаниеТипов") Тогда
		ИмяТипа = "Описание типов: ("+ ИмяКолонки + ")"  + Символы.ПС + "  " + Строка(СодержимоеЯчейки);
	ИначеЕсли  ТипЗнч(СодержимоеЯчейки) = Тип("Число") Тогда
		ИмяТипа = "Число: ("+ ИмяКолонки + ")"  + Символы.ПС + "  " + Строка(СодержимоеЯчейки);
	ИначеЕсли  ТипЗнч(СодержимоеЯчейки) = Тип("Дата") Тогда
		ИмяТипа = "Дата: ("+ ИмяКолонки + ")"  
		+ Символы.ПС + "  ДАТАВРЕМЯ(" 
		+ ЧС(Год(СодержимоеЯчейки)) + ","
		+ ЧС(Месяц(СодержимоеЯчейки)) + ","
		+ ЧС(День(СодержимоеЯчейки));
		Если Час(СодержимоеЯчейки) + Минута(СодержимоеЯчейки) + Секунда(СодержимоеЯчейки) > 0 Тогда
			ИмяТипа = ИмяТипа + ","
			+ ЧС(Час(СодержимоеЯчейки)) + ","
			+ ЧС(Минута(СодержимоеЯчейки)) + ","
			+ ЧС(Секунда(СодержимоеЯчейки)) + ")";
		Иначе
			ИмяТипа = ИмяТипа + ")";
		КонецЕсли;
	ИначеЕсли  ТипЗнч(СодержимоеЯчейки) = Тип("Строка") Тогда
		ИмяТипа = "Строка: (" + ИмяКолонки + ")"  + Символы.ПС + "  """ +  Строка(СодержимоеЯчейки)+"""";
	ИначеЕсли  ТипЗнч(СодержимоеЯчейки) = Тип("Булево") Тогда
		ИмяТипа = "Булево: (" + ИмяКолонки + ")" + Символы.ПС + "  " +  ?(СодержимоеЯчейки=ИСТИНА,"ИСТИНА","ЛОЖЬ");
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(ИмяТипа) Тогда	
		Сообщить(ИмяТипа);
	КонецЕсли;	  
КонецПроцедуры

Процедура ДопМенюТекстаЗапросаВесьЗапрос(Кнопка)
	ВыполнитьЗапрос(Ложь);	
КонецПроцедуры

Процедура КоманднаяПанель2ОчисткаСообщений(Кнопка)
	ОчиститьСообщения();
	// Закрыть окно службных сообщений
    ОкноСлСообщ = Новый COMОбъект("Wscript.shell");
    //ОкноСлСообщ.SendKeys("^+{O}"); 
    ОкноСлСообщ.SendKeys("^+{z}");
    ОкноСлСообщ.SendKeys("^+{я}"); 
КонецПроцедуры

Процедура КоманднаяПанельРезультатаЗапросаУзнатьТипЗначения(Кнопка)
    ВставитьРазделительнуюСтроку();
    ВывестиИнформациюОТипеЗначения();
КонецПроцедуры

Процедура КоманднаяПанельРезультатаЗапросаСвернутьОкноСообщений(Кнопка)
	ОчиститьСообщения();
	// Закрыть окно службных сообщений
    ОкноСлСообщ = Новый COMОбъект("Wscript.shell");
    //ОкноСлСообщ.SendKeys("^+{O}"); 
    ОкноСлСообщ.SendKeys("^+{z}");
    ОкноСлСообщ.SendKeys("^+{я}"); 
КонецПроцедуры

Процедура КоманднаяПанельРезультатаЗапросаСкопироватьЗначение(Кнопка)
	Если ЭлементыФормы.ТаблицаРезультата.ТекущиеДанные = Неопределено ИЛИ ЭлементыФормы.ТаблицаРезультата.ТекущаяКолонка = Неопределено Тогда
		Сообщить("Не установлена текущая ячейка");
		Возврат;
	КонецЕсли;	
	ТекущаяКолонка = ЭлементыФормы.ТаблицаРезультата.ТекущаяКолонка;
	Элемент = ЭлементыФормы.ТаблицаРезультата;
	ИмяКолонки = ТекущаяКолонка.Данные;
	СодержимоеЯчейки = Элемент.ТекущиеДанные[ИмяКолонки];
    Сообщить(Строка(СодержимоеЯчейки));
КонецПроцедуры

Процедура КоманднаяПанельРезультатаЗапросаСтрокуВТабло(Кнопка)
	Если ЭлементыФормы.ТаблицаРезультата.ТекущиеДанные = Неопределено ИЛИ ЭлементыФормы.ТаблицаРезультата.ТекущаяКолонка = Неопределено Тогда
		Сообщить("Не установлена текущая строка");
		Возврат;
	КонецЕсли;	
	ТекущаяКолонка = ЭлементыФормы.ТаблицаРезультата.ТекущаяКолонка;
	Элемент = ЭлементыФормы.ТаблицаРезультата;
	Колонок = Элемент.Колонки.Количество();
    ВставитьРазделительнуюСтроку();
	Для Индекс = 0 По Колонок-1  Цикл
	  ИмяКолонки = Элемент.Колонки[Индекс].Имя;
	  ЗначениеЯчейки = Строка(Элемент.ТекущаяСтрока[Индекс]);	
	  Сообщить(ИмяКолонки+": "+ЗначениеЯчейки);
	КонецЦикла; 
КонецПроцедуры

Процедура КоманднаяПанельРезультатаЗапросаВставитьРазделительнуюСтроку(Кнопка)
	 ВставитьРазделительнуюСтроку();
КонецПроцедуры

Процедура ВставитьРазделительнуюСтроку()
	Сообщить("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мИмяФайла = "";
мИмяПути = "";

мЗаголовокФормы = Заголовок;

мТекущаяСтрока = НеОпределено;
мИдетДобавление = Ложь;
мАктивизированаДобавляемаяЗапись = Ложь;

мТаблицаЗагружена = Ложь;
мСводнаяТаблицаЗагружена = Ложь;

мТаблицаВыборок = Новый ТаблицаЗначений;

СписокТиповОбходаВыборокЗапроса = Новый СписокЗначений;
СписокТиповОбходаВыборокЗапроса.Добавить(ОбходРезультатаЗапроса.Прямой,"Прямой");
СписокТиповОбходаВыборокЗапроса.Добавить(ОбходРезультатаЗапроса.ПоГруппировкам,"ПоГруппировкам");
СписокТиповОбходаВыборокЗапроса.Добавить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией,"ПоГруппировкамСИерархией");

ЭлементыФормы.ТаблицаВыборок.Колонки.ТипОбхода.ЭлементУправления.СписокВыбора = СписокТиповОбходаВыборокЗапроса;